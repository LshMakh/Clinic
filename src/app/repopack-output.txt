This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-12-09T10:04:57.339Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
app-routing.module.ts
app.component.css
app.component.html
app.component.ts
app.module.ts
components/booking-modal/booking-modal.component.css
components/booking-modal/booking-modal.component.html
components/booking-modal/booking-modal.component.ts
components/calendar-edit-modal/calendar-edit-modal.component.css
components/calendar-edit-modal/calendar-edit-modal.component.html
components/calendar-edit-modal/calendar-edit-modal.component.ts
components/calendar/calendar.component.css
components/calendar/calendar.component.html
components/calendar/calendar.component.ts
components/categories/categories.component.css
components/categories/categories.component.html
components/categories/categories.component.ts
components/change-password-modal/change-password-modal.component.css
components/change-password-modal/change-password-modal.component.html
components/change-password-modal/change-password-modal.component.ts
components/doctor-profile-card/doctor-profile-card.component.css
components/doctor-profile-card/doctor-profile-card.component.html
components/doctor-profile-card/doctor-profile-card.component.ts
components/footer/footer.component.css
components/footer/footer.component.html
components/footer/footer.component.ts
components/header/header.component.css
components/header/header.component.html
components/header/header.component.ts
components/login-pop-up/login-pop-up.component.css
components/login-pop-up/login-pop-up.component.html
components/login-pop-up/login-pop-up.component.ts
components/search-dropdown/search-dropdown.component.css
components/search-dropdown/search-dropdown.component.html
components/search-dropdown/search-dropdown.component.ts
config/api.config.ts
custom-preloading-strategy.ts
guards/admin.guard.ts
guards/auth.guard.ts
guards/doctor.guard.ts
guards/no-auth.guard.ts
guards/no-doctor-guard.ts
guards/patient.guard.ts
interceptors/auth.interceptor.ts
Models/appointment.model.ts
Models/doctorCard.model.ts
Models/experience.model.ts
Models/Login.model.ts
Models/Patient.model.ts
Models/updateDoctorDto.ts
modules/admin/admin-routing.module.ts
modules/admin/admin.module.ts
modules/doctor/admin-routing.ts
modules/doctor/doctor.module.ts
modules/patient/patient-routing.ts
modules/patient/patient.module.ts
modules/registration/registration-routing.modue.ts
modules/registration/registration.module.ts
modules/shared/shared.module.ts
pages/admin-categories/admin-categories.component.css
pages/admin-categories/admin-categories.component.html
pages/admin-categories/admin-categories.component.ts
pages/admin-profile/admin-profile.component.css
pages/admin-profile/admin-profile.component.html
pages/admin-profile/admin-profile.component.ts
pages/book-appointment/book-appointment.component.css
pages/book-appointment/book-appointment.component.html
pages/book-appointment/book-appointment.component.ts
pages/doctor-profile/doctor-profile.component.css
pages/doctor-profile/doctor-profile.component.html
pages/doctor-profile/doctor-profile.component.ts
pages/doctor-registration/doctor-registration.component.css
pages/doctor-registration/doctor-registration.component.html
pages/doctor-registration/doctor-registration.component.ts
pages/main/main.component.css
pages/main/main.component.html
pages/main/main.component.ts
pages/registration/registration.component.css
pages/registration/registration.component.html
pages/registration/registration.component.ts
pages/user-profile/user-profile.component.css
pages/user-profile/user-profile.component.html
pages/user-profile/user-profile.component.ts
services/appointment.service.ts
services/auth.service.ts
services/doctor.service.ts
services/search.service.ts
services/visibility.service.ts

================================================================
Repository Files
================================================================

================
File: app-routing.module.ts
================
import { NgModule } from '@angular/core';
import { RouterModule, Routes, PreloadAllModules } from '@angular/router';
import { MainComponent } from './pages/main/main.component';
import { AuthGuard } from './guards/auth.guard';
import { NoAuthGuard } from './guards/no-auth.guard';
import { CustomPreloadingStrategy } from './custom-preloading-strategy';
import { BookAppointmentComponent } from './pages/book-appointment/book-appointment.component';
import { NoDoctorGuard } from './guards/no-doctor-guard';

const routes: Routes = [
  {
    path: '',
    component: MainComponent
  },
  {
    path: 'main',
    component: MainComponent
  },
  {
    path: 'book-appointment/:id',  
    component: BookAppointmentComponent,
    canActivate:[NoDoctorGuard]
  },
  {
    path: 'register',
    loadChildren: () => import('./modules/registration/registration.module')
      .then(m => m.RegistrationModule)
      .catch(err => {
        console.error('Error loading registration module:', err);
        throw err;
      }),
    canActivate: [NoAuthGuard],
    data: { preload: true }
  },
  {
    path: 'admin',
    loadChildren: () => import('./modules/admin/admin.module')
      .then(m => m.AdminModule)
      .catch(err => {
        console.error('Error loading admin module:', err);
        throw err;
      }),
    canActivate: [AuthGuard],
    data: { preload: false }
  },
  {
    path: 'doctor',
    loadChildren: () => import('./modules/doctor/doctor.module')
      .then(m => m.DoctorModule)
      .catch(err => {
        console.error('Error loading doctor module:', err);
        throw err;
      }),
    canActivate: [AuthGuard],
    data: { preload: true }
  },
  {
    path: 'patient',
    loadChildren: () => import('./modules/patient/patient.module')
      .then(m => m.PatientModule)
      .catch(err => {
        console.error('Error loading patient module:', err);
        throw err;
      }),
    canActivate: [AuthGuard],
    data: { preload: true }
  },
  {
    path: '**',
    redirectTo: ''
  }
];

@NgModule({
  imports: [
    RouterModule.forRoot(routes, {
      preloadingStrategy: CustomPreloadingStrategy,
      scrollPositionRestoration: 'enabled',
      anchorScrolling: 'enabled', 
      onSameUrlNavigation: 'reload'
    })
  ],
  exports: [RouterModule]
})
export class AppRoutingModule { }

================
File: app.component.css
================
:host {
    display: flex;
    flex-direction: column;
    min-height: 100vh;
  }
  .content {
    flex: 1;
  }

================
File: app.component.html
================
<app-header></app-header>
<main class="content">
<router-outlet></router-outlet>
</main>
<app-footer></app-footer>

================
File: app.component.ts
================
import { Component, OnInit } from '@angular/core';
import { Router, RouteConfigLoadStart, RouteConfigLoadEnd } from '@angular/router';

@Component({
  selector: 'app-root',
  template: `
    <app-header></app-header>
    <main class="content">
     
      <div *ngIf="isLoading" class="loading-indicator">
        Loading...
      </div>
      <router-outlet></router-outlet>
    </main>
    <app-footer></app-footer>
  `,
  styles: [`
    .loading-indicator {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      background: #18a4e1;
      height: 3px;
      z-index: 1000;
      animation: loading 1s ease-in-out infinite;
    }
    @keyframes loading {
      0% { width: 0; }
      50% { width: 50%; }
      100% { width: 100%; }
    }
  `]
})
export class AppComponent implements OnInit {
  isLoading = false;
  loadingCount = 0;

  constructor(private router: Router) {}

  ngOnInit() {
   
    this.router.events.subscribe(event => {
      if (event instanceof RouteConfigLoadStart) {
        this.loadingCount++;
        this.isLoading = true;
      } else if (event instanceof RouteConfigLoadEnd) {
        this.loadingCount--;
        this.isLoading = this.loadingCount > 0;
      }
    });
  }
}

================
File: app.module.ts
================
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';
import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';
import { HeaderComponent } from './components/header/header.component';
import { FooterComponent } from './components/footer/footer.component';
import { MainComponent } from './pages/main/main.component';
import { LoginPopUpComponent } from './components/login-pop-up/login-pop-up.component';
import { MatDialogModule } from '@angular/material/dialog';
import { ReactiveFormsModule, FormsModule } from '@angular/forms';
import { SharedModule } from './modules/shared/shared.module';
import { AuthInterceptor } from './interceptors/auth.interceptor';
import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
import { RouterModule } from '@angular/router';
import { BookAppointmentComponent } from './pages/book-appointment/book-appointment.component';

@NgModule({
  declarations: [
    AppComponent,
    HeaderComponent,
    FooterComponent,
    MainComponent,
    LoginPopUpComponent,
    BookAppointmentComponent
  ],
  imports: [
    BrowserModule,
    HttpClientModule,
    MatDialogModule,
    ReactiveFormsModule,
    FormsModule,
    RouterModule,
    SharedModule,
    BrowserAnimationsModule,
    AppRoutingModule
  ],
  providers: [
    {
      provide: HTTP_INTERCEPTORS,
      useClass: AuthInterceptor,
      multi: true
    }
  ],
  bootstrap: [AppComponent]
})
export class AppModule { }

================
File: components/booking-modal/booking-modal.component.css
================
.modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;

    z-index: 1000;
  }

  .modal-container {
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 400px;
    background-color: white;
    border-radius: 8px;
    padding: 30px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    z-index: 1001;
    animation: fadeIn 0.3s ease;
  }

  .modal-content {
    display: flex;
    flex-direction: column;
  }

  span {
    color: #3ACF99;
    margin-bottom: 20px;
    font-size: 16px;
    text-align: left;
  }
  
  p {
    
    margin-bottom: 20px;
    font-size: 16px;
    text-align: center;
  }

  .form-group {
    margin-bottom: 20px;
    position: relative;
  }

  textarea {
    width: 100%;
    padding: 12px 15px;
    border: 1px solid #18a4e180;
    border-radius: 8px;
    font-size: 16px;
    resize: vertical;
    min-height: 100px;
    transition: border-color 0.3s ease;
  }

  textarea:focus {
    outline: none;
    border-color: #18A4E1;
  }

  textarea.invalid {
    border-color: #ff4444;
  }

  .error-message {
    color: #ff4444;
    font-size: 12px;
    margin-top: 5px;
    padding-left: 15px;
  }

  .alert {
    padding: 12px;
    border-radius: 4px;
    margin-bottom: 20px;
    text-align: center;
    font-size: 14px;
  }

  .alert-success {
    background-color: #d4edda;
    color: #155724;
    border: 1px solid #c3e6cb;
  }

  .alert-error {
    background-color: #f8d7da;
    color: #721c24;
    border: 1px solid #f5c6cb;
  }

  .button-group {
    display: flex;
    justify-content: flex-end; 
    margin-top: 20px;
  }
  
  .submit-button {
    width: 170px; 
    height: 50px; 
    padding: 12px;
    border: none;
    border-radius: 25px;
    font-size: 16px;
    cursor: pointer;
    transition: all 0.3s ease;
    background-color: #3ACF99;
    color: white;
  }

  .submit-button:hover:not(:disabled) {
    background-color: #34B088;
    transition: 0.5s;
    
  }

  .submit-button:disabled {
    background-color: #cccccc;
    cursor: not-allowed;
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translate(-50%, -48%);
    }
    to {
      opacity: 1;
      transform: translate(-50%, -50%);
    }
  }

  @media (max-width: 480px) {
    .modal-container {
      width: 90%;
      padding: 20px;
    }

    h2 {
      font-size: 20px;
      margin-bottom: 20px;
    }

    textarea {
      font-size: 14px;
    }

    .button-group button {
      font-size: 14px;
      padding: 10px;
    }
  }

================
File: components/booking-modal/booking-modal.component.html
================
<div class="modal-overlay" (click)="onClose()"></div>
<div class="modal-container">
  <span>გსურთ ვიზიტის დაჯავშნა?</span>
  <br>
  <p>შეგიძლიათ მიუთითოთ თქვენი პრობლემა</p>
  
  <div *ngIf="showAlert" 
       [class]="'alert ' + (alertType === 'success' ? 'alert-success' : 'alert-error')">
    {{ alertMessage }}
  </div>

  <div class="modal-content">
    <form [formGroup]="bookingForm" (ngSubmit)="onSubmit()">
      <div class="form-group">
        <textarea 
          formControlName="description" 
          placeholder="აღწერა..."
          rows="4"
          [class.invalid]="bookingForm.get('description')?.invalid && 
                          bookingForm.get('description')?.touched">
        </textarea>
        <div class="error-message" 
             *ngIf="bookingForm.get('description')?.invalid && 
                    bookingForm.get('description')?.touched">
          აღწერის ველის შევსება აუცილებელია
        </div>
      </div>

      <div class="button-group">
       
        <button type="submit" 
                class="submit-button" 
                [disabled]="!bookingForm.valid || isSubmitting">
          {{ isSubmitting ? 'მიმდინარეობს...' : 'დაჯავშნა' }}
        </button>
      </div>
    </form>
  </div>
</div>

================
File: components/booking-modal/booking-modal.component.ts
================
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { AppointmentService } from '../../services/appointment.service';

@Component({
  selector: 'app-booking-modal',
  templateUrl:'./booking-modal.component.html',
  styleUrl:'./booking-modal.component.css'
})
export class BookingModalComponent {
  @Input() doctorId!: number;
  @Input() appointmentDate!: Date;
  @Input() timeSlot!: string;
  @Output() close = new EventEmitter<void>();
  @Output() booked = new EventEmitter<void>();

  bookingForm: FormGroup;
  isSubmitting = false;
  showAlert = false;
  alertMessage: string = '';
  alertType: 'success' | 'error' = 'error';

  constructor(
    private fb: FormBuilder,
    private appointmentService: AppointmentService
  ) {
    this.bookingForm = this.fb.group({
      description: ['', [Validators.required, Validators.maxLength(500)]]
    });
  }

  onSubmit(): void {
    if (this.bookingForm.valid && !this.isSubmitting) {
      this.isSubmitting = true;
      this.hideAlert();

      const appointmentData = {
        doctorId: this.doctorId,
        appointmentDate: this.appointmentDate,
        timeSlot: this.timeSlot,
        description: this.bookingForm.get('description')?.value
      };

      console.log(appointmentData);

      this.appointmentService.createAppointment(appointmentData).subscribe({
        next: () => {
          this.showSuccessAlert('ვიზიტი წარმატებით დაჯავშნულია');
          setTimeout(() => {
            this.booked.emit();
            this.onClose();
          }, 1500);
        },
        error: (error) => {
          let errorMessage = 'დაფიქსირდა შეცდომა';
          
          if (error.status === 409) {
            errorMessage = 'მითითებული დრო უკვე დაკავებულია';
          } else if (error.status === 400) {
            errorMessage = 'გთხოვთ შეამოწმოთ შეყვანილი მონაცემები';
          } else if (error.status === 403) {
            errorMessage = 'თქვენ არ გაქვთ ჯავშნის უფლება';
          }
          
          this.showErrorAlert(errorMessage);
          this.isSubmitting = false;
        }
      });
    }
  }

  showSuccessAlert(message: string): void {
    this.alertMessage = message;
    this.alertType = 'success';
    this.showAlert = true;
  }

  showErrorAlert(message: string): void {
    this.alertMessage = message;
    this.alertType = 'error';
    this.showAlert = true;
  }

  hideAlert(): void {
    this.showAlert = false;
    this.alertMessage = '';
  }

  onClose(): void {
    this.close.emit();
  }
}

================
File: components/calendar-edit-modal/calendar-edit-modal.component.css
================
.modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    z-index: 1000;
  }

  .modal-container {
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 400px;
    background-color: white;
    border-radius: 8px;
    padding: 30px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    z-index: 1001;
    animation: fadeIn 0.3s ease;
  }

  .modal-content {
    display: flex;
    flex-direction: column;
  }

  h2 {
    color: #18a4e1;
    margin-bottom: 30px;
    font-size: 24px;
    text-align: center;
  }

  .form-group {
    margin-bottom: 20px;
    position: relative;
  }

  textarea {
    width: 100%;
    padding: 12px 15px;
    border: 1px solid #18a4e180;
    border-radius: 8px;
    font-size: 16px;
    resize: vertical;
    min-height: 100px;
    transition: border-color 0.3s ease;
  }

  textarea:focus {
    outline: none;
    border-color: #18A4E1;
  }

  textarea.invalid {
    border-color: #ff4444;
  }

  .error-message {
    color: #ff4444;
    font-size: 12px;
    margin-top: 5px;
    padding-left: 15px;
  }

  .alert {
    padding: 12px;
    border-radius: 4px;
    margin-bottom: 20px;
    text-align: center;
    font-size: 14px;
  }

  .alert-success {
    background-color: #d4edda;
    color: #155724;
    border: 1px solid #c3e6cb;
  }

  .alert-error {
    background-color: #f8d7da;
    color: #721c24;
    border: 1px solid #f5c6cb;
  }

  .button-group {
    display: flex;
    gap: 15px;
    margin-top: 20px;
  }

  .cancel-button, .submit-button {
    flex: 1;
    padding: 12px;
    border: none;
    border-radius: 25px;
    font-size: 16px;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .cancel-button {
    background-color: #f5f5f5;
    color: #666;
  }

  .cancel-button:hover {
    background-color: #e0e0e0;
  }

  .submit-button {
    background-color: #3ACF99;
    color: white;
  }

  .submit-button:hover:not(:disabled) {
    background-color: #34B088;
  }

  .submit-button:disabled {
    background-color: #cccccc;
    cursor: not-allowed;
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translate(-50%, -48%);
    }
    to {
      opacity: 1;
      transform: translate(-50%, -50%);
    }
  }

  @media (max-width: 480px) {
    .modal-container {
      width: 90%;
      padding: 20px;
    }

    h2 {
      font-size: 20px;
      margin-bottom: 20px;
    }

    textarea {
      font-size: 14px;
    }

    .button-group button {
      font-size: 14px;
      padding: 10px;
    }
  }

================
File: components/calendar-edit-modal/calendar-edit-modal.component.html
================
<div class="modal-overlay" (click)="onClose()"></div>
    <div class="modal-container">
      <h2>ვიზიტის აღწერის შეცვლა</h2>
      
      <div *ngIf="showAlert" 
           [class]="'alert ' + (alertType === 'success' ? 'alert-success' : 'alert-error')">
        {{ alertMessage }}
      </div>

      <div class="modal-content">
        <form [formGroup]="editForm" (ngSubmit)="onSubmit()">
          <div class="form-group">
            <textarea 
              formControlName="description" 
              placeholder="ვიზიტის მიზეზი"
              rows="4"
              [class.invalid]="editForm.get('description')?.invalid && 
                              editForm.get('description')?.touched">
            </textarea>
            <div class="error-message" 
                 *ngIf="editForm.get('description')?.invalid && 
                        editForm.get('description')?.touched">
              <span *ngIf="editForm.get('description')?.errors?.['required']">
                აღწერის ველის შევსება აუცილებელია
              </span>
              <span *ngIf="editForm.get('description')?.errors?.['maxlength']">
                აღწერა არ უნდა აღემატებოდეს 500 სიმბოლოს
              </span>
            </div>
          </div>

          <div class="button-group">
            <button type="button" class="cancel-button" (click)="onClose()">გაუქმება</button>
            <button type="submit" 
                    class="submit-button" 
                    [disabled]="!editForm.valid || isSubmitting">
              {{ isSubmitting ? 'მიმდინარეობს...' : 'შენახვა' }}
            </button>
          </div>
        </form>
      </div>
    </div>

================
File: components/calendar-edit-modal/calendar-edit-modal.component.ts
================
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';

interface EditEvent {
  appointmentId: number;
  description: string;
}

@Component({
  selector: 'app-calendar-edit-modal',
  templateUrl:'./calendar-edit-modal.component.html',
 styleUrl:'./calendar-edit-modal.component.css'
})


export class CalendarEditModalComponent {
  @Input() appointmentId!: number;
  @Input() currentDescription: string = '';
  @Output() close = new EventEmitter<void>();
  @Output() saved = new EventEmitter<EditEvent>();

  editForm: FormGroup;
  isSubmitting = false;
  showAlert = false;
  alertMessage: string = '';
  alertType: 'success' | 'error' = 'error';

  constructor(private fb: FormBuilder) {
    this.editForm = this.fb.group({
      description: ['', [Validators.required, Validators.maxLength(500)]]
    });
  }

  ngOnInit() {
    this.editForm.patchValue({
      description: this.currentDescription
    });
  }

  onSubmit(): void {
    if (this.editForm.valid && !this.isSubmitting) {
      this.isSubmitting = true;
      const description = this.editForm.get('description')?.value;
      
      this.saved.emit({
        appointmentId: this.appointmentId,
        description: description
      });

      this.showSuccessAlert('ვიზიტის აღწერა წარმატებით შეიცვალა');
      setTimeout(() => {
        this.onClose();
      }, 1500);
    }
  }

  showSuccessAlert(message: string): void {
    this.alertMessage = message;
    this.alertType = 'success';
    this.showAlert = true;
  }

  showErrorAlert(message: string): void {
    this.alertMessage = message;
    this.alertType = 'error';
    this.showAlert = true;
  }

  onClose(): void {
    this.close.emit();
  }
}

================
File: components/calendar/calendar.component.css
================
.weekly-calendar-container {
      width: 830px;
      
      margin: 0 auto;
    }

    .calendar-header {
      display: flex;
      justify-content: flex-start;
      align-items: center;
      margin-bottom: 30px;
      margin-left: 50px;
    }

    

    .calendar-grid {
      display: grid;
      grid-template-columns: 150px repeat(7, 1fr);
      border-radius: 10px;
      overflow: hidden;
    }

    .time-slot-header,
    .day-header {
      background-color: #ecf2f8;
      padding: 10px;
      text-align: center;
      display: flex;
      justify-content: center; 
      align-items: center; 
    }


    .time-slot {
      background-color: white;
      padding: 10px;
      text-align: center;
      border-bottom: 1px solid #ecf2f8;
      border-right: 1px solid #ecf2f8dd;
      border-left: 1px solid #ecf2f8dd;
      color: #053354;
      display: flex;
      justify-content: center;
      align-items: center;
    }

    .calendar-cell {
      background-color: white;
      border-bottom: 1px solid #ecf2f8;
      border-right: 1px solid #ecf2f8dd;
      height: 60px;
      position: relative;
    }

    .activity {
      padding: 13px 7px;
      border-radius: 4px;
      font-size: 14px;
      text-align: center;
      cursor: pointer;
      position: absolute;
      width: 100%;
      height: 100%;
      display: flex;
      justify-content: center;
      align-items: center;
    }

    .activity.empty {
      background-color: white;
      color: #0533544D;
      cursor: pointer;
    }

    .activity.empty > span {
      color: #3ACF99;
    }

    .activity.empty:hover {
      background-color: #f8f9fa;
    }

    .activity.reservation {
      background-color: #dafaee;
      color: #3acf99;
    }

    .activity.off {
      background-color: #ff93a6;
      cursor: default;
    }

    .activity.off.yellow {
      background-color: #FFFFF5;
    }

    .white-circle {
      position: absolute;
      top: 5px;
      right: 5px;
      height: 18px;
      width: 18px;
      background-color: white;
      border-radius: 100%;
      display: flex;
      justify-content: center;
      align-items: center;
      cursor: pointer;
    }

    .edit-circle {
      position: absolute;
      top: 5px;
      left: 5px;
      height: 18px;
      width: 18px;
      background-color: white;
      border-radius: 100%;
      display: flex;
      justify-content: center;
      align-items: center;
      cursor: pointer;
    }

    .white-circle > img {
      width: 6px;
      height: 6px;
    }
    .edit-circle > img{
      width: 10px;
      height: 10px;
    }
    .arrow {
      background: none;
      border: none;
      cursor: pointer;
      color: #053354;
      border-radius: 50%;
      width: 35px;
      height: 35px;
      display: flex;
      justify-content: center;
      align-items: center;
      box-sizing: border-box;
    }
    
    .arrow:hover {
      transform: scale(1.02);
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
      background-color: white;
    }

    .arrow:disabled {
      opacity: 0.5;
      cursor: not-allowed;
    }

    .month {
      display: flex;
      flex-direction: row;
      align-items: center;
      margin-left: 43px;
  }
  
  .month button {
      border-radius: 50%;
      width: 35px;
      height: 35px;
      background-color: #FFFFFF;
      border: none;
      cursor: pointer;
      transition: transform 0.2s, box-shadow 0.2s;
  }
  
  .month button:hover{
      transform: scale(1.02);
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  }
  
  .month h4 {
      border-radius: 50px;
      margin-left: 10px;
      margin-right: 10px;
      color: #18A4E1;
      border: 1px solid #18A4E1;
      height: 35px;
      width: 140px;
      font-size: 18px;
      text-align: center;
      line-height: 35px;
  }

================
File: components/calendar/calendar.component.html
================
<div class="weekly-calendar-container">
    <div class="calendar-header">
      <h4 style="color: #053354;">{{ currentYear }}</h4>
        <div class="month">
          <button (click)="previousMonth()"><img src="/assets/Vector (2).svg" alt="Previous Month"></button>
          <h4>{{ currentMonthName }}</h4>
          <button (click)="nextMonth()"><img src="/assets/Vector (1).svg" alt="Next Month"></button>
        </div>
    </div>

    <div class="calendar-grid">
      <div class="time-slot-header">
        <button (click)="previousWeek()" class="arrow">&#10094;</button>
        <button (click)="nextWeek()" class="arrow">&#10095;</button>
      </div>

      <div *ngFor="let day of displayedWeek" class="day-header">
         <span style="color: #18A4E1; margin-right: 2px;">{{ day | date:'d' }}</span> ( {{ daysOfWeek[day.getDay()] }} )
      </div>

      <ng-container *ngFor="let timeSlot of timeSlots">
        <div class="time-slot">{{ timeSlot }}</div>
        <div *ngFor="let day of displayedWeek" class="calendar-cell">
          <ng-container [ngSwitch]="getSlotStatus(day, timeSlot)">
            <ng-container *ngSwitchCase="'available'">
              <div *ngIf="viewMode === 'booking'; else Empty" 
                   class="activity empty" 
                   (click)="makeReservation(day, timeSlot)">
                <span>+&nbsp;</span> დაჯავშნა
              </div>
            </ng-container>

            <ng-template #Empty></ng-template>

            <div *ngSwitchCase="'own'" class="activity reservation">
              <div *ngIf="userRole==='PATIENT'; else Reserve">ჩემი ჯავშანი</div>
              <ng-template #Reserve>დაჯავშნილია</ng-template>
              <div *ngIf="isDeleteVisible" (click)="deleteReservation($event, day, timeSlot)" class="white-circle">
                <img src="assets/Group 1.svg" alt="delete">
              </div>
              <div *ngIf="isEditVisible" (click)="openEditModal($event,day,timeSlot)" class="edit-circle" >
                <img src="assets/calendaredit.svg" alt="delete">
              </div>
            </div>

            <div *ngSwitchCase="'booked'" class="activity off"></div>
            
            <div *ngSwitchCase="'weekend'" class="activity off yellow"></div>
          </ng-container>
        </div>
      </ng-container>
    </div>
  </div>

  <app-booking-modal 
    *ngIf="showBookingModal"
    [doctorId]="doctorId"
    [appointmentDate]="selectedDate!"
    [timeSlot]="selectedTimeSlot!"
    (close)="closeBookingModal()"
    (booked)="onAppointmentBooked()">
  </app-booking-modal>

  <app-calendar-edit-modal 
  *ngIf="showEditModal && selectedAppointment"
  [appointmentId]="selectedAppointment.appointmentId"
  [currentDescription]="selectedAppointment.description || ''"
  (close)="closeEditModal()"
  (saved)="handleEditSave($event)">
</app-calendar-edit-modal>

================
File: components/calendar/calendar.component.ts
================
import { Component, OnInit, OnDestroy, Input, input } from '@angular/core';
import { AppointmentService, TimeSlot, Appointment } from '../../services/appointment.service';
import { AuthService } from '../../services/auth.service';
import { Subject, takeUntil, firstValueFrom, Subscription } from 'rxjs';
import { EditEvent } from '../../Models/appointment.model';
import { ActivatedRoute, Router } from '@angular/router';

@Component({
  selector: 'app-calendar',
  templateUrl: './calendar.component.html',
  styleUrl:'./calendar.component.css',
})
export class CalendarComponent implements OnInit, OnDestroy {
  @Input() doctorId!: number;
  @Input() viewMode: 'doctor' | 'patient'|'booking' = 'patient';
  @Input() isDeleteVisible:boolean = false;
  @Input() isEditVisible:boolean = false;

  currentYear: number = new Date().getFullYear();
  currentMonthName: string = '';
  currentDate: Date = new Date();
  displayedWeek: Date[] = [];
  showBookingModal = false;
  selectedDate: Date | null = null;
  selectedTimeSlot: string | null = null;
  userRole : any;
  mousePosition: { x: number; y: number } | null = null;
  selectedAppointment: Appointment | null = null;
  showEditModal = false;
  private routeSub: Subscription | null = null;



  daysOfWeek: string[] = ['კვი', 'ორშ', 'სამ', 'ოთხ', 'ხუთ', 'პარ', 'შაბ'];
  timeSlots: string[] = [
    '09:00 - 10:00', '10:00 - 11:00', '11:00 - 12:00',
    '12:00 - 13:00', '13:00 - 14:00', '14:00 - 15:00',
    '15:00 - 16:00', '16:00 - 17:00'
  ];

  private appointments: Map<string, Appointment> = new Map();
  private availableSlots: Map<string, TimeSlot> = new Map();
  private destroy$ = new Subject<void>();
  private userId: string | null = null;
  private userPatientId:string|null = null;
  private userDoctorId:string|null = null;

  constructor(
    private appointmentService: AppointmentService,
    private authService: AuthService,
    private route:ActivatedRoute
  ) {}

  ngOnInit() {
    this.userId = this.authService.getUserId();
    this.userDoctorId = this.authService.getUserDoctorId();
    this.userPatientId = this.authService.getUserPatientId();
    this.updateWeek();
    this.loadInitialData();
    this.subscribeToAppointments();
    this.userRole = this.authService.getRole();

    this.routeSub = this.route.params.subscribe(params => {
      const id = +params['id'];
      if (id && id !== this.doctorId) {
        this.doctorId = id;
        this.loadInitialData();
      }
    });

    console.log(this.authService.getUserPatientId());
  }

  ngOnDestroy() {
    this.destroy$.next();
    this.destroy$.complete();
  }

  private async loadInitialData() {
    if (this.viewMode ==='booking'){
      await firstValueFrom(this.appointmentService.loadDoctorAppointmentsFromUser(this.doctorId))

    }
    
    if(this.authService.getRole()==='ADMIN'){
      await firstValueFrom(this.appointmentService.loadDoctorAppointmentsFromUser(this.doctorId))
    }

    if (this.viewMode === 'doctor' && this.authService.getRole() !=='ADMIN') {
      
      await firstValueFrom(this.appointmentService.loadDoctorAppointments());

    } 
    if(this.userId) {
      await firstValueFrom(this.appointmentService.loadPatientAppointments());
    }
    await this.loadAvailableSlots();
  }

  private subscribeToAppointments() {
    const appointmentsObservable = this.viewMode === 'booking'
      ? this.appointmentService.getDoctorAppointments()
      : this.viewMode === 'doctor'
        ? this.appointmentService.getDoctorAppointments()
        : this.appointmentService.getPatientAppointments();

    appointmentsObservable
      .pipe(takeUntil(this.destroy$))
      .subscribe(appointments => {
   
        this.updateAppointmentsMap(appointments);
      });
  }

  private async loadAvailableSlots() {
    if (this.doctorId) {
      try {
        const slots = await firstValueFrom(this.appointmentService.getAvailableSlots(this.doctorId, this.currentDate)
      );
      this.updateAvailableSlotsMap(slots);
    } catch (error) {
      console.error('Error loading available slots:', error);
    }
  }
}

getSlotStatus(day: Date, timeSlot: string): 'available' | 'own' | 'booked' | 'weekend' {
  if (this.isWeekend(day)) {
    return 'weekend';
  }

  const key = this.getSlotKey(day, timeSlot);
  const appointment = this.appointments.get(key);
  const slot = this.availableSlots.get(key);

  if(!this.userId){
    if(appointment){
    return 'booked';
    }
  }

  if(this.authService.getRole()==='PATIENT' || this.authService.getRole() ==="ADMIN"){
    if (appointment) {
      if(this.authService.getRole()==='ADMIN' && this.viewMode==='doctor') {
        return 'own'; 
      }
      return appointment.patientId.toString() === this.userPatientId ? 'own' : 'booked';
    }
  }
  else if(this.authService.getRole()==='DOCTOR'){
    if(appointment){
      return appointment.doctorId.toString() === this.userDoctorId ? 'own':'booked';
    }
  }
  if (slot && !slot.isAvailable) {
    return 'booked';
  }

  return 'available';
}

private getSlotKey(date: Date, timeSlot: string): string {
  
  const normalizedDate = new Date(date);
  normalizedDate.setHours(0, 0, 0, 0);
  

  const dateString = normalizedDate.toISOString().split('T')[0];

  return `${dateString}_${timeSlot}`;
}

private updateAppointmentsMap(appointments: Appointment[]) {
  this.appointments.clear();
  appointments.forEach(appointment => {
    const key = this.getSlotKey(new Date(appointment.appointmentDate), appointment.timeSlot);
    this.appointments.set(key, appointment);
  });
}

private updateAvailableSlotsMap(slots: TimeSlot[]) {
  this.availableSlots.clear();
  slots.forEach(slot => {
    const key = this.getSlotKey(this.currentDate, slot.timeSlot);
    this.availableSlots.set(key, slot);
  });
}

async makeReservation(date: Date, timeSlot: string) {
  if (!this.userId) {
    alert('დასაჯავშნათ გთხოვთ გაიაროთ ავტორიზაცია ან რეგისტრაცია');
    return;
  }

  if (date.getTime() < Date.now()) {
    alert('წარსულში ვერ დაჯავშნი');
    return;
  }

  try {
    const isAvailable = await firstValueFrom(
      this.appointmentService.checkSlotAvailability(this.doctorId, date, timeSlot)
    );

    if (!isAvailable) {
      alert('This time slot is no longer available');
      return;
    }

    this.selectedDate = date;
    this.selectedTimeSlot = timeSlot;
    this.showBookingModal = true;
    console.log(this.selectedDate,this.selectedTimeSlot);
    
    
  } catch (error) {
    console.error('Error checking slot availability:', error);
    alert('Error checking slot availability');
  }
}
async deleteReservation(event: Event, date: Date, timeSlot: string) {
  event.stopPropagation();
  


  const key = this.getSlotKey(date, timeSlot);
  const appointment = this.appointments.get(key);
  
  if (appointment) {
    try {
      await firstValueFrom(
        this.appointmentService.deleteAppointment(appointment.appointmentId)
      );
      await this.loadInitialData();
    } catch (error) {
      console.error('Error deleting appointment:', error);
      alert('Failed to delete appointment');
    }
  }
}

previousWeek() {
  this.currentDate = new Date(this.currentDate.setDate(this.currentDate.getDate() - 7));
  this.updateWeek();
  this.loadAvailableSlots();
}

nextWeek() {
  this.currentDate = new Date(this.currentDate.setDate(this.currentDate.getDate() + 7));
  this.updateWeek();
  this.loadAvailableSlots();
}
previousMonth() {
 
  const currentDay = this.currentDate.getDate();
  const newDate = new Date(this.currentDate.getFullYear(), this.currentDate.getMonth() - 1, currentDay);
  

  if (newDate.getMonth() !== (this.currentDate.getMonth() - 1 + 12) % 12) {
    newDate.setDate(0); 
  }
  
  this.currentDate = newDate;
  this.updateWeek();
  this.loadAvailableSlots();
}

nextMonth() {
  const currentDay = this.currentDate.getDate();
  const newDate = new Date(this.currentDate.getFullYear(), this.currentDate.getMonth() + 1, currentDay);
  

  if (newDate.getMonth() !== (this.currentDate.getMonth() + 1) % 12) {
    newDate.setDate(0); 
  }
  
  this.currentDate = newDate;
  this.updateWeek();
  this.loadAvailableSlots();
}


isLastWeekOfMonth(): boolean {
  const lastDay = new Date(this.currentDate.getFullYear(), this.currentDate.getMonth() + 1, 0);
  return this.currentDate >= lastDay;
}

isWeekend(date: Date): boolean {
  return date.getDay() === 0 || date.getDay() === 6;
}

isFirstWeekOfMonth(): boolean {
  const firstDay = new Date(this.currentDate.getFullYear(), this.currentDate.getMonth(), 1);
  return this.currentDate <= firstDay;
}

private updateWeek() {
  const startOfWeek = this.getMonday(this.currentDate);
  this.displayedWeek = [];

  for (let i = 0; i < 7; i++) {
    const date = new Date(startOfWeek);
    date.setDate(startOfWeek.getDate() + i);
    this.displayedWeek.push(date);
  }

  this.currentYear = this.currentDate.getFullYear();
  this.currentMonthName = this.currentDate.toLocaleString('default', { month: 'long' });
}

private getMonday(date: Date): Date {
  const day = date.getDay();
  const diff = date.getDate() - day + (day === 0 ? -6 : 1);
  return new Date(date.setDate(diff));
}

closeBookingModal() {
  this.showBookingModal = false;
  this.selectedDate = null;
  this.selectedTimeSlot = null;
}

async onAppointmentBooked() {
  await this.loadInitialData();
  this.closeBookingModal();
}
openEditModal(event: Event, date: Date, timeSlot: string) {
  event.stopPropagation();
  const key = this.getSlotKey(date, timeSlot);
  const appointment = this.appointments.get(key);
  
  if (appointment) {
    this.selectedAppointment = appointment;
    this.showEditModal = true;
  }
}

handleEditSave(event: EditEvent) {
  if (this.selectedAppointment) {
    this.appointmentService.updateAppointmentDescription(
      event.appointmentId,
      event.description
    ).subscribe({
      next: () => {
        this.loadInitialData();
        this.showEditModal = false;
        this.selectedAppointment = null;
      },
      error: (error) => {
        console.error('Error updating appointment:', error);
      }
    });
  }
}

closeEditModal() {
  this.showEditModal = false;
  this.selectedAppointment = null;
}


}

================
File: components/categories/categories.component.css
================
.categories {
  height: 810px;
  width: 350px;
  display: flex;
  flex-direction: column;
  box-shadow: 0px 4px 50px 0px #0533540d;
  border-radius: 10px;
  overflow: hidden;
}
@media(max-width:1600px){
  .categories{
    justify-self: center;
  }
}

.categories-header, .categories-footer {
  padding: 20px 50px;
  background-color: white;
  z-index: 1;
  text-align: center;
}

.categories-content {
  flex-grow: 1;
  padding: 0;
  overflow-y: hidden;
  overflow-x: hidden;
}

.categories-content.expanded {
  overflow-y: auto;
  scrollbar-width: thin;
  scrollbar-color: #18a4e1 #f0f0f0;
}

.categories-content.expanded::-webkit-scrollbar {
  width: 8px;
}

.categories-content.expanded::-webkit-scrollbar-track {
  background: #f0f0f0;
  border-radius: 4px;
}

.categories-content.expanded::-webkit-scrollbar-thumb {
  background-color: #18a4e1;
  border-radius: 4px;
  border: 2px solid #f0f0f0;
}

.categories-content.expanded::-webkit-scrollbar-thumb:hover {
  background-color: #1493c9;
}

.category {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 10px 20px;
  cursor: pointer;
  transition: all 0.2s ease;
  position: relative;
  width: 100%;
}

.category-content {
  display: flex;
 
  gap: 25px;
  flex: 1;
  min-width: 0;
  padding-right: 30px;
}

.category span {
  color: rgb(165, 165, 165);
  font-size: 16px;
  min-width: 45px;
  flex-shrink: 0;
}

.category h4 {
  font-size: 16px;
  font-weight: 400;
  color: #053354;
  margin: 0;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  flex: 1;
}

.arrow-icon {
  flex-shrink: 0;
  width: 24px;
  height: 24px;
  margin-left: 10px;
  opacity: 0;
  transform: translateX(-10px);
  transition: all 0.2s ease;
  position: absolute;
  right: 5px;
}

.category:hover {
  background-color: #f5f5f5;
}

.category:hover .arrow-icon,
.category.selected .arrow-icon {
  opacity: 1;
  transform: translateX(0);
}

.category.selected {
  background-color: #f5f5f5;
}

.category.selected h4 {
  color: #18a4e1;
}

.category.selected span {
  color: #18a4e1;
}

.hidden-categories {
  max-height: 0;
  overflow: hidden;
  transition: max-height 0.3s ease-out;
}

.hidden-categories.expanded {
  max-height: 1000px;
}

h3 {
  font-size: 18px;
  font-weight: 500;
  margin-bottom: 15px;
}

.view-full {
  font-size: 14px;
  font-weight: 400;
  color: #18a4e1;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 5px;
  margin: 15px 0 0 0;
}

.view-full svg {
  transition: transform 0.3s ease;
}

.view-full svg.rotated {
  transform: rotate(180deg);
}

================
File: components/categories/categories.component.html
================
<div class="categories">
    <div class="categories-header">
        <h3>კატეგორიები</h3>
        <svg width="250" height="2" viewBox="0 0 250 2" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M0 1H250" stroke="#ECF2F8"/>
        </svg>
    </div>
    <div class="categories-content" #categoriesContent [class.expanded]="isExpanded">
        <div class="category" 
             *ngFor="let category of visibleCategories"
             [class.selected]="selectedCategory === category.name"
             (click)="onCategoryClick(category.name)">
            <div class="category-content">
                <span>({{ categoryCounts[category.name] || 0 }})</span>
                <h4>{{ category.name }}</h4>
            </div>
            <svg class="arrow-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">
                <path d="M9 18L15 12L9 6" stroke="#18A4E1" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
            </svg>
        </div>
        <div class="hidden-categories" [class.expanded]="isExpanded">
            <div class="category" 
                 *ngFor="let category of hiddenCategories"
                 [class.selected]="selectedCategory === category.name"
                 (click)="onCategoryClick(category.name)">
                <div class="category-content">
                    <span>({{ categoryCounts[category.name] || 0 }})</span>
                    <h4>{{ category.name }}</h4>
                </div>
                <svg class="arrow-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">
                    <path d="M9 18L15 12L9 6" stroke="#18A4E1" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
            </div>
        </div>
    </div>
    <div class="categories-footer">
        <svg class="line" width="250" height="2" viewBox="0 0 250 2" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M0 1H250" stroke="#ECF2F8"/>
        </svg>
        <p class="view-full" (click)="toggleView()">
            {{ isExpanded ? 'დახურვა' : 'ყველას ნახვა' }}
            <svg [class.rotated]="isExpanded" width="14" height="8" viewBox="0 0 14 8" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M13.0667 1.91667L7.46667 7.53334C7.4 7.60001 7.32778 7.64712 7.25 7.67467C7.17222 7.70267 7.08889 7.71667 7 7.71667C6.91111 7.71667 6.82778 7.70267 6.75 7.67467C6.67222 7.64712 6.6 7.60001 6.53333 7.53334L0.916668 1.91667C0.761112 1.76112 0.683334 1.56667 0.683334 1.33334C0.683334 1.10001 0.766668 0.900008 0.933334 0.733342C1.1 0.566675 1.29445 0.483342 1.51667 0.483342C1.73889 0.483342 1.93333 0.566675 2.1 0.733342L7 5.63334L11.9 0.733342C12.0556 0.577786 12.2471 0.500008 12.4747 0.500008C12.7027 0.500008 12.9 0.583342 13.0667 0.750008C13.2333 0.916675 13.3167 1.11112 13.3167 1.33334C13.3167 1.55556 13.2333 1.75001 13.0667 1.91667Z" fill="#18A4E1"/>
            </svg>
        </p>
    </div>
</div>

================
File: components/categories/categories.component.ts
================
import { Component, ElementRef, OnInit, Output, EventEmitter, ViewChild } from '@angular/core';
import { DoctorService } from '../../services/doctor.service';

@Component({
  selector: 'app-categories',
  templateUrl: './categories.component.html',
  styleUrls: ['./categories.component.css']
})
export class CategoriesComponent implements OnInit {
  @Output() categorySelected = new EventEmitter<string|null>();
  @ViewChild('categoriesContent') categoriesContent?: ElementRef;
  
  isExpanded = false;
  selectedCategory: string|null = null;
  categoryCounts: { [key: string]: number } = {}; 
  categories = [
    
    {  name:  'ნევროლოგი' },
    {  name: 'ოფთალმოლოგი' },
    {  name: 'დერმატოლოგი' },
    {  name: 'ორთოპედი' },
    {  name: 'გინეკოლოგი' },
    {  name: 'ენდოკრინოლოგი' },
    {  name: 'უროლოგი' },
    {  name: 'გასტროენტეროლოგი' },
    {  name: 'ოტორინოლარინგოლოგი' },
    {  name: 'პულმონოლოგი' },
    {  name: 'რევმატოლოგი' },
    {  name: 'ონკოლოგი' },
    {  name: 'ნეფროლოგი' },
    {  name: 'ჰემატოლოგი' },
    {  name: 'ალერგოლოგი' },
    {  name: 'იმუნოლოგი' },
    {  name: 'ფსიქიატრი' },
    {  name: 'ნეიროქირურგი' },
  ];

  visibleCategories: any[] | undefined;
  hiddenCategories: any[] | undefined;

  constructor(private doctorService:DoctorService){}

  ngOnInit() {
    this.splitCategories();
    this.visibleCategories?.forEach(category => {
      this.loadCategoryCount(category.name);
    });
  }

  splitCategories() {
    this.visibleCategories = this.categories.slice(0, 16);
    this.hiddenCategories = this.categories.slice(16);
  }

  onCategoryClick(categoryName: string) {
    if (this.selectedCategory === categoryName) {
      this.selectedCategory = null;
      this.categorySelected.emit(null);
    } else {
      this.selectedCategory = categoryName;
      this.categorySelected.emit(categoryName);
    }
  }

  loadCategoryCount(category: string) {
    this.doctorService.getCategoryCount(category).subscribe({
      next: (count) => {
        this.categoryCounts[category] = count;
      },
      error: (error) => {
        console.error(`Error loading count for ${category}:`, error);
        this.categoryCounts[category] = 0; // Default to 0 on error
      }
    });
  }

  getCategoryCount(category: string): number {
    return this.categoryCounts[category] || 0;
  }

  toggleView() {
    this.isExpanded = !this.isExpanded;
    
    if (this.isExpanded && this.hiddenCategories) {
      this.hiddenCategories.forEach(category => {
        if (!(category.name in this.categoryCounts)) {
          this.loadCategoryCount(category.name);
        }
      });
    }
    
    if (!this.isExpanded && this.categoriesContent) {
      setTimeout(() => {
        this.categoriesContent!.nativeElement.scrollTop = 0;
      }, 0);
    }
  }
}

================
File: components/change-password-modal/change-password-modal.component.css
================
.modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    z-index: 1000;
  }
  
  .modal-container {
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 400px;
    background-color: white;
    border-radius: 8px;
    padding: 30px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    z-index: 1001;
    animation: fadeIn 0.3s ease;
  }
  
  .modal-content {
    display: flex;
    flex-direction: column;
  }
  
  h2 {
    color: #18a4e1;
    margin-bottom: 30px;
    font-size: 24px;
    text-align: center;
  }
  
  .form-group {
    margin-bottom: 20px;
    position: relative;
  }
  
  input {
    width: 100%;
    padding: 12px 15px;
    border: 1px solid #18a4e180;
    border-radius: 25px;
    font-size: 16px;
    transition: border-color 0.3s ease;
  }
  
  input:focus {
    outline: none;
    border-color: #18A4E1;
  }
  
  input.invalid {
    border-color: #ff4444;
  }
  
  .error-message {
    color: #ff4444;
    font-size: 12px;
    margin-top: 5px;
    padding-left: 15px;
  }
  
  .alert {
    padding: 12px;
    border-radius: 4px;
    margin-bottom: 20px;
    text-align: center;
    font-size: 14px;
  }
  
  .alert-success {
    background-color: #d4edda;
    color: #155724;
    border: 1px solid #c3e6cb;
  }
  
  .alert-error {
    background-color: #f8d7da;
    color: #721c24;
    border: 1px solid #f5c6cb;
  }
  
  .button-group {
    display: flex;
    gap: 15px;
    margin-top: 20px;
  }
  
  .cancel-button, .submit-button {
    flex: 1;
    padding: 12px;
    border: none;
    border-radius: 25px;
    font-size: 16px;
    cursor: pointer;
    transition: all 0.3s ease;
  }
  
  .cancel-button {
    background-color: #f5f5f5;
    color: #666;
  }
  
  .cancel-button:hover {
    background-color: #e0e0e0;
  }
  
  .submit-button {
    background-color: #053354;
    color: white;
  }
  
  .submit-button:hover:not(:disabled) {
    background-color: #18A4E1;
  }
  
  .submit-button:disabled {
    background-color: #cccccc;
    cursor: not-allowed;
  }
  
  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translate(-50%, -48%);
    }
    to {
      opacity: 1;
      transform: translate(-50%, -50%);
    }
  }
  
  @media (max-width: 480px) {
    .modal-container {
      width: 90%;
      padding: 20px;
    }
  
    h2 {
      font-size: 20px;
      margin-bottom: 20px;
    }
  
    input {
      font-size: 14px;
    }
  
    .button-group button {
      font-size: 14px;
      padding: 10px;
    }
  }

================
File: components/change-password-modal/change-password-modal.component.html
================
<div class="modal-overlay" (click)="onClose()"></div>
<div class="modal-container">
  <h2>პაროლის შეცვლა</h2>
  
  <div *ngIf="showAlert" 
       [class]="'alert ' + (alertType === 'success' ? 'alert-success' : 'alert-error')">
    {{ alertMessage }}
  </div>

  <div class="modal-content">
    <form [formGroup]="changePasswordForm" (ngSubmit)="onSubmit()">
      <div class="form-group">
        <input 
          type="password" 
          formControlName="currentPassword" 
          placeholder="მიმდინარე პაროლი"
          [class.invalid]="changePasswordForm.get('currentPassword')?.invalid && 
                          changePasswordForm.get('currentPassword')?.touched">
        <div class="error-message" 
             *ngIf="changePasswordForm.get('currentPassword')?.invalid && 
                    changePasswordForm.get('currentPassword')?.touched">
          მიმდინარე პაროლის შეყვანა აუცილებელია
        </div>
      </div>

      <div class="form-group">
        <input 
          type="password" 
          formControlName="newPassword" 
          placeholder="ახალი პაროლი"
          [class.invalid]="changePasswordForm.get('newPassword')?.invalid && 
                          changePasswordForm.get('newPassword')?.touched">
        <div class="error-message" 
             *ngIf="changePasswordForm.get('newPassword')?.invalid && 
                    changePasswordForm.get('newPassword')?.touched">
          <span *ngIf="changePasswordForm.get('newPassword')?.errors?.['required']">
            ახალი პაროლის შეყვანა აუცილებელია
          </span>
          <span *ngIf="changePasswordForm.get('newPassword')?.errors?.['minlength']">
            პაროლი უნდა შეიცავდეს მინიმუმ 8 სიმბოლოს
          </span>
        </div>
      </div>

      <div class="form-group">
        <input 
          type="password" 
          formControlName="confirmPassword" 
          placeholder="გაიმეორეთ ახალი პაროლი"
          [class.invalid]="changePasswordForm.get('confirmPassword')?.invalid && 
                          changePasswordForm.get('confirmPassword')?.touched || 
                          changePasswordForm.hasError('mismatch')">
        <div class="error-message" 
             *ngIf="(changePasswordForm.get('confirmPassword')?.touched && 
                    changePasswordForm.hasError('mismatch')) || 
                   (changePasswordForm.get('confirmPassword')?.invalid && 
                    changePasswordForm.get('confirmPassword')?.touched)">
          პაროლები არ ემთხვევა
        </div>
      </div>

      <div class="button-group">
        <button type="button" class="cancel-button" (click)="onClose()">გაუქმება</button>
        <button type="submit" 
                class="submit-button" 
                [disabled]="!changePasswordForm.valid || isSubmitting">
          {{ isSubmitting ? 'მიმდინარეობს...' : 'შეცვლა' }}
        </button>
      </div>
    </form>
  </div>
</div>

================
File: components/change-password-modal/change-password-modal.component.ts
================
import { Component, EventEmitter, Output } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { AuthService } from '../../services/auth.service';

@Component({
  selector: 'app-change-password-modal',
  templateUrl: './change-password-modal.component.html',
  styleUrls: ['./change-password-modal.component.css']
})
export class ChangePasswordModalComponent {
  @Output() close = new EventEmitter<void>();

  changePasswordForm: FormGroup;
  isSubmitting = false;
  alertMessage: string = '';
  alertType: 'success' | 'error' = 'error';
  showAlert = false;

  constructor(
    private fb: FormBuilder,
    private authService: AuthService
  ) {
    this.changePasswordForm = this.fb.group({
      currentPassword: ['', [Validators.required]],
      newPassword: ['', [Validators.required, Validators.minLength(8)]],
      confirmPassword: ['', [Validators.required]]
    }, { validator: this.passwordMatchValidator });
  }

  passwordMatchValidator(g: FormGroup) {
    return g.get('newPassword')?.value === g.get('confirmPassword')?.value
      ? null : { mismatch: true };
  }

  onSubmit(): void {
    if (this.changePasswordForm.valid && !this.isSubmitting) {
      this.isSubmitting = true;
      this.hideAlert();

      const { currentPassword, newPassword, confirmPassword } = this.changePasswordForm.value;

      this.authService.changePassword(currentPassword, newPassword, confirmPassword).subscribe({
        next: (response) => {
          this.showSuccessAlert('პაროლი წარმატებით შეიცვალა');
          this.isSubmitting = false;
          setTimeout(() => {
            this.onClose();
          }, 2000);
        },
        error: (error) => {
          this.showErrorAlert(error.error?.message || 'დაფიქსირდა შეცდომა, სცადეთ თავიდან');
          this.isSubmitting = false;
        }
      });
    }
  }

  showSuccessAlert(message: string): void {
    this.alertMessage = message;
    this.alertType = 'success';
    this.showAlert = true;
  }

  showErrorAlert(message: string): void {
    this.alertMessage = message;
    this.alertType = 'error';
    this.showAlert = true;
  }

  hideAlert(): void {
    this.showAlert = false;
    this.alertMessage = '';
  }

  onClose(): void {
    this.close.emit();
  }
}

================
File: components/doctor-profile-card/doctor-profile-card.component.css
================
.card {
  background-color: #ffffff;
  border-radius: 8px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  overflow: hidden;
  border: 1px solid #e0e0e0;
  width: 1200px;
}

.card-content {
  display: flex;
  justify-content: space-between;
  align-items: stretch;
  padding: 24px;
  gap: 40px;
}

.profile-info-column {
  display: flex;
  align-items: center;
  gap: 40px;
  flex: 1;
}

.doctor-photo {
  width: 157px;
  height: 157px;
  border-radius: 50%;
  object-fit: cover;
  flex-shrink: 0;
}


.info-content {
  display: flex;
  flex-direction: column;
}


.vertical-divider {
  width: 1px;
  background-color: #e0e0e0;
  align-self: stretch;
}


.history-column {
  flex: 1;
  display: flex;
  align-items: center;
  max-width: 50%;
}


.doctor-name {
  font-size: 20px;
  font-weight: bold;
  color: #333;
  margin: 0 0 4px 0;
}


.doctor-specialization {
  font-size: 14px;
  color: #666;
  margin: 0 0 8px 0;
}


.doctor-rating {
  color: #ffd700;
  font-size: 18px;
}


.experience-item {
  margin-bottom: 8px;
  font-size: 14px;
}

.experience-year {
  color: #2196f3;
  font-weight: bold;
}

.experience-description {
  color: #333;
}

@media (max-width: 1750px) {
  .card {
    width: 100%;

  }

  .card-content {
    padding: 24px;
    gap: 40px;
  }

  .profile-info-column {
    gap: 40px;
  }

  .doctor-photo {
    width: 157px;
    height: 157px;
  }

  .doctor-name {
    font-size: 20px;
    margin: 0 0 4px 0;
  }

  .doctor-specialization {
    font-size: 14px;
    margin: 0 0 8px 0;
  }

  .doctor-rating {
    font-size: 18px;
  }

  .experience-item {
    margin-bottom: 8px;
    font-size: 14px;
  }
}
@media (max-width: 1250px) {.cont{
    padding: 20px;
  }
  .card {
    width: 95%;
    margin: 0 auto;
  }
}

@media (max-width: 768px) {
  
  .card-content {
    flex-direction: column;
    align-items: center;
    padding: 20px;
    gap: 24px;
  }

  .profile-info-column {
    flex-direction: column;
    text-align: center;
    gap: 20px;
  }

  .doctor-photo {
    width: 120px;
    height: 120px;
  }

  .info-content {
    align-items: center;
  }

  .vertical-divider {
    width: 100%;
    height: 1px;
    margin: 8px 0;
  }

  .history-column {
    max-width: 100%;
    width: 100%;
  }

  .history-content {
    width: 100%;
  }

  .experience-item {
    text-align: center;
  }
}

@media (max-width: 480px) {
  .card {
    width: 92%;
  }

  .card-content {
    padding: 16px;
    gap: 20px;
  }

  .doctor-photo {
    width: 100px;
    height: 100px;
  }

  .doctor-name {
    font-size: 18px;
  }

  .doctor-specialization {
    font-size: 13px;
  }

  .experience-item {
    display: flex;
    flex-direction: column;
    gap: 4px;
    font-size: 13px;
  }
}

================
File: components/doctor-profile-card/doctor-profile-card.component.html
================
<div class="cont">
<div class="card" *ngIf="doctor">
  <div class="card-content">
    <div class="profile-info-column">
      <img [src]="photoUrl" [alt]="doctor.firstName + ' ' + doctor.lastName" class="doctor-photo">
      <div class="info-content">
        <h2 class="doctor-name">{{ doctor.firstName }} {{ doctor.lastName }}</h2>
        <p class="doctor-specialization">{{ doctor.specialty }}</p>
        <div class="doctor-rating">
          <ng-container *ngFor="let filled of getStarsArray(doctor.rating)">
            <svg xmlns="http://www.w3.org/2000/svg" 
                 width="17" 
                 height="17" 
                 [attr.fill]="filled ? '#FFD233' : '#ECF2F8'"
                 viewBox="0 0 256 256">
                <path d="M234.5,114.38l-45.1,39.36,13.51,58.6a16,16,0,0,1-23.84,17.34l-51.11-31-51,31a16,16,0,0,1-23.84-17.34L66.61,153.8,21.5,114.38a16,16,0,0,1,9.11-28.06l59.46-5.15,23.21-55.36a15.95,15.95,0,0,1,29.44,0h0L166,81.17l59.44,5.15a16,16,0,0,1,9.11,28.06Z"></path>
            </svg>
        </ng-container>
        </div>
      </div>
    </div>
    <div class="vertical-divider"></div>
    <div class="history-column">
      <div class="history-content">
        <div class="experience-section">
          <ng-container *ngIf="isLoadingCv">
            <div class="loading-spinner">
              Loading experience details...
            </div>
          </ng-container>
        
          <ng-container *ngIf="!isLoadingCv && cvError">
            <div class="error-message">
              {{ cvError }}
            </div>
          </ng-container>
        
          <ng-container *ngIf="!isLoadingCv && !cvError">
            <div *ngFor="let exp of experiences" class="experience-item">
              <span class="experience-year">{{ exp.year }}</span>
              <span class="experience-description">, {{ exp.description }}</span>
            </div>
            
            <div *ngIf="experiences.length === 0" class="no-experience">
              No experience details available
            </div>
          </ng-container>
        </div>
      </div>
    </div>
  </div>
</div>

<div class="loading-state" *ngIf="!doctor">
  Loading doctor information...
</div></div>

================
File: components/doctor-profile-card/doctor-profile-card.component.ts
================
import { Component, Input, OnInit, OnDestroy } from '@angular/core';
import { DoctorService } from '../../services/doctor.service';
import { ActivatedRoute } from '@angular/router';
import { Subscription } from 'rxjs';
import { finalize } from 'rxjs/operators';

interface Experience {
  year: string;
  description: string;
}

@Component({
  selector: 'app-doctor-profile-card',
  templateUrl: './doctor-profile-card.component.html',
  styleUrls: ['./doctor-profile-card.component.css']
})
export class DoctorProfileCardComponent implements OnInit, OnDestroy {
  @Input() doctorId: number = 0;
  private routeSub: Subscription | null = null;
  private photoSubscription: Subscription | null = null;
  private cvSubscription: Subscription | null = null;


  doctor: any = null;
  photoUrl: string = 'assets/png-clipart-anonymous-person-login-google-account-computer-icons-user-activity-miscellaneous-computer.png';
  isLoadingPhoto: boolean = false;
  photoError: boolean = false;
  experiences: Experience[] = [];
  isLoadingCv: boolean = false;
  cvError: string | null = null;

  // experiences: any[] = [
  //   { year: '2017', description: 'დღემდე, ჩვენი კლინიკის გენერალური დირექტორი' },
  //   { year: '2002', description: 'დღემდე, ჩვენი კომპიუტერული ტომოგრაფიის განყოფილების ხელმძღვანელი' },
  //   { year: '1995', description: 'დღემდე, კარდიოლოგი / არითმოლოგი' }
  // ];

  constructor(
    private doctorService: DoctorService,
    private route: ActivatedRoute
  ) {}

  ngOnInit() {
    this.routeSub = this.route.params.subscribe(params => {
      const id = +params['id'];
      if (id && id !== this.doctorId) {
        this.doctorId = id;
        this.loadDoctorDetails();
      }
    });

    if (this.doctorId) {
      this.loadDoctorDetails();
    }
  }

  loadDoctorDetails() {
    this.doctorService.getDoctorById(this.doctorId).subscribe({
      next: (data) => {
        this.doctor = data;
        this.loadDoctorPhoto();
        this.loadCvExperience();
      },
      error: (error) => {
        console.error('Error loading doctor details:', error);
      }
    });
  }

  loadDoctorPhoto() {
    if (this.photoSubscription) {
      this.photoSubscription.unsubscribe();
    }

    this.isLoadingPhoto = true;
    this.photoError = false;

    this.photoSubscription = this.doctorService.getDoctorPhoto(this.doctorId)
      .pipe(
        finalize(() => {
          this.isLoadingPhoto = false;
        })
      )
      .subscribe({
        next: (url) => {
          this.photoUrl = url;
        },
        error: (error) => {
          console.error('Error loading doctor photo:', error);
          this.photoError = true;
         
        }
      });
  }
  private parseExperienceFromCv(cvText: string) {
    const experiences: Experience[] = [];
    
    const lines = cvText.split('\n')
      .map(line => line.trim())
      .filter(line => line.length > 0);
  
    // Match three formats: YYYY - დღემდე, YYYY - YYYY, or YYYY–YYYY (with em dash)
    const experiencePattern = /(\d{4})\s*[-–]\s*(დღემდე|\d{4}),\s*(.+?)(?=\s*\d{4}\s*[-–]|$)/g;
  
    for (const line of lines) {
      let match;
      while ((match = experiencePattern.exec(line)) !== null) {
        const [_, startYear, endYear, description] = match;
        experiences.push({
          year: `${startYear} - ${endYear}`,
          description: description.trim()
        });
      }
    }
  
    this.experiences = experiences.sort((a, b) => {
      const yearA = parseInt(a.year.split('-')[0]);
      const yearB = parseInt(b.year.split('-')[0]);
      return yearB - yearA;
    });
  
    if (experiences.length === 0) {
      this.cvError = 'No experience entries found in CV';
    }
  }

  loadCvExperience() {
    this.isLoadingCv = true;
    this.cvError = null;
    this.experiences = [];

    this.cvSubscription = this.doctorService.extractCvText(this.doctorId)
      .pipe(
        finalize(() => {
          this.isLoadingCv = false;
        })
      )
      .subscribe({
        next: (cvText) => {
          try {
            this.parseExperienceFromCv(cvText);
          } catch (error) {
            console.error('Error parsing CV text:', error);
            this.cvError = 'Error parsing experience details';
            this.experiences = [];
          }
        },
        error: (error) => {
          console.error('Error loading CV:', error);
          this.cvError = 'Failed to load experience details';
          this.experiences = [];
        }
      });
  }

  getStarsArray(rating: number): number[] {
    return Array(5).fill(0).map((_, i) => i < rating ? 1 : 0);
  }

  ngOnDestroy() {
    if (this.routeSub) {
      this.routeSub.unsubscribe();
    }
    if (this.photoSubscription) {
      this.photoSubscription.unsubscribe();
    }
    if (this.cvSubscription) {
      this.cvSubscription.unsubscribe();
    }
  }
}

================
File: components/footer/footer.component.css
================
* {
  font-family: 'FiraGO', sans-serif;
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}


.info {
  height: fit-content;
  padding: 30px 120px;
  background-color: #053354;
  display: flex;
  gap: 150px;
}

.details {
  display: flex;
  flex-direction: column;
  width: 100%;
}


.hospital {
  display: flex;
  align-items: center;
  margin-top: 20px;
  align-self: flex-start;
}

.hospital img {
  width: 90px;
  height: 66px;
  object-fit: cover;
}

.hospital h2 {
  font-size: 22px;
  font-weight: 500;
  color: #fff;
  margin-left: -25px;
}


.headers {
  display: flex;
  justify-content: space-between;
  border-bottom: 1px solid #ecf2f84d;
  padding-bottom: 20px;
}

.headers h2 {
  font-size: 16px;
  font-weight: 500;
  color: white;
  width: 160px;
}


.informations {
  display: flex;
  justify-content: space-between;
  padding-top: 20px;
}

.informations div h3 {
  line-height: 1.2;
  width: 160px;
  font-size: 16px;
  font-weight: 400;
  color: #fff;
  padding: 5px 0;
  cursor: pointer;
}


.copyright {
  padding: 15px 120px;
  color: #053354;
}


@media (max-width: 1200px) {
  .info {
    padding: 30px 60px;
    gap: 50px;
  }
}

@media (max-width: 920px) {
  .info {
    padding: 30px 20px;
    flex-direction: column;
    gap: 30px;
  }

  .hospital {
    align-self: center;
  }

  .headers, .informations {
    flex-direction: column;
    gap: 20px;
  }

  .headers h2, .informations div h3 {
    width: 100%;
    text-align: center;
  }

  .copyright {
    padding: 15px 20px;
    text-align: center;
  }
}

@media (max-width: 480px) {
  .hospital img {
    width: 70px;
    height: 52px;
  }

  .hospital h2 {
    font-size: 18px;
  }
}

================
File: components/footer/footer.component.html
================
<footer>
    <div class="info">
        <div class="hospital">
            <img src="assets/logo 2.png" alt="">
            <h2>კლინიკა</h2>
        </div>
        <div class="details">
            <div class="headers">
                <h2>ინფორმაცია</h2>
                <h2>პაციენტებისთვის</h2>
                <h2>კონტაქტი</h2>
                <h2>გამოგვყევით</h2>
            </div>
            <div class="informations">
                <div class="content1">
                    <h3>ჩვენს შესახებ</h3>
                    <h3>პარტნიორები</h3>
                    <h3>ექიმებისთვის</h3>
                    <h3>კლინიკებისთვის</h3>
                    <h3>აფთიაქებისთვის</h3>
                </div>
                <div class="content2">
                    <h3>ექიმები</h3>
                    <h3>კლინიკები</h3>
                    <h3>ანოტაციები</h3>
                    <h3>ბლოგი</h3>
                    <h3>მედია</h3>
                </div>
                <div class="content3">
                    <h3>სამუშაო დღეები : ორშ - პარ</h3>
                    <h3>სამუშაო დრო : 09:00-17:00</h3>
                    <h3>იაკობ ნიკოლაძე №10</h3>
                    <h3>032 2 100 100</h3>
                </div>
                <div class="content4">
                    <h3>Facebook</h3>
                    <h3>Instagram</h3>
                    <h3>Youtube</h3>
                </div>
            </div>
        </div>
    </div>
    <p class="copyright">copyright</p>
</footer>

================
File: components/footer/footer.component.ts
================
import { Component } from '@angular/core';

@Component({
  selector: 'app-footer',
  templateUrl: './footer.component.html',
  styleUrl: './footer.component.css'
})
export class FooterComponent {

}

================
File: components/header/header.component.css
================
header {
  padding: 20px 120px;
  align-items: center;
  width: 100%;
  box-sizing: border-box;
}


.navigations {
  display: flex;
  align-items: center;
  justify-content: space-between;
  flex-wrap: wrap;
  width: 100%;
  gap: 15px;
}

.logo {
  display: flex;
  align-items: center;
  color: #ff2c52;
  cursor: pointer;
  flex-shrink: 0;
  min-width: 120px;
}

.logo h2 {
  margin-left: -25px;
  font-family: 'FiraGO', sans-serif;
  font-size: 22px;
  font-weight: 500;
  white-space: nowrap;
}

.logo img {
  width: 90px;
  height: 66px;
  object-fit: cover;
}


nav {
  display: flex;
  width: fit-content;
  gap: 10px;
  justify-content: center;
  border-bottom: 1px solid #ecf2f8;
  margin: 0 70px;
  
  overflow-x: auto;
  scrollbar-width: none;
  -ms-overflow-style: none;
}

nav::-webkit-scrollbar {
  display: none;
}

nav a {
  text-decoration: none;
  color: #053354;
  padding: 20px 5px;
  font-size: 18px;
  white-space: nowrap;
}

.active {
  border-bottom: 1px solid #18A4E1;
}


.auth, .language {
  padding: 10px 15px;
  border-radius: 25px;
  background-color: #f0faff;
}

.login {
  color: #18a4e1;
  cursor: pointer;
}

.register {
  color: #053354;
  text-decoration: none;
  cursor: pointer;
}


.user-profile-container {
  display: flex;
  align-items: center;
  gap: 12px;
  padding: 8px 16px;
  background-color: #f0faff;
  border-radius: 25px;
  min-width: 150px;
  max-width: 250px;
}

.avatar-circle {
  width: 32px;
  height: 32px;
  border-radius: 50%;
  background-color: #333;
  cursor: pointer;
  flex-shrink: 0;
}

.doc-photo{
  width: 32px;
  height: 32px;
  border-radius: 50%;
  cursor: pointer;
  flex-shrink: 0;
}

.user-info {
  display: flex;
  flex-direction: column;
  gap: 4px;
  min-width: 0;
}

.user-name {
  color: #053354;
  font-size: 14px;
  font-weight: 500;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.user-role {
  font-size: 12px;
  color: #666;
  display: block;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.logout-btn {
  background: none;
  border: none;
  color: #18a4e1;
  font-size: 12px;
  cursor: pointer;
  padding: 0;
  text-align: center;
}

.logout-btn:hover {
  text-decoration: none;
}


.user-profile-container[data-role="ADMIN"] .avatar-circle {
  border: 2px solid #ff4081; 
}

.user-profile-container[data-role="DOCTOR"] .doc-photo {
  border: 2px solid #2196f3; 
}

.user-profile-container[data-role="PATIENT"] .avatar-circle {
  border: 2px solid #4caf50; 
}


.contact {
  padding: 40px 120px;
  background-color: #ecf2f8;
  display: flex;
  align-items: center;
  justify-content: space-between;
  flex-wrap: wrap;
  gap: 20px;
}

.info {
  display: flex;
  gap: 35px;
  flex-wrap: wrap;
}

.phone, .location {
  width: 40px;
  height: 40px;
  padding: 5px;
  background-color: white;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
}

.number, .location_info {
  display: flex;
  gap: 20px;
  align-items: center;
}


.inputs {
  display: flex;
  align-items: center;
  gap: 30px;
  flex-wrap: wrap;
}

input {
  width: 480px;
  border-radius: 50px;
  border: 1px solid #18a4e180;
  padding: 15px 25px;
  max-width: 100%;
}


.search {
  border-radius: 50%;
  background-color: #053354;
  width: 50px;
  height: 50px;
  display: flex;
  align-items: center;
  justify-content: center;
  flex-shrink: 0;
}


.mobile-menu-toggle {
  display: none;
  flex-direction: column;
  justify-content: space-between;
  width: 30px;
  height: 21px;
  background: none;
  border: none;
  cursor: pointer;
  padding: 0;
  z-index: 100;
}

.mobile-menu-toggle span {
  width: 100%;
  height: 3px;
  background-color: #053354;
  transition: all 0.3s ease;
  border-radius: 3px;
}


@media (max-width: 1600px) {
  header, .contact {
    padding: 20px 60px;
  }
  
  nav {
    margin: 0 40px;
  }
  
  input {
    width: 380px;
  }

  .logo h2 {
    font-size: 20px;
  }

  .logo img {
    width: 80px;
    height: 58px;
  }
}



@media (max-width: 1350px) {
  input {
    width: 300px;
  }
  
  .contact {
    flex-direction: column;
    align-items: stretch;
  }
  
  .info {
    justify-content: center;
  }
}

@media (max-width: 1500px) {
  .mobile-menu-toggle {
    display: flex;
    order: 1;
  }

  .mobile-menu-toggle.active span:nth-child(1) {
    transform: translateY(9px) rotate(45deg);
  }
  .mobile-menu-toggle.active span:nth-child(2) {
    opacity: 0;
  }
  .mobile-menu-toggle.active span:nth-child(3) {
    transform: translateY(-9px) rotate(-45deg);
  }

  .logo {
    order: 0;
  }

  nav {
    display: none;
    width: 100%;
    order: 3;
    margin: 20px 0;
    flex-direction: column;
    align-items: center;
    text-align: center;
    padding: 20px 0;
    background-color: white;
    border-bottom: none;
  }

  nav.mobile-menu-open {
    display: flex;
  }

  nav a {
    width: 100%;
    padding: 15px 5px;
    border-bottom: 1px solid #ecf2f8;
  }

  nav a:last-child {
    border-bottom: none;
  }

  .auth {
    order: 1;
  }
  .language {
    order: 2;
  }
  .inputs {
    flex-direction: column;
    width: 100%;
  }
  input {
    width: 100%;
  }
  .search {
    align-self: flex-end;
  }

  .user-profile-container {
    order: 1;
    min-width: auto;
  }
}

@media (max-width: 768px) {
  header {
    padding: 15px;
  }

  .logo h2 {
    font-size: 18px;
    margin-left: -15px;
  }

  .logo img {
    width: 60px;
    height: 44px;
  }

  .user-profile-container {
    padding: 6px 10px;
  }

  .language {
    display: none;
  }

  .user-name {
    font-size: 13px;
  }

  .user-role {
    font-size: 11px;
  }

  .avatar-circle {
    width: 28px;
    height: 28px;
  }

  nav a {
    font-size: 16px;
    padding: 12px 5px;
  }
}

@media (max-width: 480px) {
  .auth, .language {
    width: 100%;
    text-align: center;
    box-sizing: border-box;
  }

  .logo h2 {
    font-size: 16px;
    margin-left: -10px;
  }

  .logo img {
    width: 50px;
    height: 37px;
  }

  .user-profile-container {
    padding: 5px 8px;
  }

  .user-info {
    gap: 2px;
  }

  .user-name {
    font-size: 12px;
  }

  .user-role {
    font-size: 10px;
  }

  .logout-btn {
    font-size: 11px;
  }

  .avatar-circle {
    width: 24px;
    height: 24px;
  }
}

================
File: components/header/header.component.html
================
<header>
  <div class="navigations">
    <div class="logo" routerLink="/main">
      <img src="assets/logo 1.png" alt="" routerLink="/main">
      <h2>კლინიკა</h2>
    </div>

    <button class="mobile-menu-toggle" [class.active]="isMobileMenuOpen" (click)="toggleMobileMenu()">
      <span></span>
      <span></span>
      <span></span>
    </button>

    <nav [class.mobile-menu-open]="isMobileMenuOpen">
      <a routerLink="/main" class="active">ექიმები</a>
      <a routerLink="#">კლინიკები</a>
      <a routerLink="#">ანოტაციები</a>
      <a routerLink="#">აქციები</a>
      <a routerLink="#">სერვისები</a>
      <a routerLink="#">მედიკამენტები</a>
      <a routerLink="#">კონტაქტი</a>

    </nav>
    <ng-container *ngIf="!(isAuthenticated$|async); else userProfile">


      <div class="auth">
        <p><span class="login" (click)="openLoginModal()">ავტორიზაცია</span> / <a class="register"
            routerLink="/register">რეგისტრაცია</a></p>
      </div>
    </ng-container>
    <ng-template #userProfile>
      <div class="user-profile-container" *ngIf="currentUser$ | async as user" [attr.data-role]="user.role">
        <div class="user-avatar">
          <div class="avatar-circle" [routerLink]="getProfileRoute(user.role)" *ngIf="user.role!=='DOCTOR'"></div>
          <img [src]="getDoctorPhoto(user.doctorId)" alt="" class="doc-photo" *ngIf="user.role==='DOCTOR'" [routerLink]="getProfileRoute(user.role)">
        </div>
        <div class="user-info">
          <span class="user-name">{{user.firstName}} {{user.lastName}}</span>
          <ng-container [ngSwitch]="user.role">
            <span class="user-role" *ngSwitchCase="'ADMIN'">ადმინისტრატორი</span>
          </ng-container>
          <button class="logout-btn" (click)="logout()">გასვლა</button>
        </div>
      </div>
    </ng-template>
    <select name="" id="" class="language">
      <option value="ge">GEO</option>
      <option value="en">ENG</option>
    </select>
  </div>
</header>

<div class="contact">
  <div class="info">
    <div class="number">
      <div class="phone">
        <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" fill="#18A4E1" viewBox="0 0 256 256">
          <path
            d="M222.37,158.46l-47.11-21.11-.13-.06a16,16,0,0,0-15.17,1.4,8.12,8.12,0,0,0-.75.56L134.87,160c-15.42-7.49-31.34-23.29-38.83-38.51l20.78-24.71c.2-.25.39-.5.57-.77a16,16,0,0,0,1.32-15.06l0-.12L97.54,33.64a16,16,0,0,0-16.62-9.52A56.26,56.26,0,0,0,32,80c0,79.4,64.6,144,144,144a56.26,56.26,0,0,0,55.88-48.92A16,16,0,0,0,222.37,158.46ZM176,208A128.14,128.14,0,0,1,48,80,40.2,40.2,0,0,1,82.87,40a.61.61,0,0,0,0,.12l21,47L83.2,111.86a6.13,6.13,0,0,0-.57.77,16,16,0,0,0-1,15.7c9.06,18.53,27.73,37.06,46.46,46.11a16,16,0,0,0,15.75-1.14,8.44,8.44,0,0,0,.74-.56L168.89,152l47,21.05h0s.08,0,.11,0A40.21,40.21,0,0,1,176,208Z">
          </path>
        </svg>
      </div>
      <p>032 2 100 100</p>
    </div>
    <div class="address">
      <div class="location_info">
        <div class="location">
          <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" fill="#18A4E1" viewBox="0 0 256 256">
            <path
              d="M128,64a40,40,0,1,0,40,40A40,40,0,0,0,128,64Zm0,64a24,24,0,1,1,24-24A24,24,0,0,1,128,128Zm0-112a88.1,88.1,0,0,0-88,88c0,31.4,14.51,64.68,42,96.25a254.19,254.19,0,0,0,41.45,38.3,8,8,0,0,0,9.18,0A254.19,254.19,0,0,0,174,200.25c27.45-31.57,42-64.85,42-96.25A88.1,88.1,0,0,0,128,16Zm0,206c-16.53-13-72-60.75-72-118a72,72,0,0,1,144,0C200,161.23,144.53,209,128,222Z">
            </path>
          </svg>
        </div>
        <p>იაკობ ნიკოლაძე №10</p>
      </div>
    </div>
  </div>
  
 <app-search-dropdown></app-search-dropdown>
</div>

<app-login-pop-up *ngIf="showLoginModal" (close)="closeLoginModal()"></app-login-pop-up>

================
File: components/header/header.component.ts
================
import { Component, OnInit } from '@angular/core';
import { LoginPopUpComponent } from '../login-pop-up/login-pop-up.component';
import { MatDialog } from '@angular/material/dialog';
import { AuthService } from '../../services/auth.service';
import { finalize, Observable, Subscription } from 'rxjs';
import { DoctorService } from '../../services/doctor.service';

@Component({
  selector: 'app-header',
  templateUrl: './header.component.html',
  styleUrl: './header.component.css'
})
export class HeaderComponent implements OnInit {
  isMobileMenuOpen = false;
  showLoginModal = false;
  isAuthenticated$! : Observable<boolean>;
  currentUser$! : Observable<any>;
  private photoSubscriptions = new Map<number, Subscription>();
  doctorPhotos = new Map<number, string>();
  loadingPhotos = new Set<number>();

  constructor(private authService: AuthService, private doctorService:DoctorService) {}

  ngOnInit() {
    this.isAuthenticated$ = this.authService.isAuthenticated();
    this.currentUser$ = this.authService.getCurrentUser();

    
    }
    loadDoctorPhoto(doctorId: number): void {
      if (this.photoSubscriptions.has(doctorId)) {
        return; // Already loading or loaded
      }
  
      this.loadingPhotos.add(doctorId);
      
      const subscription = this.doctorService.getDoctorPhoto(doctorId)
        .pipe(
          finalize(() => this.loadingPhotos.delete(doctorId))
        )
        .subscribe({
          next: (photoUrl) => {
            this.doctorPhotos.set(doctorId, photoUrl);
          },
          error: () => {
            // Set default image on error
            this.doctorPhotos.set(doctorId, '/assets/default-doctor.png');
          }
        });
  
      this.photoSubscriptions.set(doctorId, subscription);
    }
  
    getDoctorPhoto(doctorId: number): string {
      if (!this.doctorPhotos.has(doctorId)) {
        this.loadDoctorPhoto(doctorId);
        return 'assets/png-clipart-anonymous-person-login-google-account-computer-icons-user-activity-miscellaneous-computer.png'; // Show placeholder while loading
      }
      return this.doctorPhotos.get(doctorId) || '/assets/default-doctor.png';
    }
  

  getProfileRoute(role:string):string{
    switch(role){
      case 'ADMIN':
        return '/admin/profile';
      case 'PATIENT':
        return  '/patient/profile';
      case 'DOCTOR':
        return '/doctor/profile';
        default:
          return '/user-prof';
    }
  }

  toggleMobileMenu() {
    this.isMobileMenuOpen = !this.isMobileMenuOpen;
  }

  openLoginModal() {
    this.showLoginModal = true;
  }

  closeLoginModal() {
    this.showLoginModal = false;
  }

  logout() {
    this.authService.logout();
  }
}

================
File: components/login-pop-up/login-pop-up.component.css
================
.modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.5);
  z-index: 1000;
}

.modal-container {
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 600px;
  height: fit-content;
  background-color: white;
  border-radius: 8px;
  padding: 30px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  z-index: 1001;
  display: flex;
  flex-direction: column;
}

.modal-content {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  flex: 1;
}
h2 {
  color: #18a4e1;
  margin-bottom: 30px;
  font-size: 24px;
  text-align: center;
}
form {
  width: 100%;
  max-width: 400px;
  display: flex;
  flex-direction: column;
  gap: 20px;
}
input {
  width: 100%;
  padding: 12px;
  border: 1px solid #ccc;
  border-radius: 50px;

  font-size: 16px;
}
button {
  align-self: flex-start;
  border: none;
  background-color: #053354;
  border-radius: 50px;
  padding: 12px 35px;
  color: white;
  font-size: 16px;
  cursor: pointer;
  transition: background-color 0.3s;
}
button:hover {
  background-color: #18a4e1;
}
.forgot-password {
  align-self: flex-end;
  color: #053354;
  font-size: 14px;
  cursor: pointer;
  margin: 10px 0;
}

.confirmation {
  color: #18a4e1;
  font-size: 14px;
}
.close-button {
  margin-top: 20px;
}
.alert {
  padding: 12px;
  border-radius: 4px;
  margin-bottom: 20px;
  text-align: center;
  font-size: 14px;
}

.alert-success {
  background-color: #d4edda;
  color: #155724;
  border: 1px solid #c3e6cb;
}

.alert-error {
  background-color: #f8d7da;
  color: #721c24;
  border: 1px solid #f5c6cb;
}

.form-group {
  margin-bottom: 15px;
}

.error-message {
  color: #dc3545;
  font-size: 12px;
  margin-top: 5px;
}

input.invalid {
  border-color: #dc3545;
}

.submit-button {
  background-color: #053354;
  color: white;
  border: none;
  padding: 10px 20px;
  border-radius: 25px;
  cursor: pointer;
  width: 180px;
  margin-top: 15px;
}

.submit-button:disabled {
  background-color: #cccccc;
  cursor: not-allowed;
}

.close-button {
  margin-top: 15px;
  padding: 8px 16px;
  border: none;
  background-color: #f8f9fa;
  border-radius: 4px;
  cursor: pointer;
}

.close-button:hover {
  background-color: #e2e6ea;
}


.back-to-login {
  color: #18A4E1;
  font-size: 14px;
  cursor: pointer;
  margin: 15px 0;
  display: flex;
  align-items: center;
  transition: color 0.3s ease;
}

.back-to-login:hover {
  color: #053354;
}

.forgot-password,
.back-to-login {
  align-self: flex-end;
  color: #053354;
  font-size: 14px;
  cursor: pointer;
  margin: 10px 0;
  transition: color 0.3s ease;
}

.forgot-password:hover,
.back-to-login:hover {
  color: #18A4E1;
}

.alert {
  width: 100%;
  padding: 12px;
  border-radius: 4px;
  margin-bottom: 20px;
  text-align: center;
  font-size: 14px;
}

.alert-success {
  background-color: #d4edda;
  color: #155724;
  border: 1px solid #c3e6cb;
}

.alert-error {
  background-color: #f8d7da;
  color: #721c24;
  border: 1px solid #f5c6cb;
}

.form-group {
  position: relative;
  margin-bottom: 15px;
}

.error-message {
  position: absolute;
  color: #dc3545;
  font-size: 12px;
  margin-top: 5px;
  left: 15px;
}

input.invalid {
  border-color: #dc3545;
}

form {
  animation: fadeIn 0.3s ease;
}

@keyframes fadeIn {
  from {
    opacity: 0;
    transform: translateY(-10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

================
File: components/login-pop-up/login-pop-up.component.html
================
<div class="modal-overlay" (click)="onClose()"></div>
<div class="modal-container">
  <h2>{{ showForgotPassword ? 'პაროლის აღდგენა' : 'ავტორიზაცია' }}</h2>
  
  <div *ngIf="showAlert" 
       [class]="'alert ' + (alertType === 'success' ? 'alert-success' : 'alert-error')">
    {{ alertMessage }}
  </div>

  <div class="modal-content">
    <form *ngIf="!showForgotPassword" (ngSubmit)="onLogin()" [formGroup]="loginForm">
      <div class="form-group">
        <input formControlName="email" 
               placeholder='ელ.ფოსტა' 
               type="email" 
               [class.invalid]="loginForm.get('email')?.invalid && loginForm.get('email')?.touched">
        <div class="error-message" *ngIf="loginForm.get('email')?.invalid && loginForm.get('email')?.touched">
          <span *ngIf="loginForm.get('email')?.errors?.['required']">ელ-ფოსტის ველის შევსება აუცილებელია</span>
          <span *ngIf="loginForm.get('email')?.errors?.['email']">გთხოვთ შეიყვანეთ ვალიდური ელ-ფოსტა</span>
        </div>
      </div>

      <div class="form-group">
        <input formControlName="password" 
               placeholder='პაროლი' 
               type="password"
               [class.invalid]="loginForm.get('password')?.invalid && loginForm.get('password')?.touched">
        <div class="error-message" *ngIf="loginForm.get('password')?.invalid && loginForm.get('password')?.touched">
          პაროლის ველის შევსება აუცილებელია
        </div>
      </div>

      <p class="forgot-password" (click)="toggleForgotPassword()">პაროლის აღდგენა</p>
      
      <button type="submit" [disabled]="!loginForm.valid || isSubmitting" class="submit-button">
        {{ isSubmitting ? 'მიმდინარეობს...' : 'ავტორიზაცია' }}
      </button>
    </form>

    <form *ngIf="showForgotPassword" (ngSubmit)="onForgotPassword()" [formGroup]="forgotPasswordForm">
      <div class="form-group">
        <input formControlName="email" 
               placeholder='ელ.ფოსტა' 
               type="email" 
               [class.invalid]="forgotPasswordForm.get('email')?.invalid && forgotPasswordForm.get('email')?.touched">
        <div class="error-message" *ngIf="forgotPasswordForm.get('email')?.invalid && forgotPasswordForm.get('email')?.touched">
          <span *ngIf="forgotPasswordForm.get('email')?.errors?.['required']">ელ-ფოსტის ველის შევსება აუცილებელია</span>
          <span *ngIf="forgotPasswordForm.get('email')?.errors?.['email']">გთხოვთ შეიყვანეთ ვალიდური ელ-ფოსტა</span>
        </div>
      </div>

      <p class="back-to-login" (click)="toggleForgotPassword()">↩ უკან დაბრუნება</p>

      <button type="submit" [disabled]="!forgotPasswordForm.valid || isSubmitting" class="submit-button">
        {{ isSubmitting ? 'მიმდინარეობს...' : 'გაგზავნა' }}
      </button>
    </form>
  </div>
</div>

================
File: components/login-pop-up/login-pop-up.component.ts
================
import { Component, EventEmitter, Output } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { AuthService } from '../../services/auth.service';
import { Router } from '@angular/router';

@Component({
  selector: 'app-login-pop-up',
  templateUrl: './login-pop-up.component.html',
  styleUrls: ['./login-pop-up.component.css']
})
export class LoginPopUpComponent {
  @Output() close = new EventEmitter<void>();
  loginForm: FormGroup;
  forgotPasswordForm: FormGroup;
  isSubmitting = false;
  showForgotPassword = false;
  alertMessage: string = '';
  alertType: 'success' | 'error' = 'error';
  showAlert = false;

  constructor(
    private router: Router,
    private authService: AuthService,
    private fb: FormBuilder
  ) {
    this.loginForm = this.fb.group({
      email: ['', [Validators.required, Validators.email]],
      password: ['', Validators.required]
    });

    this.forgotPasswordForm = this.fb.group({
      email: ['', [Validators.required, Validators.email]]
    });
  }

  onLogin(): void {
    if (this.loginForm.valid) {
      this.isSubmitting = true;
      this.hideAlert();

      const loginData = {
        email: this.loginForm.get('email')?.value,
        password: this.loginForm.get('password')?.value
      };

      this.authService.authenticate(loginData).subscribe({
        next: (response) => {
          this.showSuccessAlert('Login successful!');
          this.router.navigate(['/main']);
          this.close.emit();
        },
        error: (error) => {
          this.showErrorAlert(error.message);
          this.isSubmitting = false;
        }
      });
    } else {
      this.showErrorAlert('Please fill in all required fields correctly');
    }
  }

  onForgotPassword(): void {
    if (this.forgotPasswordForm.valid && !this.isSubmitting) {
      this.isSubmitting = true;
      this.hideAlert();

      const email = this.forgotPasswordForm.get('email')?.value;
      
      this.authService.requestPasswordReset(email).subscribe({
        next: (response) => {
          this.showSuccessAlert('პაროლის აღდგენის ინსტრუქცია გამოგზავნილია თქვენს ელ-ფოსტაზე');
          this.isSubmitting = false;
          setTimeout(() => {
            this.toggleForgotPassword(); 
          }, 3000);
        },
        error: (error) => {
          this.showErrorAlert(error.error?.message || 'An error occurred. Please try again.');
          this.isSubmitting = false;
        }
      });
    }
  }

  toggleForgotPassword(): void {
    this.showForgotPassword = !this.showForgotPassword;
    this.hideAlert();
    if (this.showForgotPassword && this.loginForm.get('email')?.value) {
      this.forgotPasswordForm.patchValue({
        email: this.loginForm.get('email')?.value
      });
    }
  }

  showSuccessAlert(message: string): void {
    this.alertMessage = message;
    this.alertType = 'success';
    this.showAlert = true;
  }

  showErrorAlert(message: string): void {
    this.alertMessage = message;
    this.alertType = 'error';
    this.showAlert = true;
  }

  hideAlert(): void {
    this.showAlert = false;
    this.alertMessage = '';
  }

  onClose(): void {
    this.close.emit();
  }
}

================
File: components/search-dropdown/search-dropdown.component.css
================
.search-container {
  position: relative;
  width: 100%;
  max-width: 1000px;
  margin: 0 auto;
}


.inputs {
  display: flex;
  align-items: center;
  gap: 20px;
  width: 100%;
}

input {
  flex: 1;
 width: 480px;
  border-radius: 50px;
  border: 1px solid #18a4e180;
  padding: 15px 25px;
  font-size: 16px;
  transition: all 0.3s ease;
  background-color: white;
}

input:focus {
  outline: none;
  border-color: #18a4e1;
  box-shadow: 0 0 0 2px rgba(24, 164, 225, 0.1);
}


.search {
  border-radius: 50%;
  background-color: #053354;
  width: 50px;
  height: 50px;
  display: flex;
  align-items: center;
  justify-content: center;
  flex-shrink: 0;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

.search:hover {
  background-color: #0a4c7c;
}


.dropdown-container {
  position: absolute;
  top: calc(100% + 8px);
  left: 0;
  right: 0;
  background: white;
  border-radius: 12px;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
  z-index: 1000;
  max-height: 400px;
  overflow-y: auto;
}

.search-results {
  padding: 12px;
}


.doctor-card {
  display: flex;
  align-items: center;
  padding: 16px;
  cursor: pointer;
  transition: all 0.3s ease;
  border-radius: 8px;
  margin-bottom: 8px;
  background-color: white;
}

.doctor-card:hover {
  background-color: #f8f9fa;
  transform: translateY(-1px);
}

.doctor-card img {
  width: 60px;
  height: 60px;
  border-radius: 50%;
  margin-right: 16px;
  object-fit: cover;
  border: 2px solid #f0f0f0;
}

.doctor-info {
  flex: 1;
  min-width: 0;
}

.doctor-info h3 {
  margin: 0;
  font-size: 16px;
  color: #053354;
  font-weight: 500;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.doctor-info p {
  margin: 4px 0;
  font-size: 14px;
  color: #666;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}


@media (max-width: 1600px) {
  .search-container {
    max-width: 800px;
  }
  
  input {
    max-width: 400px;
  }
}

@media (max-width: 1200px) {
  .search-container {
    max-width: 700px;
    padding: 0 20px;
  }
  
  input {
    max-width: 350px;
  }

  .dropdown-container {
    left: 20px;
    right: 20px;
  }
}

@media (max-width: 968px) {
  .inputs {
    flex-direction: column;
    gap: 15px;
  }
  
  input {
    width: 100%;
    max-width: none;
  }
  


  .doctor-card {
    padding: 12px;
  }
  
  .doctor-card img {
    width: 50px;
    height: 50px;
  }

  .doctor-info h3 {
    font-size: 14px;
  }

  .doctor-info p {
    font-size: 12px;
  }
}

@media (max-width: 480px) {
  .search-container {
    padding: 0 15px;
  }
  
  input {
    padding: 12px 50px 12px 15px;
    font-size: 14px;
  }
  
  .search {
    width: 40px;
    height: 40px;
  }
  
  .dropdown-container {
    max-height: 350px;
    left: 15px;
    right: 15px;
  }

  .doctor-card {
    padding: 10px;
  }

  .doctor-card img {
    width: 40px;
    height: 40px;
    margin-right: 12px;
  }
}


.dropdown-container::-webkit-scrollbar {
  width: 6px;
}

.dropdown-container::-webkit-scrollbar-track {
  background: #f1f1f1;
  border-radius: 3px;
}

.dropdown-container::-webkit-scrollbar-thumb {
  background: #18a4e1;
  border-radius: 3px;
}

.dropdown-container::-webkit-scrollbar-thumb:hover {
  background: #1493cc;
}

================
File: components/search-dropdown/search-dropdown.component.html
================
<div class="search-container">
    <div class="inputs">
      <input 
        placeholder="მოძებნე ექიმი სახელით" 
        type="text"
        [(ngModel)]="nameSearch"
        (input)="onNameSearch($event)"
      >
      <input 
        placeholder="მოძებნე სპეციალობით" 
        type="text"
        [(ngModel)]="specialtySearch"
        (input)="onSpecialtySearch($event)"
      >
      <div class="search">
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="#fff" viewBox="0 0 256 256">
          <path d="M229.66,218.34l-50.07-50.06a88.11,88.11,0,1,0-11.31,11.31l50.06,50.07a8,8,0,0,0,11.32-11.32ZM40,112a72,72,0,1,1,72,72A72.08,72.08,0,0,1,40,112Z"></path>
        </svg>
      </div>
    </div>

    <div class="dropdown-container" *ngIf="showDropdown$ | async">
      <div class="dropdown-content">
        <div class="search-results">
          <div class="doctor-card" *ngFor="let doctor of searchResults$ | async" (click)="onDoctorClick(doctor)">
            <img [src]="getDoctorPhoto(doctor.doctorId)" [alt]="doctor.firstName + ' ' + doctor.lastName">
            <div class="doctor-info">
              <h3>{{doctor.firstName}} {{doctor.lastName}}</h3>
              <p>{{doctor.specialty}}</p>
              <div class="rating">
              <ng-container *ngFor="let filled of getStarsArray(doctor.rating)">
                      <svg xmlns="http://www.w3.org/2000/svg" 
                           width="17" 
                           height="17"
                           [attr.fill]="filled ? '#FFD233' : '#ECF2F8'" 
                           viewBox="0 0 256 256">
                          <path d="M234.5,114.38l-45.1,39.36,13.51,58.6a16,16,0,0,1-23.84,17.34l-51.11-31-51,31a16,16,0,0,1-23.84-17.34L66.61,153.8,21.5,114.38a16,16,0,0,1,9.11-28.06l59.46-5.15,23.21-55.36a15.95,15.95,0,0,1,29.44,0h0L166,81.17l59.44,5.15a16,16,0,0,1,9.11,28.06Z"></path>
                      </svg>
                  </ng-container>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

================
File: components/search-dropdown/search-dropdown.component.ts
================
import { Component, OnInit, ElementRef, HostListener, OnDestroy } from '@angular/core';
import { SearchService } from '../../services/search.service';
import { DoctorCard } from '../../Models/doctorCard.model';
import { Observable, Subject, Subscription } from 'rxjs';
import { finalize, takeUntil } from 'rxjs/operators';
import { Router } from '@angular/router';
import { DoctorService } from '../../services/doctor.service';

@Component({
  selector: 'app-search-dropdown',
  templateUrl: './search-dropdown.component.html',
  styleUrls: ['./search-dropdown.component.css']
})
export class SearchDropdownComponent implements OnInit, OnDestroy {
  nameSearch: string = '';
  specialtySearch: string = '';
  searchResults$: Observable<DoctorCard[]>;
  showDropdown$: Observable<boolean>;
  private destroy$ = new Subject<void>();
  private photoSubscriptions = new Map<number, Subscription>();
  doctorPhotos = new Map<number, string>();
  loadingPhotos = new Set<number>();

  constructor(
    private searchService: SearchService,
    private router: Router,
    private elementRef: ElementRef,
    private doctorService:DoctorService
  ) {
    this.searchResults$ = this.searchService.getSearchResults();
    this.showDropdown$ = this.searchService.getShowDropdown();
  }

  ngOnInit() {
  }

  loadDoctorPhoto(doctorId: number): void {
    if (this.photoSubscriptions.has(doctorId)) {
      return; 
    }

    this.loadingPhotos.add(doctorId);
    
    const subscription = this.doctorService.getDoctorPhoto(doctorId)
      .pipe(
        finalize(() => this.loadingPhotos.delete(doctorId))
      )
      .subscribe({
        next: (photoUrl) => {
          this.doctorPhotos.set(doctorId, photoUrl);
        },
        error: () => {
         
          this.doctorPhotos.set(doctorId, '/assets/default-doctor.png');
        }
      });

    this.photoSubscriptions.set(doctorId, subscription);
  }

  getDoctorPhoto(doctorId: number): string {
    if (!this.doctorPhotos.has(doctorId)) {
      this.loadDoctorPhoto(doctorId);
      return 'assets/png-clipart-anonymous-person-login-google-account-computer-icons-user-activity-miscellaneous-computer.png'; // Show placeholder while loading
    }
    return this.doctorPhotos.get(doctorId) || '/assets/default-doctor.png';
  }

  onNameSearch(event: Event) {
    const value = (event.target as HTMLInputElement).value;
    this.searchService.setNameSearch(value);
  }

  onSpecialtySearch(event: Event) {
    const value = (event.target as HTMLInputElement).value;
    this.searchService.setSpecialtySearch(value);
  }

  @HostListener('document:click', ['$event'])
  onClickOutside(event: Event) {
    if (!this.elementRef.nativeElement.contains(event.target)) {
      this.searchService.closeDropdown();
    }
  }

  onDoctorClick(doctor: DoctorCard) {
    this.router.navigate(['/book-appointment/'+ doctor.doctorId]);
    this.searchService.closeDropdown();
  }

  getStarsArray(rating: number): number[] {
    return Array(5).fill(0).map((_, i) => i < rating ? 1 : 0);
  }

  ngOnDestroy() {
    this.destroy$.next();
    this.destroy$.complete();
  }
}

================
File: config/api.config.ts
================
export const API_CONFIG = {
    baseUrl: 'https://localhost:7226/api',
    endpoints: {
      user: {
        base: '/User',
        authenticate: '/Authenticate',
        checkEmail: '/CheckEmailExists/check-email',
        info: '/GetUserInfo',
        forgotPassword: '/ForgotPassword/forgot-password',
        changePassword:'/ChangePassword/change-password'
      },
      doctor: {
        base: '/Doctor',
        register: '/RegisterDoctor',
        cards: '/GetDoctorCards',
        byId: '/GetDoctorById',
        delete: '/DeleteDoctorById',
        categories:'/GetSpecialtyCount/specialty-count',
        photo:'/GetDoctorPhoto/photo',
        cv: '/ExtractCvText/extract-cv',
        update:'/UpdateDoctor/update'
      },
      patient: {
        base: '/Patient',
        register: '/RegisterPatient'
      },
      verify:{
        base: '/Verification',
        activationCode: '/send',
        verifyCode: '/verify'
      },
      appointment:{
        base: '/Appointment',
        count:'/count',
        book:'/book',
        blockTime:'/block',
        loadDoc:'/doctor',
        loadPat:'/patient',
        update:'/description',
        delete:'',
        available:'/available-slots/',
        slotAvailable:'/check-availability/',
      }
    }
  };

================
File: custom-preloading-strategy.ts
================
import { Injectable } from '@angular/core';
import { PreloadAllModules, Route } from '@angular/router';
import { Observable, of } from 'rxjs';

@Injectable({ providedIn: 'root' })
export class CustomPreloadingStrategy implements PreloadAllModules {
  preload(route: Route, load: () => Observable<any>): Observable<any> {
    if (route.data?.['preload'] === true) {
      console.log('Preloading:', route.path);
      return load();
    }
    return of(null);
  }
}

================
File: guards/admin.guard.ts
================
import { Injectable } from '@angular/core';
import { CanActivate, Router } from '@angular/router';
import { Observable, map, take } from 'rxjs';
import { AuthService } from '../services/auth.service';

@Injectable({
  providedIn: 'root'
})
export class AdminGuard implements CanActivate {
  constructor(private authService: AuthService, private router: Router) {}

  canActivate(): Observable<boolean> {
    return this.authService.getCurrentUser().pipe(
      take(1),
      map(user => {
        if (user?.role !== 'ADMIN') {
          this.router.navigate(['/main']);
          return false;
        }
        return true;
      })
    );
  }
}

================
File: guards/auth.guard.ts
================
import { Injectable } from '@angular/core';
import { CanActivate, Router, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';
import { Observable, map, take } from 'rxjs';
import { AuthService } from '../services/auth.service';


@Injectable({
  providedIn: 'root'
})
export class AuthGuard implements CanActivate {
  constructor(private authService: AuthService, private router: Router) {}

  canActivate(): Observable<boolean> {
    return this.authService.getCurrentUser().pipe(
      take(1),
      map(user => {
        if (!user) {
          this.router.navigate(['/main']);
          return false;
        }
        return user.role === 'ADMIN' || true;
      })
    );
  }
}

================
File: guards/doctor.guard.ts
================
import { Injectable } from '@angular/core';
import { CanActivate, Router } from '@angular/router';
import { Observable, map, take } from 'rxjs';
import { AuthService } from '../services/auth.service';


@Injectable({
  providedIn: 'root'
})
export class DoctorGuard implements CanActivate {
  constructor(private authService: AuthService, private router: Router) {}

  canActivate(): Observable<boolean> {
    return this.authService.getCurrentUser().pipe(
      take(1),
      map(user => {
        if (user?.role === 'ADMIN' || user?.role === 'DOCTOR') {
          return true;
        }
        this.router.navigate(['/main']);
        return false;
      })
    );
  }
}

================
File: guards/no-auth.guard.ts
================
import { Injectable } from '@angular/core';
import { CanActivate, Router } from '@angular/router';
import { Observable, map, take } from 'rxjs';
import { AuthService } from '../services/auth.service';

@Injectable({
  providedIn: 'root'
})
export class NoAuthGuard implements CanActivate {
  constructor(private authService: AuthService, private router: Router) {}

  canActivate(): Observable<boolean> {
    return this.authService.isAuthenticated().pipe(
      take(1),
      map(isAuthenticated => {
        if (isAuthenticated) {
       
          this.authService.getCurrentUser().pipe(take(1)).subscribe(user => {
            switch(user?.role) {
              case 'ADMIN':
                this.router.navigate(['/admin-prof']);
                break;
              case 'DOCTOR':
                this.router.navigate(['/doc-prof']);
                break;
              case 'PATIENT':
                this.router.navigate(['/user-prof']);
                break;
              default:
                this.router.navigate(['/main']);
            }
          });
          return false;
        }
        return true;
      })
    );
  }
}

================
File: guards/no-doctor-guard.ts
================
import { Injectable } from '@angular/core';
import { CanActivate, Router } from '@angular/router';
import { Observable, map, take } from 'rxjs';
import { AuthService } from '../services/auth.service';

@Injectable({
  providedIn: 'root'
})
export class NoDoctorGuard implements CanActivate {
  constructor(private authService: AuthService, private router: Router) {}

  canActivate(): Observable<boolean> {
    return this.authService.getCurrentUser().pipe(
      take(1),
      map(user => {
        if (user?.role === 'DOCTOR') {
          this.router.navigate(['/main']);
          return false;
        }
        return true;
      })
    );
  }
}

================
File: guards/patient.guard.ts
================
import { Injectable } from '@angular/core';
import { CanActivate, Router } from '@angular/router';
import { Observable, map, take } from 'rxjs';
import { AuthService } from '../services/auth.service';

@Injectable({
  providedIn: 'root'
})
export class PatientGuard implements CanActivate {
  constructor(private authService: AuthService, private router: Router) {}

  canActivate(): Observable<boolean> {
    return this.authService.getCurrentUser().pipe(
      take(1),
      map(user => {
        if (user?.role === 'ADMIN' || user?.role === 'PATIENT') {
          return true;
        }
        this.router.navigate(['/main']);
        return false;
      })
    );
  }
}

================
File: interceptors/auth.interceptor.ts
================
import { Injectable } from '@angular/core';
import {
  HttpRequest,
  HttpHandler,
  HttpEvent,
  HttpInterceptor,
  HttpErrorResponse
} from '@angular/common/http';
import { Observable, throwError } from 'rxjs';
import { catchError } from 'rxjs/operators';
import { Router } from '@angular/router';

@Injectable()
export class AuthInterceptor implements HttpInterceptor {
  constructor(private router: Router) {}

  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {
    const token = localStorage.getItem('Token');

    if (token) {
      request = request.clone({
        setHeaders: {
          Authorization: `Bearer ${token}`
        }
      });
    }

    return next.handle(request).pipe(
      catchError((error: HttpErrorResponse) => {
        if (error.status === 401) {
          localStorage.removeItem('Token');
          this.router.navigate(['/main']);
          return throwError(() => new Error('არასოწრი ელ-ფოსტა ან პაროლი'));
        }
        
        if (error.status === 403) {
          return throwError(() => new Error('You do not have permission to access this resource'));
        }

        if (error.status === 404) {
          return throwError(() => new Error('The requested resource was not found'));
        }

        return throwError(() => new Error('An error occurred. Please try again later'));
      })
    );
  }
}

================
File: Models/appointment.model.ts
================
export interface Appointment {
    appointmentId: number;
    doctorId: number;
    patientId: number;
    appointmentDate: Date;
    timeSlot: string;
    description?: string;
    isBlocked: boolean;
    doctorFirstName?: string;
    doctorLastName?: string;
    doctorSpecialty?: string;
    patientFirstName?: string;
    patientLastName?: string;
  }
  
  export interface TimeSlot {
    timeSlot: string;
    isAvailable: boolean;
    isBlocked: boolean;
    patientId?: number;
  }
  
  export interface CreateAppointmentDto {
    doctorId: number;
    appointmentDate: Date;
    timeSlot: string;
    description?: string;
  }

  export interface EditEvent {
    appointmentId: number;
    description: string;
  }

================
File: Models/doctorCard.model.ts
================
export class DoctorCard {
  constructor(
    public userId:number=0,
    public doctorId: number = 0,
    public firstName: string = '',
    public lastName: string = '',
    public email:string = '',
    public personalNumber = '',
    public specialty: string = '',
    public photoUrl: string = '',
    public rating: number = 0,
    public isPinned:boolean = false
  ) {}
}

================
File: Models/experience.model.ts
================
interface Experience {
    year: string;
    description: string;
  }

================
File: Models/Login.model.ts
================
export class UserLoginDto{
    public email:string;
    public password:string;
    constructor(email:string,password:string){
        this.email = email;
        this.password = password;
    }
}

export class ResetPasswordDto{
    public email:string;
    constructor(email:string){
        this.email = email
    }
}


export interface PasswordChangeDto {
    currentPassword: string;
    newPassword: string;
    confirmPassword: string;
  }

================
File: Models/Patient.model.ts
================
import { first } from "rxjs";

export interface User {
    userId: number;
    firstName: string;
    lastName: string;
    email: string;
    personalNumber: string;
    role: string;
    password?: string;
    //  for doctors
    doctorId?:number;
    specialization?: string;
    rating?: number;
    photoUrl?: string;
    cvUrl?:string;
}

================
File: Models/updateDoctorDto.ts
================
export interface UpdateDoctorDto {
    firstName?: string;
    lastName?: string;
    personalNumber?: string;
    email?: string;
    specialty?: string;
  }

================
File: modules/admin/admin-routing.module.ts
================
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { AdminGuard } from '../../guards/admin.guard';
import { AdminCategoriesComponent } from '../../pages/admin-categories/admin-categories.component';
import { AdminProfileComponent } from '../../pages/admin-profile/admin-profile.component';
import { DoctorRegistrationComponent } from '../../pages/doctor-registration/doctor-registration.component';

const routes: Routes = [
  {
    path: 'categories',
    component: AdminCategoriesComponent,
    canActivate: [AdminGuard]
  },
  {
    path: 'profile',
    component: AdminProfileComponent,
    canActivate: [AdminGuard]
  },
  {
    path: 'profile/:id',
    component: AdminProfileComponent,
    canActivate: [AdminGuard]
  },
  {
    path: 'doctor-registration',
    component: DoctorRegistrationComponent,
    canActivate: [AdminGuard]
  }
];

@NgModule({
  imports: [RouterModule.forChild(routes)],
  exports: [RouterModule]
})
export class AdminRoutingModule { }

================
File: modules/admin/admin.module.ts
================
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { AdminRoutingModule } from './admin-routing.module';
import { SharedModule } from '../shared/shared.module';
import { AdminCategoriesComponent } from '../../pages/admin-categories/admin-categories.component';
import { AdminProfileComponent } from '../../pages/admin-profile/admin-profile.component';
import { DoctorRegistrationComponent } from '../../pages/doctor-registration/doctor-registration.component';

@NgModule({
  declarations: [
    AdminCategoriesComponent,
    AdminProfileComponent,
    DoctorRegistrationComponent
  ],
  imports: [
    CommonModule,
    SharedModule,
    AdminRoutingModule
  ]
})
export class AdminModule { }

================
File: modules/doctor/admin-routing.ts
================
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { DoctorGuard } from '../../guards/doctor.guard';
import { DoctorProfileComponent } from '../../pages/doctor-profile/doctor-profile.component';

const routes: Routes = [
  {
    path: 'profile',
    component: DoctorProfileComponent,
    canActivate: [DoctorGuard]
  }
];

@NgModule({
  imports: [RouterModule.forChild(routes)],
  exports: [RouterModule]
})
export class DoctorRoutingModule { }

================
File: modules/doctor/doctor.module.ts
================
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { DoctorRoutingModule } from './admin-routing';
import { SharedModule } from '../shared/shared.module';
import { DoctorProfileComponent } from '../../pages/doctor-profile/doctor-profile.component';

@NgModule({
  declarations: [
    DoctorProfileComponent
  ],
  imports: [
    CommonModule,
    SharedModule,
    DoctorRoutingModule
  ]
})
export class DoctorModule { }

================
File: modules/patient/patient-routing.ts
================
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { PatientGuard } from '../../guards/patient.guard';
import { UserProfileComponent } from '../../pages/user-profile/user-profile.component';
import { BookAppointmentComponent } from '../../pages/book-appointment/book-appointment.component';

const routes: Routes = [
  {
    path: 'profile',
    component: UserProfileComponent,
    canActivate: [PatientGuard]
  },

];

@NgModule({
  imports: [RouterModule.forChild(routes)],
  exports: [RouterModule]
})
export class PatientRoutingModule { }

================
File: modules/patient/patient.module.ts
================
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { PatientRoutingModule } from './patient-routing';
import { SharedModule } from '../shared/shared.module';
import { UserProfileComponent } from '../../pages/user-profile/user-profile.component';
import { BookAppointmentComponent } from '../../pages/book-appointment/book-appointment.component';
import { ReactiveFormsModule } from '@angular/forms';

@NgModule({
  declarations: [
    UserProfileComponent,
  ],
  imports: [
    CommonModule,
    SharedModule,
    PatientRoutingModule,
    ReactiveFormsModule
  ]
})
export class PatientModule { }

================
File: modules/registration/registration-routing.modue.ts
================
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { RegistrationComponent } from '../../pages/registration/registration.component';
import { NoAuthGuard } from '../../guards/no-auth.guard';

const routes: Routes = [
  {
    path: '',
    component: RegistrationComponent,
    canActivate: [NoAuthGuard]
  }
];

@NgModule({
  imports: [RouterModule.forChild(routes)],
  exports: [RouterModule]
})
export class RegistrationRoutingModule { }

================
File: modules/registration/registration.module.ts
================
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { RegistrationRoutingModule } from './registration-routing.modue';
import { RegistrationComponent } from '../../pages/registration/registration.component';
import { ReactiveFormsModule, FormsModule } from '@angular/forms';
import { RouterModule } from '@angular/router';

@NgModule({
  declarations: [
    RegistrationComponent
  ],
  imports: [
    CommonModule,
    ReactiveFormsModule,
    FormsModule,
    RouterModule,
    RegistrationRoutingModule
  ]
})
export class RegistrationModule { }

================
File: modules/shared/shared.module.ts
================
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ReactiveFormsModule, FormsModule } from '@angular/forms';
import { CalendarModule } from 'primeng/calendar';
import { CategoriesComponent } from '../../components/categories/categories.component';
import { CalendarComponent } from '../../components/calendar/calendar.component';
import { DoctorProfileCardComponent } from '../../components/doctor-profile-card/doctor-profile-card.component';
import { SearchDropdownComponent } from '../../components/search-dropdown/search-dropdown.component';
import { ChangePasswordModalComponent } from '../../components/change-password-modal/change-password-modal.component';
import { BookingModalComponent } from '../../components/booking-modal/booking-modal.component';
import { RouterModule } from '@angular/router';
import { CalendarEditModalComponent } from '../../components/calendar-edit-modal/calendar-edit-modal.component';

@NgModule({
  declarations: [
    CategoriesComponent,
    BookingModalComponent,
    CalendarComponent,
    SearchDropdownComponent,
    DoctorProfileCardComponent,
    ChangePasswordModalComponent,
    CalendarEditModalComponent
  ],
  imports: [
    CommonModule,
    ReactiveFormsModule,
    FormsModule,
    CalendarModule,
    RouterModule
  ],
  exports: [
    CommonModule,
    ReactiveFormsModule,
    FormsModule,
    CalendarModule,
    RouterModule,
    CategoriesComponent,
    SearchDropdownComponent,
    CalendarComponent,
    DoctorProfileCardComponent,
    ChangePasswordModalComponent,
    BookingModalComponent,
    CalendarEditModalComponent
  ]
})
export class SharedModule { }

================
File: pages/admin-categories/admin-categories.component.css
================
.outer-container {
    width: 100%;
    max-width: 1460px;
    margin: 0 auto 50px;
    padding: 20px;
    display: flex;
    flex-direction: column;
    align-items: flex-start;
  }
  
  h1 {
    color: #18A4E1;
    margin: 0 0 45px 0;
    padding: 0;
    align-self: flex-start;
  }
  
  .table-container {
    width: 100%;
    background-color: white;
    border-radius: 8px;
    box-shadow: 0 0 10px rgba(0,0,0,0.1);
    overflow: hidden;
  }
  
  .table-wrapper {
    height: 480px; 
    overflow-y: auto;
  }
  
  table {
    width: 100%;
    border-collapse: collapse;
  }
  
  th, td {
    padding: 12px;
    text-align: center;
    border-bottom: 1px solid #e0e0e0;
    height: 68px;
  }
  
  th {
    position: sticky;
    top: 0;
    background-color: #F0FAFF;
    font-weight: bold;
    z-index: 1;
  }
  
  .user-image {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    object-fit: cover;
  }
  
  .rating {
    color: #ffc107;
  }
  
  .action-buttons {
    display: flex;
    gap: 10px;
  }
  
  .edit-btn, .delete-btn {
    width: 42px;
    height: 42px;
    border: none;
    padding: 0;
    border-radius: 20px;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  
  .edit-btn {
    background-color: #DAFAEE;
  }
  
  .delete-btn {
    background-color: #FF93A6;
  }
  
  .table-wrapper::-webkit-scrollbar {
    width: 8px;
  }
  
  .table-wrapper::-webkit-scrollbar-track {
    background: #f1f1f1;
  }
  
  .table-wrapper::-webkit-scrollbar-thumb {
    background: #888;
    border-radius: 4px;
  }
  
  .table-wrapper::-webkit-scrollbar-thumb:hover {
    background: #555;
  }

================
File: pages/admin-categories/admin-categories.component.html
================
<div class="outer-container">
    <h1>კატეგორიები</h1>
    <div class="table-container">
      <div class="table-wrapper">
        <table>
          <thead>
            <tr>
              <th>სახელი</th>
              <th>კატეგორია</th>
              <th>ფოტოსურათი</th>
              <th>რეიტინგი</th>
              <th></th>
            </tr>
          </thead>
          <tbody>
            <tr *ngFor="let row of doctors">
              <td>{{ row.firstName }} {{row.lastName}}</td>
              <td>{{ row.specialty }}</td>
              <td><img [src]="getDoctorPhoto(row.doctorId)" alt="User" class="user-image"></td>
              <td class="rating">
                <ng-container *ngFor="let filled of getStarsArray(row.rating)">
                  <svg xmlns="http://www.w3.org/2000/svg" 
                       width="17" 
                       height="17" 
                       [attr.fill]="filled ? '#FFD233' : '#ECF2F8'"
                       viewBox="0 0 256 256">
                      <path d="M234.5,114.38l-45.1,39.36,13.51,58.6a16,16,0,0,1-23.84,17.34l-51.11-31-51,31a16,16,0,0,1-23.84-17.34L66.61,153.8,21.5,114.38a16,16,0,0,1,9.11-28.06l59.46-5.15,23.21-55.36a15.95,15.95,0,0,1,29.44,0h0L166,81.17l59.44,5.15a16,16,0,0,1,9.11,28.06Z"></path>
                  </svg>
              </ng-container>
              </td>
              <td>
                <div class="action-buttons">

                  <button class="edit-btn"(click)="toggleVisibility()" [routerLink]="['/admin/profile/'+ row.doctorId]">
                    <svg width="26" height="26" viewBox="0 0 26 26" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path fill-rule="evenodd" clip-rule="evenodd" d="M15.3698 4.19626C16.1775 3.73881 17.1339 3.62097 18.0285 3.86864C18.4252 3.97846 18.7641 4.16977 19.0835 4.38584C19.387 4.59106 19.735 4.86275 20.1384 5.17765L20.1972 5.22359C20.6006 5.53849 20.9488 5.81018 21.2215 6.05472C21.5087 6.3122 21.7765 6.59455 21.9794 6.95268C22.4369 7.76039 22.5547 8.71675 22.307 9.61135C22.1972 10.008 22.0059 10.347 21.7898 10.6664C21.5846 10.9699 21.3129 11.318 20.9979 11.7214L12.7114 22.3372C12.6904 22.3641 12.6698 22.3905 12.6493 22.4168C12.2604 22.9155 11.9663 23.2926 11.6021 23.6024C11.294 23.8645 10.953 24.0855 10.5879 24.2597C10.1565 24.4655 9.69211 24.5799 9.07787 24.7313C9.04567 24.7393 9.01305 24.7473 8.98001 24.7555L6.50105 25.3674C6.32938 25.4099 6.13341 25.4584 5.96055 25.4849C5.76784 25.5145 5.46943 25.5414 5.13984 25.4359C4.74364 25.309 4.40559 25.0451 4.18633 24.6916C4.00393 24.3974 3.95752 24.1015 3.93947 23.9073C3.92328 23.7331 3.92271 23.5313 3.92221 23.3544C3.92217 23.3435 3.92215 23.3326 3.92211 23.3219L3.9141 20.8011C3.91398 20.767 3.91386 20.7334 3.91375 20.7003C3.91147 20.0677 3.90976 19.5894 4.00469 19.121C4.08505 18.7244 4.21663 18.34 4.39612 17.9775C4.60817 17.5491 4.9026 17.1723 5.29206 16.6738C5.31248 16.6476 5.33316 16.6211 5.35411 16.5943L13.6407 5.9784C13.9555 5.57498 14.2273 5.22688 14.4718 4.95413C14.7293 4.66695 15.0116 4.39909 15.3698 4.19626ZM17.4058 6.11738C17.1076 6.03482 16.7889 6.0741 16.5196 6.22659C16.4739 6.25249 16.3871 6.31324 16.2092 6.51174C16.0242 6.71808 15.8013 7.00245 15.457 7.44354L19.1357 10.315C19.4801 9.87394 19.7017 9.58878 19.857 9.35924C20.0065 9.13839 20.0443 9.03942 20.0583 8.98877C20.1409 8.69057 20.1015 8.37179 19.9491 8.10255C19.9232 8.05683 19.8624 7.97002 19.6639 7.79204C19.4575 7.60704 19.1732 7.38427 18.7321 7.03996C18.291 6.69566 18.0059 6.47387 17.7764 6.31862C17.5555 6.16926 17.4565 6.1314 17.4058 6.11738ZM17.7 12.1543L14.0213 9.28286L7.19343 18.03C6.71538 18.6424 6.58057 18.8242 6.48725 19.0127C6.39751 19.194 6.33171 19.3861 6.29154 19.5844C6.24976 19.7905 6.24495 20.0167 6.24742 20.7936L6.25451 23.025L8.42076 22.4902C9.17502 22.304 9.39328 22.2444 9.58312 22.1537C9.7657 22.0667 9.93617 21.9562 10.0903 21.8251C10.2505 21.6888 10.394 21.5139 10.8721 20.9015L17.7 12.1543Z" fill="#3ACF99"/>
                  </svg>
                </button>
                <button class="delete-btn" (click)="deleteDoctor(row.doctorId)">
                  <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M20 5C20.5523 5 21 5.44772 21 6C21 6.55228 20.5523 7 20 7H19.0001L18.9975 7.07129L18.0638 20.1425C17.9891 21.1891 17.1182 22 16.0689 22H7.93116C6.88189 22 6.011 21.1891 5.93624 20.1425L5.00258 7.07129C5.00088 7.04738 5.00002 7.02361 5 7H4C3.44772 7 3 6.55228 3 6C3 5.44772 3.44772 5 4 5H20ZM16.9975 7H7.00259L7.93116 20H16.0689L16.9975 7ZM14 2C14.5523 2 15 2.44772 15 3C15 3.55228 14.5523 4 14 4H10C9.44772 4 9 3.55228 9 3C9 2.44772 9.44772 2 10 2H14Z" fill="white"/>
                  </svg>
                </button>
              </div>
            </td>
            </tr>
          </tbody>
        </table>
      </div>
    </div>
  </div>

================
File: pages/admin-categories/admin-categories.component.ts
================
import { Component, OnInit } from '@angular/core';
import { DoctorCard } from '../../Models/doctorCard.model';
import { DoctorService } from '../../services/doctor.service';
import { VisibilityService } from '../../services/visibility.service';
import { finalize, Subscription } from 'rxjs';


@Component({
  selector: 'app-admin-categories',
  templateUrl: './admin-categories.component.html',
  styleUrl: './admin-categories.component.css'
  
})

export class AdminCategoriesComponent implements OnInit {
 doctors:DoctorCard[]=[];
 private photoSubscriptions = new Map<number, Subscription>();
 doctorPhotos = new Map<number, string>();
 loadingPhotos = new Set<number>();

 constructor(public doctorService:DoctorService,private visibilityService:VisibilityService){}

 toggleVisibility(){

  this.visibilityService.setVisibility(true);
 }

  ngOnInit() {

    this.doctorService.getDoctorCard().subscribe(data=>{
      this.doctorService.cardsList = data;
      this.doctors = data;
    }) 
  }
  loadDoctorPhoto(doctorId: number): void {
    if (this.photoSubscriptions.has(doctorId)) {
      return; 
    }

    this.loadingPhotos.add(doctorId);
    
    const subscription = this.doctorService.getDoctorPhoto(doctorId)
      .pipe(
        finalize(() => this.loadingPhotos.delete(doctorId))
      )
      .subscribe({
        next: (photoUrl) => {
          this.doctorPhotos.set(doctorId, photoUrl);
        },
        error: () => {
          this.doctorPhotos.set(doctorId, '/assets/default-doctor.png');
        }
      });

    this.photoSubscriptions.set(doctorId, subscription);
  }

  getDoctorPhoto(doctorId: number): string {
    if (!this.doctorPhotos.has(doctorId)) {
      this.loadDoctorPhoto(doctorId);
      return 'assets/png-clipart-anonymous-person-login-google-account-computer-icons-user-activity-miscellaneous-computer.png'; // Show placeholder while loading
    }
    return this.doctorPhotos.get(doctorId) || '/assets/default-doctor.png';
  }

  deleteDoctor(id:number){
    this.doctorService.deleteDoctorById(id).subscribe(res=>{
      this.doctorService.getDoctorCard().subscribe(data=>{
        this.doctorService.cardsList = data;
        this.doctors = data;
    });
  });
}

  getStarsArray(rating: number): number[] {
    return Array(5).fill(0).map((_, i) => i < rating ? 1 : 0);
  }

}

================
File: pages/admin-profile/admin-profile.component.css
================
/* Admin Container and Button Styles */
.admin-container {
  width: 100%;
  max-width: 1440px;
  margin: 0 auto;
  padding: 20px;
}

.buttons-container {
  margin: 50px auto;
  display: flex;
  flex-direction: row;
  width: 100%;
  gap: 50px;
  justify-content: space-around;
}

.action-buttons-container {
  width: 450px;
  display: flex;
  height: 45px;
  border: 1px solid #f2f2f2;
  border-radius: 20px;
  align-items: center;
  justify-content: space-around;
  flex-shrink: 0;
}

.action-button {
  border: none;
  background-color: transparent;
  cursor: pointer;
  font-weight: 500;
  font-size: 16px;
  padding: 8px 16px;
  transition: color 0.3s ease;
}

.action-button:hover {
  color: #18a4e1;
}

.active_button {
  color: #18a4e1;
}

.user-buttons {
  display: flex;
  gap: 20px;
  flex-grow: 1;
  max-width: 800px;
  justify-content: space-between;
}

.user-button {
  flex: 1;
  height: 45px;
  border: 1px solid #18a4e1;
  border-radius: 40px;
  background-color: transparent;
  cursor: pointer;
  font-weight: 500;
  font-size: 16px;
  color: #18a4e1;
  transition: all 0.3s ease;
}

.user-button:hover {
  background-color: #18a4e1;
  color: white;
}


.sel-doc {
  width: 100%;
  padding: 0 20px;
}

.sel-doc-container {
  display: flex;
  gap: 40px;
  width: 100%;
  max-width: 1600px;
  align-items: flex-start;
  margin: 0 auto;
  justify-content: center;
}

.sel-doc-info {
  flex: 1;
  height: 426px;
  min-width: 750px;
}

.calendar-wrapper {
  flex: 1;
  min-width: 830px;
}

/* Doctor Card Styles */
.doctor-card {
  background: #FFFFFF;
  border-radius: 16px;
  padding: 24px;
  box-shadow: 0 4px 16px rgba(0, 0, 0, 0.08);
  margin-bottom: 20px;
  margin-top: 66px;
}

.card-grid {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 24px;
  align-items: start;
  min-height: 300px;
}


.column.basic-info {
  display: flex;
  flex-direction: column;
  align-items: center;
  text-align: center;
}

.photo-container {
  position: relative;
  width: 150px;
  height: 150px;
  margin: 0 auto 20px;
  border-radius: 50%;
  overflow: hidden;
}

.doctor-avatar {
  width: 100%;
  height: 100%;
  object-fit: cover;
  transition: filter 0.3s ease;
}

.photo-overlay {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.5);
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  opacity: 0;
  transition: opacity 0.3s ease;
  color: white;
  font-size: 14px;
}

.photo-overlay svg {
  margin-bottom: 8px;
}

.photo-container:hover .photo-overlay {
  opacity: 1;
}

.photo-container:hover .doctor-avatar {
  filter: brightness(0.8);
}

.doctor-header {
  width: 100%;
}

.doctor-name {
  font-size: 20px;
  font-weight: 600;
  color: #18A4E1;
  margin-bottom: 8px;
}

.doctor-role {
  font-size: 14px;
  color: #053354;
  margin-bottom: 4px;
}

.doctor-specialty {
  font-size: 14px;
  color: #666666;
  margin-bottom: 12px;
}

.doctor-rating {
  display: flex;
  justify-content: center;
  gap: 4px;
}


.column.details {
  display: flex;
  flex-direction: column;
  justify-content: center; 
  height: auto; 
  padding: 20px 0;
  gap: 24px;  
}

.detail-row {
  margin-bottom: 24px;
  display: flex;
  flex-direction: column;
}

.detail-label {
  display: flex;
  align-items: center;
  gap: 8px;
  font-size: 14px;
  margin-bottom: 8px;
  color: #666666;
}

.detail-label i {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 24px;
  height: 24px;
}

.detail-value {
  color: #053354;
  font-size: 15px;
  word-break: break-word;
  transition: all 0.3s ease;
  font-weight: 500;
}

.password-change {
  cursor: pointer;
  margin-top: 16px;
}

.password-change .detail-label {
  color: #18A4E1;
}


.column.additional-content {
  display: flex;
  flex-direction: column;
  align-items: flex-start; 
  justify-content: flex-start; 
  height: auto;
  padding: 20px 0;
  margin-top: 0; 
}


.edit-field {
  margin-bottom: 15px;
  position: relative;
}

.detail-input, .name-input, .specialty-input {
  width: 100%;
  padding: 8px 12px;
  border: 1px solid #18a4e180;
  border-radius: 4px;
  font-size: 14px;
  transition: border-color 0.3s ease;
}

.detail-input:focus, .name-input:focus, .specialty-input:focus {
  outline: none;
  border-color: #18A4E1;
}

.hidden-input {
  display: none;
}

.file-input {
  width: 100%;
  padding: 8px;
  border: 1px dashed #18a4e180;
  border-radius: 4px;
  cursor: pointer;
}


.error-message {
  color: #dc3545;
  font-size: 12px;
  margin-top: 4px;
}

.success-message {
  color: #28a745;
  padding: 10px;
  border-radius: 4px;
  background-color: #d4edda;
  margin-bottom: 15px;
}


.doctor-actions {
  display: flex;
  justify-content: space-between;
  gap: 12px;
  width: 100%;
  margin-top: 24px;
}

.btn {
  flex: 1;
  height: 40px;
  border-radius: 20px;
  border: none;
  font-size: 18px;
  font-weight: 500;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 8px;
  transition: all 0.2s ease;
}

.btn:hover {
  opacity: 0.9;
  transform: translateY(-1px);
}

.btn-add {
  background: #3ACF99;
  color: white;
}

.btn-edit {
  background: #ECF2F8;
  color: #18A4E1;
}

.btn-edit:hover {
  background: #dde5ed;
}

.btn-delete {
  background: #FF93A6;
  color: white;
}

.btn-save {
  background-color: #3ACF99;
  color: white;
}

.btn-cancel {
  background-color: #FF93A6;
  color: white;
}

.btn-save:disabled {
  background-color: #cccccc;
  cursor: not-allowed;
}

/* Responsive Design */
@media (max-width: 1200px) {
  .buttons-container {
    flex-direction: column;
    align-items: center;
    gap: 20px;
  }

  .user-buttons {
    width: 100%;
    max-width: none;
  }
}

@media (max-width: 992px) {
  .sel-doc-container {
    flex-direction: column;
  }

  .calendar-wrapper {
    max-width: none;
  }

  .card-grid {
    grid-template-columns: 1fr 1fr;
  }
  
  .column.details,
  .column.additional-content {
    padding: 10px 0;
  }
}

@media (max-width: 768px) {
  .action-buttons-container {
    width: 100%;
  }

  .user-buttons {
    flex-direction: column;
  }

  .card-grid {
    grid-template-columns: 1fr;
  }

  .column.details {
    align-items: center;
    text-align: center;
  }

  .detail-value {
    margin-left: 0;
  }

  .doctor-actions {
    flex-direction: column;
  }

  .btn {
    width: 100%;
  }

  .detail-input, .name-input, .specialty-input {
    font-size: 13px;
    padding: 6px 10px;
  }
}

================
File: pages/admin-profile/admin-profile.component.html
================
<div class="admin-container">
  <div class="buttons-container">
    <div class="action-buttons-container">
      <button class="action-button" routerLink="/admin/doctor-registration">რეგისტრაცია</button>
      <button class="action-button" routerLink="/admin/categories">კატეგორია</button>
      <button class="action-button">ექიმები</button>
    </div>
    <div class="user-buttons">
      <button class="user-button">ექიმი</button>
      <button class="user-button">მომხმარებელი</button>
      <button class="user-button">ადმინისტრატორი</button>
    </div>
  </div>

  <div class="sel-doc" *ngIf="isVisible">
    <div class="sel-doc-container">

      <div class="sel-doc-info">
        <div class="doctor-card">
          <div class="card-grid">

            <div class="column basic-info">
              <div class="photo-container" [class.edit-mode]="isEditVisible">
                <img [src]="isEditVisible ? (photoPreview || photoUrl) : photoUrl" alt="" class="doctor-avatar">
                <div class="photo-overlay" *ngIf="isEditVisible" (click)="fileInput.click()">
                  <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M12 16a4 4 0 1 0 0-8 4 4 0 0 0 0 8z" stroke="white" stroke-width="2" />
                    <path
                      d="M3 16V8a2 2 0 0 1 2-2h2.19a2 2 0 0 0 1.42-.587l.91-.913A2 2 0 0 1 11.41 4h1.18a2 2 0 0 1 1.42.587l.91.913A2 2 0 0 0 16.81 6H19a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"
                      stroke="white" stroke-width="2" />
                  </svg>
                  <span>აირჩიეთ ფოტო</span>
                </div>
                <input #fileInput type="file" (change)="onPhotoSelected($event)" accept="image/jpeg,image/png"
                  class="hidden-input">
              </div>

              <div class="doctor-header">
                <ng-container *ngIf="!isEditVisible">
                  <ng-container *ngIf="doctor">
                    <h3 class="doctor-name">{{doctor.firstName}} {{doctor.lastName}}</h3>
                    <p class="doctor-role" style="color:#053354">ექიმი</p>
                    <p class="doctor-specialty">{{doctor.specialty}}</p>
                    <div class="doctor-rating">
                      <ng-container *ngFor="let filled of getStarsArray(doctor.rating)">
                        <svg xmlns="http://www.w3.org/2000/svg" width="17" height="17"
                          [attr.fill]="filled ? '#FFD233' : '#ECF2F8'" viewBox="0 0 256 256">
                          <path
                            d="M234.5,114.38l-45.1,39.36,13.51,58.6a16,16,0,0,1-23.84,17.34l-51.11-31-51,31a16,16,0,0,1-23.84-17.34L66.61,153.8,21.5,114.38a16,16,0,0,1,9.11-28.06l59.46-5.15,23.21-55.36a15.95,15.95,0,0,1,29.44,0h0L166,81.17l59.44,5.15a16,16,0,0,1,9.11,28.06Z">
                          </path>
                        </svg>
                      </ng-container>
                    </div>
                  </ng-container>
                </ng-container>

                <ng-container *ngIf="isEditVisible">
                  <form [formGroup]="editForm">
                    <div class="edit-field">
                      <input formControlName="firstName" class="name-input" placeholder="First Name">
                      <div class="error-message"
                        *ngIf="editForm.get('firstName')?.invalid && editForm.get('firstName')?.touched">
                        სახელის ველის შევსება აუცილებელია
                      </div>
                    </div>

                    <div class="edit-field">
                      <input formControlName="lastName" class="name-input" placeholder="Last Name">
                      <div class="error-message"
                        *ngIf="editForm.get('lastName')?.invalid && editForm.get('lastName')?.touched">
                        გვარის ველის შევსება აუცილებელია
                      </div>
                    </div>

                    <div class="edit-field">
                      <select formControlName="specialty" class="specialty-input">
                        <option value="">აირჩიეთ სპეციალობა</option>
                        <option *ngFor="let specialty of specialties" [value]="specialty">
                          {{specialty}}
                        </option>
                      </select>
                      <div class="error-message"
                        *ngIf="editForm.get('specialty')?.invalid && editForm.get('specialty')?.touched">
                        სპეციალობის არჩევა აუცილებელია
                      </div>
                    </div>
                  </form>
                </ng-container>
              </div>
            </div>

            <div class="column details">
              <ng-container *ngIf="!isEditVisible">
                <ng-container *ngIf="doctor">
                  <div class="detail-row">
                    <div class="detail-label">
                      <i class="icon-id" *ngIf="isEditVisible"><svg width="24" height="24" viewBox="0 0 24 24"
                          fill="none" xmlns="http://www.w3.org/2000/svg">
                          <path
                            d="M16.862 4.487l1.687-1.688a1.875 1.875 0 112.652 2.652L10.582 16.07a4.5 4.5 0 01-1.897 1.13L6 18l.8-2.685a4.5 4.5 0 011.13-1.897l8.932-8.931zm0 0L19.5 7.125M18 14v4.75A2.25 2.25 0 0115.75 21H5.25A2.25 2.25 0 013 18.75V8.25A2.25 2.25 0 015.25 6H10"
                            stroke="#18A4E1" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" />
                        </svg></i>
                      <span>პირადი ნომერი :</span>
                    </div>
                    <span class="detail-value" [class.editable]="isEditVisible">{{doctor.personalNumber}}</span>
                  </div>

                  <div class="detail-row">
                    <div class="detail-label">
                      <i class="icon-email" *ngIf="isEditVisible"><svg width="24" height="24" viewBox="0 0 24 24"
                          fill="none" xmlns="http://www.w3.org/2000/svg">
                          <path
                            d="M16.862 4.487l1.687-1.688a1.875 1.875 0 112.652 2.652L10.582 16.07a4.5 4.5 0 01-1.897 1.13L6 18l.8-2.685a4.5 4.5 0 011.13-1.897l8.932-8.931zm0 0L19.5 7.125M18 14v4.75A2.25 2.25 0 0115.75 21H5.25A2.25 2.25 0 013 18.75V8.25A2.25 2.25 0 015.25 6H10"
                            stroke="#18A4E1" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" />
                        </svg></i>
                      <span>Email :</span>
                    </div>
                    <span class="detail-value" [class.editable]="isEditVisible">{{doctor.email}}</span>
                  </div>

                  <div class="detail-row password-change">
                    <div class="detail-label">

                      <span>პაროლის შეცვლა</span>
                    </div>
                  </div>
                </ng-container>
              </ng-container>
              <ng-container *ngIf="isEditVisible">
                <form [formGroup]="editForm">
                  <div class="edit-field">
                    <label>პირადი ნომერი</label>
                    <input formControlName="personalNumber" class="detail-input" placeholder="Personal Number">
                    <div class="error-message"
                      *ngIf="editForm.get('personalNumber')?.invalid && editForm.get('personalNumber')?.touched">
                      პირადი ნომრის ველის შევსება აუცილებელია
                    </div>
                  </div>

                  <div class="edit-field">
                    <label>Email</label>
                    <input formControlName="email" class="detail-input" placeholder="Email">
                    <div class="error-message" *ngIf="editForm.get('email')?.invalid && editForm.get('email')?.touched">
                      ელ-ფოსტის ველის შევსება აუცილებელია
                    </div>
                  </div>

                  <div class="edit-field">
                    <label>CV</label>
                    <input type="file" (change)="onCVSelected($event)" accept="application/pdf" class="file-input">
                  </div>
                </form>
              </ng-container>

            </div>

            <div *ngIf="errorMessage" class="error-message">
              {{errorMessage}}
            </div>

            <div class="column additional-content">
              <ng-container *ngIf="!isEditVisible">
                <div class="detail-row">
                  <div class="detail-label">

                    <i class="icon-id" *ngIf="isEditVisible"><svg width="24" height="24" viewBox="0 0 24 24" fill="none"
                        xmlns="http://www.w3.org/2000/svg">
                        <path
                          d="M16.862 4.487l1.687-1.688a1.875 1.875 0 112.652 2.652L10.582 16.07a4.5 4.5 0 01-1.897 1.13L6 18l.8-2.685a4.5 4.5 0 011.13-1.897l8.932-8.931zm0 0L19.5 7.125M18 14v4.75A2.25 2.25 0 0115.75 21H5.25A2.25 2.25 0 013 18.75V8.25A2.25 2.25 0 015.25 6H10"
                          stroke="#18A4E1" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" />
                      </svg></i>
                    <span>დაჯავშნილია :</span>
                  </div>
                  <span class="detail-value" style="margin-left: 35px;" [class.editable]="isEditVisible">( {{appointmentCount$|async}} )</span>
                </div>
              </ng-container>
            </div>
          </div>
        </div>


        <div class="doctor-actions">
          <ng-container *ngIf="!isEditVisible">
            <button class="btn btn-add">
              <span class="plus-icon">+</span> დამატება
            </button>
            <button class="btn btn-edit" (click)="toggleEditVisibility()">
              <i class="icon-edit"></i>
              <svg width="28" height="28" viewBox="0 0 28 28" fill="none" xmlns="http://www.w3.org/2000/svg">
                <g clip-path="url(#clip0_35_2130)">
                  <path fill-rule="evenodd" clip-rule="evenodd"
                    d="M15.3698 4.19628C16.1775 3.73883 17.1339 3.62098 18.0285 3.86865C18.4252 3.97847 18.7641 4.16978 19.0835 4.38586C19.387 4.59108 19.735 4.86277 20.1384 5.17766L20.1972 5.22361C20.6006 5.5385 20.9488 5.8102 21.2215 6.05474C21.5087 6.31221 21.7765 6.59457 21.9794 6.9527C22.4369 7.76041 22.5547 8.71677 22.307 9.61137C22.1972 10.008 22.0059 10.347 21.7898 10.6665C21.5846 10.9699 21.3129 11.318 20.9979 11.7214L12.7114 22.3372C12.6904 22.3641 12.6698 22.3906 12.6493 22.4168C12.2604 22.9156 11.9663 23.2926 11.6021 23.6024C11.294 23.8645 10.953 24.0855 10.5879 24.2597C10.1565 24.4655 9.69211 24.5799 9.07787 24.7314C9.04567 24.7393 9.01305 24.7473 8.98001 24.7555L6.50105 25.3674C6.32938 25.4099 6.13341 25.4584 5.96055 25.4849C5.76784 25.5145 5.46943 25.5414 5.13984 25.4359C4.74364 25.309 4.40559 25.0451 4.18633 24.6916C4.00393 24.3975 3.95752 24.1015 3.93947 23.9073C3.92328 23.7332 3.92271 23.5313 3.92221 23.3545C3.92217 23.3435 3.92215 23.3326 3.92211 23.3219L3.9141 20.8011C3.91398 20.767 3.91386 20.7334 3.91375 20.7003C3.91147 20.0677 3.90976 19.5894 4.00469 19.121C4.08505 18.7244 4.21663 18.34 4.39612 17.9775C4.60817 17.5491 4.9026 17.1723 5.29206 16.6738C5.31248 16.6476 5.33316 16.6212 5.35411 16.5943L13.6407 5.97842C13.9555 5.575 14.2273 5.2269 14.4718 4.95414C14.7293 4.66697 15.0116 4.3991 15.3698 4.19628ZM17.4058 6.11739C17.1076 6.03484 16.7889 6.07412 16.5196 6.2266C16.4739 6.2525 16.3871 6.31325 16.2092 6.51176C16.0242 6.7181 15.8013 7.00247 15.457 7.44355L19.1357 10.315C19.4801 9.87395 19.7017 9.58879 19.857 9.35925C20.0065 9.1384 20.0443 9.03943 20.0583 8.98879C20.1409 8.69059 20.1015 8.37181 19.9491 8.10257C19.9232 8.05684 19.8624 7.97003 19.6639 7.79206C19.4575 7.60706 19.1732 7.38428 18.7321 7.03998C18.291 6.69567 18.0059 6.47389 17.7764 6.31864C17.5555 6.16927 17.4565 6.13141 17.4058 6.11739ZM17.7 12.1543L14.0213 9.28287L7.19343 18.03C6.71538 18.6424 6.58057 18.8242 6.48725 19.0127C6.39751 19.194 6.33171 19.3862 6.29154 19.5844C6.24976 19.7905 6.24495 20.0167 6.24742 20.7936L6.25451 23.025L8.42076 22.4902C9.17502 22.304 9.39328 22.2444 9.58312 22.1537C9.7657 22.0667 9.93617 21.9562 10.0903 21.8251C10.2505 21.6888 10.394 21.5139 10.8721 20.9015L17.7 12.1543Z"
                    fill="#18A4E1" />
                </g>
                <defs>
                  <clipPath id="clip0_35_2130">
                    <rect width="28" height="28" fill="white" />
                  </clipPath>
                </defs>
              </svg>
              რედაქტირება
            </button>
            <button class="btn btn-delete" (click)="toggleVisibility()">
              <svg width="26" height="26" viewBox="0 0 26 26" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path
                  d="M4.33333 24.9166H21.6667C21.954 24.9166 22.2295 24.8025 22.4327 24.5993C22.6359 24.3962 22.75 24.1206 22.75 23.8333V6.49998C22.7499 6.21269 22.6358 5.93718 22.4326 5.73406L18.0993 1.40073C17.8961 1.19755 17.6206 1.08337 17.3333 1.08331H4.33333C4.04602 1.08331 3.77047 1.19745 3.5673 1.40061C3.36414 1.60378 3.25 1.87933 3.25 2.16665V23.8333C3.25 24.1206 3.36414 24.3962 3.5673 24.5993C3.77047 24.8025 4.04602 24.9166 4.33333 24.9166ZM5.41667 3.24998H16.8848L20.5833 6.94848V22.75H5.41667V3.24998ZM16.4742 11.0576L14.5318 13L16.4742 14.9424C16.5777 15.0423 16.6603 15.1619 16.717 15.294C16.7738 15.4262 16.8037 15.5684 16.8049 15.7122C16.8062 15.8561 16.7788 15.9987 16.7243 16.1318C16.6698 16.265 16.5894 16.3859 16.4877 16.4877C16.386 16.5894 16.265 16.6698 16.1319 16.7243C15.9987 16.7788 15.8561 16.8062 15.7122 16.8049C15.5684 16.8037 15.4262 16.7738 15.2941 16.717C15.1619 16.6602 15.0424 16.5777 14.9424 16.4742L13 14.5318L11.0576 16.4742C10.8533 16.6716 10.5796 16.7808 10.2956 16.7783C10.0115 16.7758 9.73981 16.6619 9.53895 16.461C9.33809 16.2602 9.22416 15.9885 9.22169 15.7044C9.21922 15.4204 9.32841 15.1467 9.52575 14.9424L11.4682 13L9.52575 11.0576C9.32841 10.8532 9.21922 10.5796 9.22169 10.2955C9.22416 10.0115 9.33809 9.73979 9.53895 9.53893C9.73981 9.33807 10.0115 9.22414 10.2956 9.22167C10.5796 9.2192 10.8533 9.32839 11.0576 9.52573L13 11.4681L14.9424 9.52573C15.1467 9.32839 15.4204 9.2192 15.7044 9.22167C15.9885 9.22414 16.2602 9.33807 16.4611 9.53893C16.6619 9.73979 16.7758 10.0115 16.7783 10.2955C16.7808 10.5796 16.6716 10.8532 16.4742 11.0576Z"
                  fill="white" />
              </svg>

              წაშლა
            </button>
          </ng-container>
          <ng-container *ngIf="isEditVisible">
            <button class="btn btn-save" (click)="saveChanges()" [disabled]="!editForm.valid || isSubmitting">
              {{ isSubmitting ? 'მიმდინარეობს...' : 'შენახვა' }}
            </button>
            <button class="btn btn-cancel" (click)="cancelEdit()">
              გაუქმება
            </button>
          </ng-container>
        </div>
      </div>

      <div class="calendar-wrapper">
        <div class="calendar-section">
          <app-calendar [doctorId]="doctorId" viewMode='doctor' [isEditVisible]="isEditCalendar"
            [isDeleteVisible]="isDeleteCalendar">
          </app-calendar>
        </div>
      </div>
    </div>
  </div>

================
File: pages/admin-profile/admin-profile.component.ts
================
import { Component, OnInit, OnDestroy } from '@angular/core';
import { VisibilityService } from '../../services/visibility.service';
import { DoctorCard } from '../../Models/doctorCard.model';
import { DoctorService } from '../../services/doctor.service';
import { ActivatedRoute, NavigationEnd, Router } from '@angular/router';
import { Observable, Subscription } from 'rxjs';
import { filter, finalize } from 'rxjs/operators';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { AppointmentService } from '../../services/appointment.service';

@Component({
  selector: 'app-admin-profile',
  templateUrl: './admin-profile.component.html',
  styleUrls: ['./admin-profile.component.css']
})
export class AdminProfileComponent implements OnInit, OnDestroy {
  isVisible: boolean = false;
  isEditVisible: boolean = false;
  doctor: any = null;
  photoUrl: string = 'assets/png-clipart-anonymous-person-login-google-account-computer-icons-user-activity-miscellaneous-computer.png';
  isLoadingPhoto: boolean = false;
  photoError: boolean = false;
  editForm: FormGroup;
  isSubmitting = false;
  uploadedPhoto: File | null = null;
  uploadedCV: File | null = null;
  photoPreview: string | null = null;
  successMessage: string = '';
  errorMessage: string = '';
  private routerSubscription: Subscription | undefined;
  appointmentCount : number = 0;
  doctorId : number = 0;
  isEditCalendar:boolean = false;
  isDeleteCalendar:boolean=false;
  appointmentCount$!:Observable<number>;

  
  private subscriptions: Subscription[] = [];
  private photoSubscription: Subscription | null = null;

  specialties: string[] = [
    'ნევროლოგი', 'ოფთალმოლოგი', 'დერმატოლოგი',
    'ორთოპედი', 'გინეკოლოგი', 'ენდოკრინოლოგი',
    'უროლოგი', 'გასტროენტეროლოგი', 'ოტორინოლარინგოლოგი',
    'პულმონოლოგი', 'რევმატოლოგი', 'ონკოლოგი',
    'ნეფროლოგი', 'ჰემატოლოგი', 'ალერგოლოგი',
    'იმუნოლოგი', 'ფსიქიატრი', 'ნეიროქირურგი'
  ];

  constructor(
    private fb:FormBuilder,
    private visibilityService: VisibilityService,
    private appointmentService:AppointmentService,
    private doctorService: DoctorService,
    private route: ActivatedRoute,
    private router: Router
  ) {

   
    this.editForm = this.fb.group({
      firstName: ['', [Validators.required, Validators.minLength(2)]],
      lastName: ['', [Validators.required, Validators.minLength(2)]],
      email: ['', [Validators.required, Validators.email]],
      personalNumber: ['', [
        Validators.required,
        Validators.minLength(11),
        Validators.maxLength(11),
        Validators.pattern('^[0-9]*$')
      ]],
      specialty: ['', Validators.required]
    });

    this.routerSubscription = this.router.events.pipe(
      filter(event => event instanceof NavigationEnd)
    ).subscribe(() => {
      const id = this.route.snapshot.paramMap.get('id');
      if (!id) {
        this.visibilityService.setVisibility(false);
      }
    });
    
  }

  

  
  ngOnInit() {

    

   

    this.subscriptions.push(
      this.visibilityService.isVisible$.subscribe(visible => {
        this.isVisible = visible;
        
        if (this.isVisible) {
          const id = this.route.snapshot.paramMap.get('id');
          if (id) {
            this.loadDoctorDetails(Number(id));
            this.doctorId = Number(id);
          } else {
            this.visibilityService.setVisibility(false);
          }
        }
      })
    );

    this.subscriptions.push(
      this.visibilityService.isEditVisible$.subscribe(visible => {
        this.isEditVisible = visible;
      })
    );

    const id = this.route.snapshot.paramMap.get('id');
    if (!id) {
      this.visibilityService.setVisibility(false);
    }

    this.appointmentCount$ = this.appointmentService.appointmentCount$;
    this.appointmentService.getSelectedDoctorAppointmentCount
  
    
   
   
  }

  

  loadDoctorDetails(id: number) {
    if (!id) return;

    this.doctorService.getDoctorById(id).subscribe({
      next: (data) => {
        this.doctor = data;
        this.loadDoctorPhoto(id);
        this.appointmentService.getSelectedDoctorAppointmentCount(id).subscribe();
      },
      error: (error) => {
        console.error('Error loading doctor details:', error);
      }
    });
  }

  loadDoctorPhoto(doctorId: number) {
    if (this.photoSubscription) {
      this.photoSubscription.unsubscribe();
    }

    this.isLoadingPhoto = true;
    this.photoError = false;

    this.photoSubscription = this.doctorService.getDoctorPhoto(doctorId)
      .pipe(
        finalize(() => {
          this.isLoadingPhoto = false;
        })
      )
      .subscribe({
        next: (url) => {
          this.photoUrl = url;
        },
        error: (error) => {
          console.error('Error loading doctor photo:', error);
          this.photoError = true;
          this.photoUrl = '/assets/default-doctor.png';
        }
      });
  }

  retryLoadPhoto() {
    if (this.photoError && this.doctor) {
      this.loadDoctorPhoto(this.doctor.doctorId);
    }
  }
  toggleEditVisibility(): void {
    this.isEditVisible = !this.isEditVisible;
    this.isDeleteCalendar = !this.isDeleteCalendar;
    this.isEditCalendar = !this.isEditCalendar;
    if (this.isEditVisible && this.doctor) {
      this.editForm.patchValue({
        firstName: this.doctor.firstName,
        lastName: this.doctor.lastName,
        email: this.doctor.email,
        personalNumber: this.doctor.personalNumber,
        specialty: this.doctor.specialty
      });
    }
    
  }
  onPhotoSelected(event: Event): void {
    const file = (event.target as HTMLInputElement).files?.[0];
    if (file) {
      if (file.type.match(/image\/(jpeg|png)/) && file.size <= 5 * 1024 * 1024) {
        this.uploadedPhoto = file;
        const reader = new FileReader();
        reader.onload = (e) => {
          this.photoPreview = e.target?.result as string;
        };
        reader.readAsDataURL(file);
      } else {
        this.errorMessage = 'Please select a valid image file (JPEG/PNG, max 5MB)';
      }
    }
  }

  onCVSelected(event: Event): void {
    const file = (event.target as HTMLInputElement).files?.[0];
    if (file) {
      if (file.type === 'application/pdf' && file.size <= 10 * 1024 * 1024) {
        this.uploadedCV = file;
      } else {
        this.errorMessage = 'Please select a valid PDF file (max 10MB)';
      }
    }
  }

  saveChanges(): void {
    if (this.editForm.valid && !this.isSubmitting) {
      this.isSubmitting = true;
      this.errorMessage = '';
      this.successMessage = '';

      try {
        const formData = new FormData();
        const formValue = this.editForm.value;

        // Only append changed values
        Object.keys(formValue).forEach(key => {
          if (this.doctor[key] !== formValue[key]) {
            formData.append(key, formValue[key]);
          }
        });

        if (this.uploadedPhoto) {
          formData.append('photo', this.uploadedPhoto);
        }

        if (this.uploadedCV) {
          formData.append('cv', this.uploadedCV);
        }

        this.doctorService.updateDoctor(this.doctor.doctorId, formData).subscribe({
          next: () => {
            this.successMessage = 'Doctor information updated successfully';
            this.loadDoctorDetails(this.doctor.doctorId);
            this.isEditVisible = false;
            this.isDeleteCalendar = false;
            this.isEditCalendar = false;
            this.isSubmitting = false;
          },
          error: (error) => {
            if (error.status === 200 || (error.error && error.error.success)) {
              this.successMessage = 'Doctor information updated successfully';
              this.loadDoctorDetails(this.doctor.doctorId);
              this.isEditVisible = false;
            } else {
              this.errorMessage = error.message || 'Failed to update doctor information';
              console.error('Update error:', error);
            }
            this.isSubmitting = false;
          }
        });
      } catch (error: any) {
        this.errorMessage = error.message || 'Failed to update doctor information';
        console.error('Update error:', error);
        this.isSubmitting = false;
      }
    }
  }
  cancelEdit(): void {
    this.isEditVisible = false;
    this.isDeleteCalendar = false;
    this.isEditCalendar = false;
    this.uploadedPhoto = null;
    this.uploadedCV = null;
    this.photoPreview = null;
    this.errorMessage = '';
    this.successMessage = '';
  }

  toggleVisibility() {
    this.visibilityService.toggleVisibility();
  }

  getStarsArray(rating: number): number[] {
    return Array(5).fill(0).map((_, i) => i < rating ? 1 : 0);
  }
  ngOnDestroy() {
    this.subscriptions.forEach(sub => sub.unsubscribe());
    if (this.photoSubscription) {
      this.photoSubscription.unsubscribe();
    }
    if (this.routerSubscription) {
      this.routerSubscription.unsubscribe();
    }
  }
}

================
File: pages/book-appointment/book-appointment.component.css
================
.cont-app {
  padding: 40px 5%;
  justify-content: center;
  display: flex;
  gap: 5%;
  max-width: 100%;
  overflow-x: hidden;
}

.calendar-section {
  margin-top: 70px;
  display: flex;
  align-items: flex-start;
  gap: 20px;
  width: 100%;
}
.action-buttons {
    display: flex;
    flex-direction: column;
    gap: 15px;
    padding-top: 66px;
}

.edit-btn, .dlt-btn {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 8px;
    height: 50px;
    border-radius: 50px;
    border: none;
    cursor: pointer;
    font-size: 18px;
    padding: 0 25px;
}

.edit-btn {
    width: 230px;
    background-color: #ECF2F8;
    color: #18A4E1;
}

.dlt-btn {
    width: 170px;
    background-color: #FF93A6;
    color: white;
}

.edit-btn img, .dlt-btn img {
    width: 26px;
    height: 26px;
}
.auth-error {
  position: absolute;
  top: 120%;
  left: 41%;
  transform: translate(-50%, -50%);
  background-color: white;
  padding: 20px;
  border-radius: 8px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  max-width: 90%;
  width: 320px;
  height: 78px;
  text-align: center;
  font-size: 16px;
  line-height: 1.5;
  z-index: 1000;
}
.auth-error > p{
  color: #FF2C52;
}


@media (max-width: 1200px) {
  .cont-app {
    flex-direction: column;
    align-items: center;
  }
  .action-buttons {
    flex-direction: row;
    padding-top: 0;
    justify-content: flex-end;
}

  .left-column, .right-column {
    width: 100%;
  }

  .calendar-section {
    margin-top: 40px;
  }
}

@media (max-width: 768px) {
  .cont-app {
    padding: 20px 3%;
  }

  .calendar-section {
    margin-top: 30px;
    flex-direction: column;
  }
}

@media (max-width: 480px) {
  .cont-app {
    padding: 10px 2%;
  }

  .calendar-section {
    margin-top: 20px;
  }
}

================
File: pages/book-appointment/book-appointment.component.html
================
<div class="cont-app">

    <div class="right-column">
        <div class="doctor-card">
            <app-doctor-profile-card [doctorId]="doctorId"></app-doctor-profile-card>
        </div>
        <div class="calendar-section">
            <app-calendar [doctorId]="doctorId" viewMode="booking" [isDeleteVisible]="isDeleteVisible"
                [isEditVisible]="isEditVisible">
            </app-calendar>
            <div class="action-buttons">
                <button (click)="toggleEdit()" class="edit-btn">
                    <img src="assets/calendaredit.svg" alt="edit">
                    რედაქტირება
                </button>
                <button (click)="toggleDelete()" class="dlt-btn">
                    <img src="assets/calendardelete.svg" alt="delete">
                    წაშლა
                </button>
            </div>
            <div *ngIf="!(isAuthenticated$|async)" class="auth-error">
                <p>დასაჯავშნად გთხოვთ გაიაროთ </p> 
                ავტორიზაცია ან რეგისტრაცია
            </div>
        </div>
    </div>
</div>

================
File: pages/book-appointment/book-appointment.component.ts
================
import { Component, OnInit } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { AuthService } from '../../services/auth.service';
import { Observable } from 'rxjs';

@Component({
  selector: 'app-book-appointment',
  templateUrl: './book-appointment.component.html',
  styleUrl: './book-appointment.component.css'
})
export class BookAppointmentComponent implements OnInit {
  doctorId :number=0;
  isEditVisible : boolean = false;
  isDeleteVisible:boolean = false;
  isAuthenticated$! : Observable<boolean>;


constructor(private route:ActivatedRoute, private authService:AuthService) {
}

ngOnInit() {
  this.route.params.subscribe(params => {
    this.doctorId = Number(params['id']); 
  });
  this.isAuthenticated$ = this.authService.isAuthenticated();

}

toggleEdit(){
  this.isEditVisible = !this.isEditVisible;
}

toggleDelete(){
  this.isDeleteVisible = !this.isDeleteVisible;
}

}

================
File: pages/doctor-profile/doctor-profile.component.css
================
.doc-prof {
  padding: 40px 5%;
  display: flex;
  gap: 30px;
  max-width: 100%;
  margin: 0 auto;
  overflow-x: hidden;
  justify-content: center;
}

.doctor-profile {
  background-color: white;
  border-radius: 10px;
  padding: 30px;  
  width: 366px;
  height: 800px;
  min-width: 300px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  text-align: center;
}

.doctor-image {
  width: 150px;
  height: 150px;
  border-radius: 50%;
  margin-bottom: 20px;
  object-fit: cover;
}

.doctor-name {
  font-size: 24px;
  margin-bottom: 1px;
  color: #18A4E1;
}

.doctor-specialty {
  color: #666;
  margin-bottom: 1px;
  font-size: 16px;
  padding: 5px 0;
}

.rating {
  margin: 8px 0 40px;
  display: flex;
  gap: 5px;
  justify-content: center;
}

.contact-info {
  margin-bottom: 1px;
  display: flex;
  flex-direction: column;
  gap: 5px;
}

.phone, .email {

  color: #053354;
  padding: 5px 0;
}

h5 {
  
  word-break: break-word;
  color: #B4C2CC;
  line-height: 1.5;
}

.experience {
  cursor: pointer;
}

.experience, .appointments {
  margin: 20px 0;
  color: #666;
  transition: color 0.3s ease;
  padding: 5px 0;
}

.experience:hover, .appointments:hover {
  color: #333;
}

.calendar-section {
  background-color: transparent;
}

.buttons {
  display: flex;
  gap: 30px;
  margin-top: 30px;
  float: right;
  font-size: 18px;
  
}

.edit-btn, .dlt-btn {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 8px;
  height: 50px;
  border-radius: 50px;
  border: none;
  cursor: pointer;
}

.edit-btn {
  width: 230px;
  background-color: #ECF2F8;
  color: #18A4E1;
}

.dlt-btn {
  width: 170px;
  background-color: #FF93A6;
  color: white;
}

.edit-btn img, .dlt-btn img {
  width: 26px;
  height: 26px;
}

h2 {
  margin-bottom: 56px;
  color: #18A4E1;
  font-size: 26px;
}

/* Media Queries */
@media (max-width: 1400px) {
  .doc-prof {
      max-width: 1208px;
  }
  
  .calendar-section {
      width: 700px;
  }
}

@media (max-width: 1200px) {
  .doc-prof {
      padding: 20px 3%;
  }

  .calendar-section {
      width: 600px;
  }

  .doctor-profile {
      width: 320px;
      min-width: 280px;
      padding: 25px;
  }
}

@media (max-width: 992px) {
  .doc-prof {
      flex-direction: column;
      align-items: center;
      gap: 25px;
  }

  .doctor-profile {
      width: 100%;
      max-width: 500px;
  }

  .calendar-section {
      width: 100%;
      max-width: 800px;
  }
}

@media (max-width: 768px) {
  .doc-prof {
      padding: 15px 2%;
  }

  .doctor-profile {
      padding: 20px;
  }

  .doctor-image {
      width: 120px;
      height: 120px;
      margin-bottom: 20px;
  }

  .doctor-name {
      font-size: 20px;
  }

  .doctor-specialty {
      font-size: 14px;
      margin-bottom: 20px;
  }
}

@media (max-width: 480px) {
  .doc-prof {
      padding: 10px;
      gap: 15px;
  }

  .doctor-profile {
      padding: 15px;
  }

  .doctor-image {
      width: 100px;
      height: 100px;
      margin-bottom: 15px;
  }

  .calendar-section {
      padding: 15px;
  }

  .contact-info {
      font-size: 14px;
      margin-bottom: 20px;
      gap: 10px;
  }

  h5 {
      font-size: 14px;
      margin: 8px 0 20px;
  }

  .buttons {
      flex-direction: column;
      gap: 15px;
  }

  .edit-btn, .dlt-btn {
      width: 100%;
      height: 40px;
      font-size: 16px;
  }
}

================
File: pages/doctor-profile/doctor-profile.component.html
================
<div class="doc-prof">
   
  <div class="doctor-profile">
      <div *ngIf="currentUser$|async as user">
          <img [src]="getDoctorPhoto(user.doctorId)" alt="doctor" class="doctor-image">
          <h2 class="doctor-name">{{user.firstName}} {{user.lastName}}</h2>
          <p class="doctor-specialty" style="color: #053354;">ექიმი</p>
          <p class="doctor-specialty">{{user.specialty}}</p>
          <div class="rating">
              <ng-container *ngFor="let filled of getStarsArray(user.rating)">
                  <svg xmlns="http://www.w3.org/2000/svg" 
                       width="17" 
                       height="17" 
                       [attr.fill]="filled ? '#FFD233' : '#ECF2F8'"
                       viewBox="0 0 256 256">
                      <path d="M234.5,114.38l-45.1,39.36,13.51,58.6a16,16,0,0,1-23.84,17.34l-51.11-31-51,31a16,16,0,0,1-23.84-17.34L66.61,153.8,21.5,114.38a16,16,0,0,1,9.11-28.06l59.46-5.15,23.21-55.36a15.95,15.95,0,0,1,29.44,0h0L166,81.17l59.44,5.15a16,16,0,0,1,9.11,28.06Z"></path>
                  </svg>
              </ng-container>
          </div>
          <div class="contact-info">
              <p class="phone">პირადი ნომერი : </p>
              <h5>{{user.personalNumber}}</h5>
              <p class="email">Email : </p>
              <h5>{{user.email}}</h5>
          </div>
          <p class="experience" (click)="toggleChangePasswordModal()">პაროლის შეცვლა</p>
          <p class="appointments">დაჯავშნილია: <br><h5>( {{appointmentCount}} )</h5></p>
      </div>
  </div>
    
  <div class="calendar-section">
      <app-calendar 
          [doctorId]="userId"
          viewMode="doctor"
          [isDeleteVisible]="isDeleteVisible"
          [isEditVisible]="isEditVisible">
      </app-calendar>
      <div class="buttons">
          <button type="submit" class="edit-btn" (click)="toggleEdit()" ><img src="assets/calendaredit.svg" alt="">რედაქტირება</button>
          <button type="submit" class="dlt-btn" (click)="toggleDelete()"><img src="assets/calendardelete.svg" alt="">წაშლა</button>
      </div>
  </div>
</div>

<app-change-password-modal 
  *ngIf="showChangePasswordModal"
  (close)="toggleChangePasswordModal()">
</app-change-password-modal>

================
File: pages/doctor-profile/doctor-profile.component.ts
================
import { Component, OnInit } from '@angular/core';
import { count, finalize, Observable, Subscription } from 'rxjs';
import { AuthService } from '../../services/auth.service';
import { DoctorService } from '../../services/doctor.service';
import { ChangePasswordModalComponent } from '../../components/change-password-modal/change-password-modal.component';
import { AppointmentService } from '../../services/appointment.service';

@Component({
  selector: 'app-doctor-profile',
  templateUrl: './doctor-profile.component.html',
  styleUrl: './doctor-profile.component.css'
})
export class DoctorProfileComponent implements OnInit{
 
  isAuthenticated$! : Observable<boolean>;
  currentUser$! : Observable<any>;
  private photoSubscriptions = new Map<number, Subscription>();
  doctorPhotos = new Map<number, string>();
  loadingPhotos = new Set<number>();
  showChangePasswordModal = false;
  userId: number= 0;
  appointmentCount:number = 0;
  isDeleteVisible :boolean = false;
  isEditVisible : boolean = false;


  constructor(private authService: AuthService, private doctorService:DoctorService, private appointmentService:AppointmentService) {}

  ngOnInit() {
    this.isAuthenticated$ = this.authService.isAuthenticated();
    this.currentUser$ = this.authService.getCurrentUser();
    this.userId = Number(this.authService.getUserId());
    this.loadAppointmentCount();


  }

  toggleChangePasswordModal(){
    this.showChangePasswordModal = !this.showChangePasswordModal;
  }

  
  loadAppointmentCount(): void {
    this.appointmentService.getCurrentUserAppointmentCount().subscribe({
      next:(count)=>{
        this.appointmentCount = count;
      }
    });
  }

  toggleDelete(){
    this.isDeleteVisible = !this.isDeleteVisible;
  }
  toggleEdit(){
    this.isEditVisible = !this.isEditVisible;
  }
  
  loadDoctorPhoto(doctorId: number): void {
    if (this.photoSubscriptions.has(doctorId)) {
      return; 
    }

    this.loadingPhotos.add(doctorId);
    
    const subscription = this.doctorService.getDoctorPhoto(doctorId)
      .pipe(
        finalize(() => this.loadingPhotos.delete(doctorId))
      )
      .subscribe({
        next: (photoUrl) => {
          this.doctorPhotos.set(doctorId, photoUrl);
        },
        error: () => {
          this.doctorPhotos.set(doctorId, '/assets/default-doctor.png');
        }
      });

    this.photoSubscriptions.set(doctorId, subscription);
  }

  getDoctorPhoto(doctorId: number): string {
    if (!this.doctorPhotos.has(doctorId)) {
      this.loadDoctorPhoto(doctorId);
      return 'assets/png-clipart-anonymous-person-login-google-account-computer-icons-user-activity-miscellaneous-computer.png'; // Show placeholder while loading
    }
    return this.doctorPhotos.get(doctorId) || '/assets/default-doctor.png';
  }

  getStarsArray(rating: number): number[] {
    return Array(5).fill(0).map((_, i) => i < rating ? 1 : 0);
  }

  

 
}

================
File: pages/doctor-registration/doctor-registration.component.css
================
@import url("https://free.bboxtype.com/embedfonts/?family=FiraGO:200,300,400,500,600,700,800,900");

* {
    font-family: 'FiraGO', sans-serif;
    box-sizing: border-box;
    margin: 0;
    padding: 0;
}

input {
    width: 480px;
    border-radius: 50px;
    border: 1px solid #18a4e180;
    padding: 15px 25px;
}

label {
    margin-left: 20px;
    font-weight: 400;
}

.input {
    display: flex;
    flex-direction: column;
    gap: 10px;
}

.registration {
    padding: 20px 120px;
}

.remove {
    padding: 20px 0;
}

.header {
    margin: 30px 0;
    color: #18A4E1;
    font-weight: bold;
}

form {
    display: flex;
    flex-direction: column;
    gap: 20px;
    width: fit-content;
    margin-bottom: 100px;
}

.row1,
.row2,
.row3 {
    display: flex;
    flex-wrap: wrap;
    gap: 50px;
}

.file-input-wrapper {
    position: relative;
    width: 480px; 
}

.file-input-wrapper input[type="file"] {
    position: absolute;
    width: 0;
    height: 0;
    opacity: 0;
}

.custom-file-input {
    display: flex;
    align-items: center;
    gap: 10px;
    width: 100%;
    height: 52px; 
    padding: 0 25px;
    border: 1px solid #18a4e180;
    border-radius: 50px;
    cursor: pointer;
    transition: all 0.3s ease;
    background-color: white;
}

.custom-file-input:hover {
    background-color: #f8f9fa;
    border-color: #18a4e1;
}

.custom-file-input span {
    color: #053354;
    opacity: 0.5;
}


.input-container {
    width: 480px; 
}
#specialty {
    width: 480px;
    border-radius: 100px;
    border: 1px solid #18a4e180;
    padding: 15px 25px;
    background-color: white;
    font-size: 16px;
    -webkit-appearance: none;
    -moz-appearance: none;
    appearance: none;
    background-image: url("data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='%23053354' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3e%3cpolyline points='6 9 12 15 18 9'%3e%3c/polyline%3e%3c/svg%3e");
    background-repeat: no-repeat;
    background-position: right 15px center;
    background-size: 15px;
    cursor: pointer;
  }
  
  select:focus {
    outline: none;
    border-color: #18A4E1;
  }
  
  @media (max-width: 992px) {
    select {
      width: 100%;
    }
  }

.btn {
    align-self: flex-end;
    background-color: #053354;
    font-size: 16px;
    border: none;
    border-radius: 50px;
    padding: 15px 35px;
    color: white;
    cursor: pointer;
    transition: all 0.3s ease;
}

.btn:disabled {
    background-color: #cccccc;
    cursor: not-allowed;
}

.btn:hover:not(:disabled) {
    background-color: #18A4E1;
}

.error-message {
    color: #dc3545;
    font-size: 12px;
    margin-top: 5px;
    padding-left: 20px;
}

.error-alert {
    background-color: #f8d7da;
    color: #721c24;
    padding: 12px;
    border-radius: 4px;
    margin-bottom: 20px;
    text-align: center;
}

.spinner {
    position: absolute;
    right: 10px;
    top: 50%;
    transform: translateY(-50%);
    width: 20px;
    height: 20px;
    border: 2px solid #f3f3f3;
    border-top: 2px solid #18A4E1;
    border-radius: 50%;
    animation: spin 1s linear infinite;
}

@keyframes spin {
    0% { transform: translateY(-50%) rotate(0deg); }
    100% { transform: translateY(-50%) rotate(360deg); }
}

.is-pending {
    background-color: #f8f9fa;
    border-color: #18A4E1;
}

.is-invalid {
    border-color: #dc3545;
}

.error-messages {
    display: flex;
    flex-direction: column;
    gap: 4px;
}

@media (max-width: 1800px) {
    .registration {
        padding: 20px 60px;
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    form {
        max-width: 1000px;
        width: 100%;
    }

    .row1,
    .row2,
    .row3 {
        gap: 30px;
        justify-content: center;
    }

    .input-container,
    .file-input-wrapper {
        width: calc(33.333% - 20px);
        max-width: 480px;
    }

    input,
    .custom-file-input {
        width: 100%;
    }
    select{
        width: 100%;
    }
}

@media (max-width: 992px) {
    .registration {
        padding: 20px 40px;
    }

    form {
        max-width: 600px;
    }

    .row1,
    .row2,
    .row3 {
        flex-direction: column;
        gap: 20px;
    }

    .input-container,
    .file-input-wrapper {
        width: 100%;
    }

    .btn {
        align-self: center;
        margin-top: 20px;
    }
}

@media (max-width: 768px) {
    .registration {
        padding: 20px 20px;
    }

    .header {
        font-size: 24px;
        margin: 20px 0;
        text-align: center;
    }

    form {
        max-width: 480px;
    }

    input,
    .custom-file-input {
        padding: 12px 20px;
    }

    .btn {
        width: 100%;
        max-width: 300px;
    }
}

@media (max-width: 480px) {
    .registration {
        padding: 15px 15px;
    }

    .header {
        font-size: 20px;
    }

    label {
        margin-left: 15px;
    }

    input,
    .custom-file-input {
        padding: 10px 15px;
    }

    .btn {
        font-size: 14px;
        padding: 12px 25px;
    }
}

================
File: pages/doctor-registration/doctor-registration.component.html
================
<!-- doctor-registration.component.html -->
<div class="registration">
  <h2 class="header">რეგისტრაცია</h2>
  
  <div *ngIf="errorMessage" class="error-alert">
      {{ errorMessage }}
  </div>
  
  <form [formGroup]="registerForm" (ngSubmit)="onRegister()">
      <div class="row1">
          <div class="input-container">
              <div class="input">
                  <label for="firstName">სახელი</label>
                  <input type="text" id="firstName" formControlName="firstName" placeholder="(მინიმუმ 2 სიმბოლო)">
                  <div *ngIf="registerForm.get('firstName')?.invalid && registerForm.get('firstName')?.touched" 
                       class="error-message">
                     <span *ngIf="registerForm.get('firstName')?.errors?.['required']">სახელის ველის შევსება აუცილებელია</span>
                     <span *ngIf="registerForm.get('firstName')?.errors?.['maxlength']">სახელი უნდა იყოს მაქსიმუმ 15 სიმბოლო</span>
                     <span *ngIf="registerForm.get('firstName')?.errors?.['minlength']">სახელი უნდა იყოს მინიმუმ 2 სიმბოლო</span>
                  </div>
              </div>
          </div>
          <div class="input-container">
              <div class="input">
                  <label for="email">Email</label>
                  <div class="input-wrapper">
                      <input type="email" 
                             id="email" 
                             formControlName="email"
                             [class.is-pending]="email?.pending"
                             [class.is-invalid]="email?.errors && email?.touched">
                      <div class="spinner" *ngIf="email?.pending"></div>
                  </div>
                  <div class="error-messages">
                      <div *ngIf="email?.errors?.['required'] && email?.touched" 
                           class="error-message">
                          ელ-ფოსტის ველის შევსება სავალდებულოა
                      </div>
                      <div *ngIf="email?.errors?.['email'] && email?.touched" 
                           class="error-message">
                          გთხოვთ შეიყვანეთ ვალიდური ელ-ფოსტა
                      </div>
                      <div *ngIf="email?.errors?.['emailExists']" 
                           class="error-message">
                          ელ-ფოსტა უკვე გამოყენებულია
                      </div>
                  </div>
              </div>
          </div>
          <div class="input-container">
              <div class="input">
                  <label for="personalNumber">პირადი ნომერი</label>
                  <input type="text" id="personalNumber" formControlName="personalNumber" placeholder="00000000000">
                  <div *ngIf="registerForm.get('personalNumber')?.touched && getPersonalNumberError()" class="error-message">
                    {{ getPersonalNumberError() }}
                  </div>
              </div>
          </div>
      </div>

      <div class="row2">
          <div class="input-container">
              <div class="input">
                  <label for="lastName">გვარი</label>
                  <input type="text" id="lastName" formControlName="lastName">
                  <div *ngIf="registerForm.get('lastName')?.invalid && registerForm.get('lastName')?.touched" 
                       class="error-message">
                      <span *ngIf="registerForm.get('lastName')?.errors?.['required']">გვარის ველის შევსება აუცილებელია</span>
                      <span *ngIf="registerForm.get('lastName')?.errors?.['maxlength']">გვარი უნდა იყოს მაქსიმუმ 20 სიმბოლო</span>
                      <span *ngIf="registerForm.get('lastName')?.errors?.['minlength']">გვარი უნდა იყოს მინიმუმ 2 სიმბოლო</span>
                  </div>
              </div>
          </div>
          <div class="input-container">
            <div class="input">
                <label for="specialty">სპეციალობა</label>
                <select id="specialty" formControlName="specialty" 
                        class="form-control">
                    <option value="">აირჩიეთ სპეციალობა</option>
                    <option *ngFor="let specialty of specialties" 
                            [value]="specialty.name">
                        {{specialty.name}}
                    </option>
                </select>
                <div *ngIf="registerForm.get('specialty')?.invalid && registerForm.get('specialty')?.touched" 
                     class="error-message">
                    სპეციალობის არჩევა აუცილებელია
                </div>
            </div>
        </div>
          <div class="input-container">
              <div class="input">
                  <label for="password">პაროლი</label>
                  <input type="password" id="password" formControlName="password" placeholder="(მინიმუმ 8 სიმბოლო)">
                  <div *ngIf="registerForm.get('password')?.invalid && registerForm.get('password')?.touched" 
                       class="error-message">
                      <span *ngIf="registerForm.get('password')?.errors?.['required']">პაროლის ველის შევსება აუცილებელია</span>
                      <span *ngIf="registerForm.get('password')?.errors?.['minlength']">პაროლი უნდა შეიცავდეს მინიმუმ 8 სიმბოლოს</span>
                  </div>
              </div>
          </div>
      </div>

      <div class="row3">
        <div class="input-container">
          <div class="input">
              <label for="photo">ფოტო</label>
              <div class="file-upload-container">
                  <input type="file" 
                         id="photo" 
                         (change)="onPhotoSelected($event)"
                         accept="image/jpeg,image/png"
                         class="file-input">
                  
                
              </div>
          </div>
      </div>

      <div class="input-container">
          <div class="input">
              <label for="cv">CV</label>
              <div class="file-upload-container">
                  <input type="file" 
                         id="cv" 
                         (change)="onCVSelected($event)"
                         accept="application/pdf"
                         class="file-input">
                  
                  
               
                  
                  <div class="file-info">
                      <span>Allowed: PDF (max 10MB)</span>
                  </div>
              </div>
          </div>
      </div>
          </div>
  
          <button type="submit" class="btn" [disabled]="!registerForm.valid || isSubmitting">
              {{ isSubmitting ? 'მიმდინარეობს...' : 'რეგისტრაცია' }}
          </button>
      </form>
  </div>

================
File: pages/doctor-registration/doctor-registration.component.ts
================
import { Component } from '@angular/core';
import { AbstractControl, AsyncValidatorFn, FormBuilder, FormGroup, ValidationErrors, Validators } from '@angular/forms';
import { AuthService } from '../../services/auth.service';
import { Router } from '@angular/router';
import { catchError, debounceTime, map, Observable, of } from 'rxjs';
import { User } from '../../Models/Patient.model';

@Component({
  selector: 'app-doctor-registration',
  templateUrl: './doctor-registration.component.html',
  styleUrls: ['./doctor-registration.component.css']
})
export class DoctorRegistrationComponent {
  registerForm: FormGroup;
  errorMessage: string = '';
  isSubmitting: boolean = false;
  photoPreview: string | null = null;
  cvFileName: string | null = null;

  specialties = [
    { name: 'ნევროლოგი' }, { name: 'ოფთალმოლოგი' }, { name: 'დერმატოლოგი' },
    { name: 'ორთოპედი' }, { name: 'გინეკოლოგი' }, { name: 'ენდოკრინოლოგი' },
    { name: 'უროლოგი' }, { name: 'გასტროენტეროლოგი' }, { name: 'ოტორინოლარინგოლოგი' },
    { name: 'პულმონოლოგი' }, { name: 'რევმატოლოგი' }, { name: 'ონკოლოგი' },
    { name: 'ნეფროლოგი' }, { name: 'ჰემატოლოგი' }, { name: 'ალერგოლოგი' },
    { name: 'იმუნოლოგი' }, { name: 'ფსიქიატრი' }, { name: 'ნეიროქირურგი' }
  ];

  constructor(
    private fb: FormBuilder,
    private authService: AuthService,
    private router: Router
  ) {
    this.registerForm = this.fb.group({
      firstName: ['', [Validators.required, Validators.minLength(2), Validators.maxLength(15)]],
      lastName: ['', [Validators.required, Validators.minLength(2), Validators.maxLength(20)]],
      email: ['', [Validators.required, Validators.email], [this.emailExistsValidator()]],
      personalNumber: ['', [
        Validators.required,
        Validators.minLength(11),
        Validators.maxLength(11),
        Validators.pattern('^[0-9]*$')
      ]],
      password: ['', [Validators.required, Validators.minLength(8)]],
      specialty: ['', Validators.required],
      photo: [null, Validators.required],
      cv: [null, Validators.required]
    });
  }

  private emailExistsValidator(): AsyncValidatorFn {
    return (control: AbstractControl): Observable<ValidationErrors | null> => {
      if (!control.value || !control.value.trim() || control.hasError('email')) {
        return of(null);
      }

      return this.authService.checkEmailExists(control.value).pipe(
        debounceTime(300),
        map(exists => exists ? { emailExists: true } : null),
        catchError(() => of(null))
      );
    };
  }

  get email() { return this.registerForm.get('email'); }

  onPhotoSelected(event: Event): void {
    const file = (event.target as HTMLInputElement).files?.[0];
    if (file) {
      if (!file.type.match(/image\/(jpeg|png)/)) {
        this.errorMessage = 'Please select a valid image file (JPEG or PNG)';
        return;
      }
      if (file.size > 5 * 1024 * 1024) {
        this.errorMessage = 'Image size should not exceed 5MB';
        return;
      }

      this.registerForm.patchValue({ photo: file });
      

      const reader = new FileReader();
      reader.onload = (e) => {
        this.photoPreview = e.target?.result as string;
      };
      reader.readAsDataURL(file);
    }
  }

  onCVSelected(event: Event): void {
    const file = (event.target as HTMLInputElement).files?.[0];
    if (file) {
      if (file.type !== 'application/pdf') {
        this.errorMessage = 'Please select a valid PDF file';
        return;
      }
      if (file.size > 10 * 1024 * 1024) {
        this.errorMessage = 'CV size should not exceed 10MB';
        return;
      }

      this.registerForm.patchValue({ cv: file });
      this.cvFileName = file.name;
    }
  }

  onRegister(): void {
    if (this.registerForm.valid) {
      this.isSubmitting = true;
      this.errorMessage = '';

      const formData = new FormData();
      const formValue = this.registerForm.value;

      formData.append('photo', formValue.photo);
      formData.append('cv', formValue.cv);

      Object.keys(formValue).forEach(key => {
        if (key !== 'photo' && key !== 'cv') {
          formData.append(key, formValue[key]);
        }
      });

      this.authService.addDoctor(formData).subscribe({
        next: (response) => {
          console.log('Doctor registration successful:', response);
          this.router.navigate(['/main']);
        },
        error: (error) => {
          console.error('Registration error:', error);
          this.errorMessage = error.message || 'Registration failed';
          this.isSubmitting = false;
        },
        complete: () => {
          this.isSubmitting = false;
        }
      });
    }
 
  }
  getPersonalNumberError(): string | null {
    const control = this.registerForm.get('personalNumber');
    if (!control || !control.errors) return null;
  
    if (control.errors['required']) {
      return 'პირადი ნომრის ველის შევსება აუცილებელია';
    } else if (control.errors['minlength'] || control.errors['maxlength']) {
      return 'გთხოვთ შეიყვანეთ 11 ციფრი';
    } else if (control.errors['pattern']) {
      return 'გთხოვთ შეიყვანეთ მხოლოდ ციფრები';
    }
  
    return null;
  }
}

================
File: pages/main/main.component.css
================
.main-image {
  height: 600px;
  width: 100%;
  background-image: url("/assets/slider.png");
  background-repeat: no-repeat;
  background-size: cover;
  background-position: center;
}

.main-section {
  padding: 50px 120px;
  display: flex;
  gap: 70px;
}

.content-wrapper {
  display: flex;
  flex-direction: column;
  width: 100%;
}

.doctors {
  display: flex;
  flex-wrap: wrap;
  gap: 30px;
  transition: all 0.3s ease;
}

.see-all {
  align-self: flex-end;
  margin-top: 30px;
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 6px;
  cursor: pointer;
  transition: all 0.3s ease;
}

.see-all p {
  color: #053354;
  font-size: 14px;
  font-weight: 400;
  transition: color 0.3s ease;
}

.see-all:hover p {
  color: #18a4e1;
}

.see {
  width: 80px;
  height: 2px;
  background-color: #18a4e1;
  transition: width 0.3s ease;
}

.see-all:hover .see {
  width: 100px;
}

.card {
  display: flex;
  flex-direction: column;
  align-items: center;
  width: 390px;
  height: 390px;
  box-shadow: 0px 4px 30px 0px #0533540d;
  border: 1px solid #18a4e14d;
  border-radius: 10px;
  padding: 15px;
  transition: all 0.3s ease;
}

.card[data-pinned="true"] {
  border-color: #18A4E1;
  box-shadow: 0px 4px 30px 0px rgba(24, 164, 225, 0.1);
}

.views {
  display: flex;
  align-items: center;
  background-color: #ecf2f880;
  border-radius: 50px;
  gap: 10px;
  padding: 6px 15px;
  color: #05335480;
  align-self: flex-start;
}

.top {
  display: flex;
  justify-content: space-between;
  width: 100%;
}

.pin {
  cursor: pointer;
  transition: all 0.3s ease;
}

.pin:hover {
  transform: scale(1.1);
}

.pin.pinned {
  fill: #18A4E1;
}

.pinned {
  stroke: #18a4e1;
}

img {
  width: 157px;
  height: 157px;
  margin-bottom: 5px;
  border-radius: 50%;
  object-fit: cover;
}

h2 {
  color: #053354;
  font-size: 18px;
  font-weight: 400;
  margin-top: 10px;
}

.position {
  color: #0533544d;
  font-size: 16px;
  font-weight: 400;
  margin: 10px 0;
}

.book {
  display: flex;
  border: none;
  border-radius: 25px;
  background-color: #ecf2f8;
  padding: 15px 30px;
  align-items: center;
  gap: 5px;
  cursor: pointer;
  margin-top: 10px;
  transition: all 0.3s ease;
}

.book:hover {
  border: 1px solid #18a4e1;
  background-color: white;
  color: #18a4e1;
}

.book:hover svg {
  fill: #18a4e1;
}

.book p {
  font-size: 16px;
  font-weight: 400;
}

@media (max-width: 1600px) {
  .main-image {
      height: 600px;
      width: 100%;
      background-image: url("../../../assets/slider.png");
      background-repeat: no-repeat;
      background-size: cover;
      background-position: left center;
  }
  .main-section {
      padding: 50px 60px;
      flex-direction: column;
  }
  
  .doctors {
      justify-content: center;
  }
}

@media (max-width: 768px) {
  .main-image {
      height: 300px;
  }

  .main-section {
      padding: 30px 20px;
  }

  .card {
      width: 100%;
      max-width: 390px;
  }

  .doctors {
      gap: 20px;
  }

  .see-all {
      align-self: center;
  }
}

@media (max-width: 480px) {
  .main-image {
      height: 200px;
  }

  .card {
      height: auto;
      padding: 10px;
  }

  .book {
      width: 100%;
      justify-content: center;
  }
}

================
File: pages/main/main.component.html
================
<div class="main-image">
</div>

<div class="main-section">
    <app-categories class="categories" (categorySelected)="handleCategorySelected($event)"></app-categories>
    <div class="content-wrapper">
        <div class="doctors">
            <div class="card" *ngFor="let card of displayedDoctors" [attr.data-pinned]="card.isPinned">
                <div class="top">
                    <div class="views">
                        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="#053354" viewBox="0 0 256 256">
                            <path d="M251,123.13c-.37-.81-9.13-20.26-28.48-39.61C196.63,57.67,164,44,128,44S59.37,57.67,33.51,83.52C14.16,102.87,5.4,122.32,5,123.13a12.08,12.08,0,0,0,0,9.75c.37.82,9.13,20.26,28.49,39.61C59.37,198.34,92,212,128,212s68.63-13.66,94.48-39.51c19.36-19.35,28.12-38.79,28.49-39.61A12.08,12.08,0,0,0,251,123.13Zm-46.06,33C183.47,177.27,157.59,188,128,188s-55.47-10.73-76.91-31.88A130.36,130.36,0,0,1,29.52,128,130.45,130.45,0,0,1,51.09,99.89C72.54,78.73,98.41,68,128,68s55.46,10.73,76.91,31.89A130.36,130.36,0,0,1,226.48,128,130.45,130.45,0,0,1,204.91,156.12ZM128,84a44,44,0,1,0,44,44A44.05,44.05,0,0,0,128,84Zm0,64a20,20,0,1,1,20-20A20,20,0,0,1,128,148Z"></path>
                        </svg>
                        <p>127123</p>
                    </div>
                    <button style="background-color: transparent; border: none;">
                    <svg class="pin" width="24" height="24" viewBox="0 0 24 24" fill="none"
                        [class.pinned]="card.isPinned"
                        (click)="togglePin(card.doctorId,$event)"   
                        xmlns="http://www.w3.org/2000/svg">
                        <path d="M23.7 11.3L12.7 0.300049L11.3 1.70005L12.7 3.10005L7.39999 8.40005C5.49999 8.50005 3.79999 9.30005 2.39999 10.7L1.69999 11.4L6.39999 16.1L0.299988 22.3L1.69999 23.7001L7.89999 17.5L12.7 22.4L13.4 21.7001C14.8 20.4001 15.6 18.6 15.7 16.7001L21 11.4L22.3 12.7L23.7 11.3ZM13.6 15.8V16.2C13.6 17.4 13.3 18.5 12.6 19.5L4.49999 11.4C5.49999 10.7 6.59999 10.3 7.69999 10.3H8.09999L14 4.40005L19.5 9.90005L13.6 15.8Z" fill="#ECF2F8"/>
                    </svg></button>
                </div>

                <img [src]="getDoctorPhoto(card.doctorId)" alt="{{card.firstName}} {{card.lastName}}">
                <h2>{{card.firstName}} {{card.lastName}}</h2>
                <p class="position">{{card.specialty}}</p>
                <div class="start">
                    <ng-container *ngFor="let filled of getStarsArray(card.rating)">
                        <svg xmlns="http://www.w3.org/2000/svg" 
                             width="17" 
                             height="17"
                             [attr.fill]="filled ? '#FFD233' : '#ECF2F8'" 
                             viewBox="0 0 256 256">
                            <path d="M234.5,114.38l-45.1,39.36,13.51,58.6a16,16,0,0,1-23.84,17.34l-51.11-31-51,31a16,16,0,0,1-23.84-17.34L66.61,153.8,21.5,114.38a16,16,0,0,1,9.11-28.06l59.46-5.15,23.21-55.36a15.95,15.95,0,0,1,29.44,0h0L166,81.17l59.44,5.15a16,16,0,0,1,9.11,28.06Z"></path>
                        </svg>
                    </ng-container>
                </div>
                <button class="book" [routerLink]="['/book-appointment/'+card.doctorId]">
                    <p>მიღებაზე ჩაწერა</p>
                    <svg xmlns="http://www.w3.org/2000/svg" width="17" height="17" viewBox="0 0 256 256">
                        <path d="M181.66,133.66l-80,80a8,8,0,0,1-11.32-11.32L164.69,128,90.34,53.66a8,8,0,0,1,11.32-11.32l80,80A8,8,0,0,1,181.66,133.66Z"></path>
                    </svg>
                </button>
            </div>
        </div>
        
        <div class="see-all" *ngIf="allDoctors.length > CARDS_PER_PAGE">
            <button style="background-color: transparent; border: none; cursor: pointer;">
            <p (click)="toggleShowAll()">{{ showAllDoctors ? 'ნაკლების ნახვა' : 'ყველას ნახვა' }}</p>
            </button><div class="see"></div>
        </div>
    </div>
</div>

================
File: pages/main/main.component.ts
================
import { Component, OnInit, OnDestroy } from '@angular/core';
import { DoctorService } from '../../services/doctor.service';
import { DoctorCard } from '../../Models/doctorCard.model';
import { combineLatest, finalize, Subscription } from 'rxjs';
import { AuthService } from '../../services/auth.service';

@Component({
  selector: 'app-main',
  templateUrl: './main.component.html',
  styleUrl: './main.component.css'
})
export class MainComponent implements OnInit, OnDestroy {
  displayedDoctors: DoctorCard[] = [];
  allDoctors: DoctorCard[] = [];
  showAllDoctors: boolean = false;
  readonly CARDS_PER_PAGE = 6;
  private subscription: Subscription = new Subscription();
  private photoSubscriptions = new Map<number, Subscription>();
  doctorPhotos = new Map<number, string>();
  loadingPhotos = new Set<number>();
 


  constructor(public doctorService: DoctorService, private authService:AuthService) {}

  ngOnInit(): void {
    this.subscription.add(
      combineLatest([
        this.authService.getCurrentUser(),
        this.doctorService.getFilteredCards()
      ]).subscribe(([user, doctors]) => {
        this.allDoctors = doctors;
        this.updateDisplayedDoctors();
      })
    );

    this.loadDoctors();
  }
  

  ngOnDestroy(): void {
    
      this.subscription.unsubscribe();
      this.photoSubscriptions.forEach(sub => sub.unsubscribe());
      this.photoSubscriptions.clear();
      this.doctorService.clearPhotoCache();
    
  }
  loadDoctorPhoto(doctorId: number): void {
    if (this.photoSubscriptions.has(doctorId)) {
      return; 
    }

    this.loadingPhotos.add(doctorId);
    
    const subscription = this.doctorService.getDoctorPhoto(doctorId)
      .pipe(
        finalize(() => this.loadingPhotos.delete(doctorId))
      )
      .subscribe({
        next: (photoUrl) => {
          this.doctorPhotos.set(doctorId, photoUrl);
        },
        error: () => {
          this.doctorPhotos.set(doctorId, '/assets/default-doctor.png');
        }
      });

    this.photoSubscriptions.set(doctorId, subscription);
  }

  getDoctorPhoto(doctorId: number): string {
    if (!this.doctorPhotos.has(doctorId)) {
      this.loadDoctorPhoto(doctorId);
      return 'assets/png-clipart-anonymous-person-login-google-account-computer-icons-user-activity-miscellaneous-computer.png'; // Show placeholder while loading
    }
    return this.doctorPhotos.get(doctorId) || '/assets/default-doctor.png';
  }
  
  private loadDoctors(): void {
    this.subscription.add(
      this.doctorService.getDoctorCard().subscribe()
    );
  }

  private updateDisplayedDoctors(): void {
    this.displayedDoctors = this.showAllDoctors 
      ? this.allDoctors 
      : this.allDoctors.slice(0, this.CARDS_PER_PAGE);
  }

  toggleShowAll() {
    this.showAllDoctors = !this.showAllDoctors;
    this.updateDisplayedDoctors();
  }

  togglePin(doctorId: number, event: Event): void {
    event.stopPropagation();
    if (!this.authService.getUserId()) {
      return;
    }
    this.doctorService.togglePin(doctorId);
  }
  handleCategorySelected(category: string | null) {
    this.showAllDoctors = false;
    this.doctorService.filterBySpecialty(category);
  }

  getStarsArray(rating: number): number[] {
    return Array(5).fill(0).map((_, i) => i < rating ? 1 : 0);
  }


  

}

================
File: pages/registration/registration.component.css
================
@import url("https://free.bboxtype.com/embedfonts/?family=FiraGO:200,300,400,500,600,700,800,900");

* {
  font-family: 'FiraGO', sans-serif;
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

input {
  width: 480px;
  border-radius: 50px;
  border: 1px solid #18a4e180;
  padding: 15px 25px;
}

label {
  margin-left: 20px;
  font-weight: 400;
}

.input {
  display: flex;
  flex-direction: column;
  gap: 10px;
}

.registration {
  padding: 20px 120px;
}

.remove {
  padding: 20px 0;
}

.header {
  margin: 30px 0;
  color: #18A4E1;
  font-weight: bold;
}

form {
  display: flex;
  flex-direction: column;
  gap: 20px;
  width: fit-content;
  margin-bottom: 100px;
}

.row1,
.row2 {
  display: flex;
  flex-wrap: wrap;
  gap: 50px;
}

.btn {
  align-self: flex-end;
  background-color: #053354;
  font-size: 16px;
  border: none;
  border-radius: 50px;
  padding: 15px 35px;
  color: white;
  cursor: pointer;
}

.btn:disabled {
  background-color: #cccccc;
  cursor: not-allowed;
}

.error-message {
  color: #ff0000;
  font-size: 12px;
  margin-top: 5px;
}

@media (max-width: 1800px) {
  .registration {
    padding: 20px 60px;
    display: flex;
    flex-direction: column;
    align-items: center;
  }

  form {
    max-width: 1000px;
    width: 100%;
  }

  .row1,
  .row2 {
    gap: 30px;
    justify-content: center;
  }

  .input-container {
    width: calc(33.333% - 20px);
    max-width: 480px;
  }

  input {
    width: 100%;
  }
}

@media (max-width: 992px) {
  .registration {
    padding: 20px 40px;
  }

  form {
    max-width: 600px;
  }

  .row1,
  .row2 {
    flex-direction: column;
    gap: 20px;
  }

  .input-container {
    width: 100%;
  }

  .btn {
    align-self: center;
    margin-top: 20px;
  }
}

@media (max-width: 768px) {
  .registration {
    padding: 20px 20px;
  }

  .header {
    font-size: 24px;
    margin: 20px 0;
    text-align: center;
  }

  form {
    max-width: 480px;
  }

  input {
    padding: 12px 20px;
  }

  .btn {
    width: 100%;
    max-width: 300px;
  }
}

@media (max-width: 480px) {
  .registration {
    padding: 15px 15px;
  }

  .header {
    font-size: 20px;
  }

  label {
    margin-left: 15px;
  }

  input {
    padding: 10px 15px;
  }

  .btn {
    font-size: 14px;
    padding: 12px 25px;
  }
}

.input-wrapper {
  position: relative;
  width: 100%;
  display: flex;
  align-items: center;
}

.input-wrapper input {
  padding-right: 120px; 
}


.send-email-btn {
  position: absolute;
  right: 5px;
  top: 50%;
  transform: translateY(-50%);
  color: white;
  background-color: transparent;
  border: none;
  border-radius: 25px;
  padding: 8px 20px;
  font-size: 14px;
  cursor: pointer;
  transition: background-color 0.3s ease;
  z-index: 2;
}

.spinner {
  position: absolute;
  right: 10px;
  top: 50%;
  transform: translateY(-50%);
  width: 20px;
  height: 20px;
  border: 2px solid #f3f3f3;
  border-top: 2px solid #3498db;
  border-radius: 50%;
  animation: spin 1s linear infinite;
}

@keyframes spin {
  0% { transform: translateY(-50%) rotate(0deg); }
  100% { transform: translateY(-50%) rotate(360deg); }
}

.is-pending {
  background-color: #f8f9fa;
  border-color: #007bff;
}

.is-invalid {
  border-color: #dc3545;
}

.error-messages {
  margin-top: 5px;
}

.error-message {
  color: #dc3545;
  font-size: 12px;
  margin-top: 2px;
}

================
File: pages/registration/registration.component.html
================
<div class="registration">
    <h2 class="header">რეგისტრაცია</h2>
    <div *ngIf="errorMessage" class="error-alert">
        {{ errorMessage }}
    </div>
    <form [formGroup]="registerForm" (ngSubmit)="onRegister()">
        <div class="row1">
            <div class="input-container">
                <div class="input">
                    <label for="firstName">სახელი</label>
                    <input type="text" id="firstName" formControlName="firstName" placeholder="(მინიმუმ 2 სიმბოლო)">
                    <div *ngIf="registerForm.get('firstName')?.invalid && registerForm.get('firstName')?.touched" class="error-message">
                        <span *ngIf="registerForm.get('firstName')?.errors?.['required']">სახელის ველის შევსება აუცილებელია</span>
                        <span *ngIf="registerForm.get('firstName')?.errors?.['minlength']">სახელი უნდა შეიცავდეს მინიმუმ 2 სიმბოლოს</span>
                        <span *ngIf="registerForm.get('firstName')?.errors?.['maxlength']">სახელი უნდა შეიცავდეს მაქსიმუმ 15 სიმბოლოს</span>
                      </div>
                      
                </div>
            </div>
            <div class="input-container">
                <div class="input">
                    <label for="email">Email</label>
                    <div class="input-wrapper">
                        <input 
                          type="email" 
                          id="email" 
                          formControlName="email"
                          [class.is-pending]="email?.pending"
                          [class.is-invalid]="email?.errors && email?.touched"
                        >
                        <button 
                        type="button" 
                        class="send-email-btn"
                        [disabled]="!email?.valid || email?.pending"
                        (click)="sendEmailVerification()"
                    >
                    <svg width="20" height="17" viewBox="0 0 20 17" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path fill-rule="evenodd" clip-rule="evenodd" d="M2.33333 0.333336C1.55376 0.333336 0.872333 0.724361 0.453604 1.3066C0.167283 1.70473 0 2.19583 0 2.72223V11.2778C0 12.5683 1.01637 13.6667 2.33333 13.6667H8.5C8.96025 13.6667 9.33333 13.2936 9.33333 12.8333C9.33333 12.3731 8.96025 12 8.5 12H2.33333C1.99345 12 1.66667 11.7055 1.66667 11.2778V3.62305L6.4829 8.92467C7.47488 10.0166 9.19175 10.0166 10.1838 8.92467L15 3.62305V7.11108C15 7.57133 15.3731 7.94442 15.8333 7.94442C16.2936 7.94442 16.6667 7.57133 16.6667 7.11108V2.72223C16.6667 2.19584 16.4994 1.70473 16.2131 1.3066C15.7943 0.724361 15.1129 0.333336 14.3333 0.333336H2.33333ZM7.71653 7.80392L2.44392 2H14.2228L8.95017 7.80392C8.6195 8.16792 8.04718 8.16792 7.71653 7.80392ZM15.2441 14.7441C14.9187 15.0695 14.9187 15.5972 15.2441 15.9226C15.5695 16.248 16.0972 16.248 16.4226 15.9226L18.9226 13.4226C19.248 13.0972 19.248 12.5695 18.9226 12.2441L16.4226 9.74409C16.0972 9.41867 15.5695 9.41867 15.2441 9.74409C14.9187 10.0695 14.9187 10.5972 15.2441 10.9226L16.3215 12H12.5C12.0398 12 11.6667 12.3731 11.6667 12.8333C11.6667 13.2936 12.0398 13.6667 12.5 13.6667H16.3215L15.2441 14.7441Z" fill="#053354"/>
                        </svg>
                        
                    </button>
                       
                      </div>
                      
                      <div class="error-messages">
                        <div *ngIf="email?.errors?.['required'] && email?.touched" 
                             class="error-message">
                          ელ-ფოსტის ველის შევსება აუცილებელია
                        </div>
                        <div *ngIf="email?.errors?.['email'] && email?.touched" 
                             class="error-message">
                          გთხოვთ შეიყვანეთ ვალიდური ელ-ფოსტა
                        </div>
                        <div *ngIf="email?.errors?.['emailExists']" 
                             class="error-message">
                          ელ-ფოსტა უკვე გამოყენებულია
                        </div>
                      </div>
                </div>
            </div>
            <div class="input-container">
                <div class="input">
                    <label for="personalNumber">პირადი ნომერი</label>
                    <input type="text" id="personalNumber" formControlName="personalNumber" placeholder="00000000000">
                    <div *ngIf="registerForm.get('personalNumber')?.touched && getPersonalNumberError()" class="error-message">
                        {{ getPersonalNumberError() }}
                      </div>
                </div>
            </div>
        </div>
        <div class="row2">
            <div class="input-container">
                <div class="input">
                    <label for="lastName">გვარი</label>
                    <input type="text" id="lastName" formControlName="lastName">
                    <div *ngIf="registerForm.get('lastName')?.invalid && registerForm.get('lastName')?.touched" 
                         class="error-message">
                        <span *ngIf="registerForm.get('lastName')?.errors?.['required']">გვარის ველის შევსება აუცილებელია</span>
                        <span *ngIf="registerForm.get('lastName')?.errors?.['minlength']">გვარი უნდა შეიცავდეს მინიმუმ 2 სიმბოლოს</span>
                        <span *ngIf="registerForm.get('lastName')?.errors?.['maxlength']">გვარი უნდა შეიცავდეს მაქსიმუმ 20 სიმბოლოს</span>
                    </div>
                </div>
            </div>
            <div class="input-container" *ngIf="isVerificationSent">
                <div class="input">
                  <label for="verificationCode">აქტივაციის კოდი</label>
                  <input 
                    type="text" 
                    id="verificationCode" 
                    formControlName="verificationCode"
                    placeholder="შეიყვანეთ 6-ნიშნა კოდი"
                  >
                  <div *ngIf="verificationCode?.errors && verificationCode?.touched" 
                       class="error-message">
                    კოდის შეყვანა სავალდებულოა
                  </div>
                </div>
              </div>
            <div class="input-container">
                <div class="input">
                    <label for="password">პაროლი</label>
                    <input type="password" id="password" formControlName="password" placeholder="(მინიმუმ 8 სიმბოლო)">
                    <div *ngIf="registerForm.get('password')?.invalid && registerForm.get('password')?.touched" 
                         class="error-message">
                        <span *ngIf="registerForm.get('password')?.errors?.['required']">პაროლის ველის შევსება აუცილებელია</span>
                        <span *ngIf="registerForm.get('password')?.errors?.['minlength']">გთხოვთ შეიყვანეთ მინიმუმ 8 სიმბოლო</span>
                    </div>
                </div>
            </div>
        </div>
        <button type="submit" class="btn" [disabled]="!registerForm.valid || isSubmitting">
            {{ isSubmitting ? 'მიმდინარეობს...' : 'რეგისტრაცია' }}
        </button>
    </form>
</div>

================
File: pages/registration/registration.component.ts
================
import { Component } from '@angular/core';
import { AbstractControl, FormBuilder, FormGroup, ValidationErrors, Validators } from '@angular/forms';
import { AuthService } from '../../services/auth.service';
import { Router } from '@angular/router';
import { catchError, debounceTime, first, map, Observable, of, switchMap } from 'rxjs';
import { validateHorizontalPosition } from '@angular/cdk/overlay';


@Component({
  selector: 'app-registration',
  templateUrl: './registration.component.html',
  styleUrls: ['./registration.component.css']
})
export class RegistrationComponent {
  registerForm: FormGroup;
  errorMessage: string = '';
  isSubmitting: boolean = false;
  isVerificationSent: boolean = false;

  constructor(
    private fb: FormBuilder,
    private authService: AuthService,
    private router: Router
  ) {
    this.registerForm = this.fb.group({
      firstName: ['', [Validators.required, Validators.minLength(2), Validators.maxLength(15)]],
      lastName: ['', [Validators.required, Validators.minLength(2), Validators.maxLength(20)] ],
      email: ['', [Validators.required, Validators.email], [this.emailExistsValidator()]],
      personalNumber: ['', [
        Validators.required,
        Validators.minLength(11),
        Validators.maxLength(11),
        Validators.pattern('^[0-9]*$')
      ]],
      password: ['', [Validators.required, Validators.minLength(8)]],
      verificationCode: ['']
    });

    this.registerForm.get('verificationCode')?.setValidators([
      Validators.required,
      Validators.minLength(6),
      Validators.maxLength(6),
      Validators.pattern('^[0-9]*$')
    ]);
  }

  private emailExistsValidator() {
    return (control: AbstractControl): Observable<ValidationErrors | null> => {
      if (!control.value || !control.value.trim() || control.hasError('email')) {
        return of(null);
      }

      return control.valueChanges.pipe(
        debounceTime(1000),
        switchMap(value => 
          this.authService.checkEmailExists(value).pipe(
            map(exists => exists ? { emailExists: true } : null),
            catchError(() => of(null))
          )
        ),
        first()
      );
    };
  }

  get email() { return this.registerForm.get('email'); }
  get verificationCode() { return this.registerForm.get('verificationCode'); }

  isFormValid(): boolean {
    return this.registerForm.valid && 
           (!this.isVerificationSent || (this.verificationCode?.valid ?? false));
}

  sendEmailVerification() {
    if (this.email?.valid) {
      this.isSubmitting = true;
      this.errorMessage = '';

      this.authService.sendVerificationCode(this.email.value).subscribe({
        next: () => {
          this.isVerificationSent = true;
          this.isSubmitting = false;
          alert('გთხოვთ შეამოწმოთ თქვენი ელ-ფოსტა ვერიფიკაციის კოდისთვის');
        },
        error: (error) => {
          this.errorMessage = 'ვერიფიკაციის კოდის გაგზავნა ვერ მოხერხდა';
          this.isSubmitting = false;
          console.error('Error sending verification code:', error);
        }
      });
    }
  }

  async onRegister() {
    if (this.isFormValid()) {
      this.isSubmitting = true;
      this.errorMessage = '';

      try {
        if (this.isVerificationSent) {
          
          await this.authService
            .verifyCode(this.email?.value, this.verificationCode?.value)
            .toPromise();
        }

        const userData = {
          userId: 0,
          firstName: this.registerForm.value.firstName,
          lastName: this.registerForm.value.lastName,
          email: this.registerForm.value.email,
          personalNumber: this.registerForm.value.personalNumber,
          password: this.registerForm.value.password,
          role: 'PATIENT'
        };

        await this.authService.addUser(userData).toPromise();
        
        alert('რეგისტრაცია წარმატებით დასრულდა!');
        this.router.navigate(['/main']);
      } catch (error: any) {
        console.error('Registration error:', error);
        this.errorMessage = error.message || 'Registration failed';
      } finally {
        this.isSubmitting = false;
      }
    } else {
      this.errorMessage = 'გთხოვთ შეავსოთ ყველა სავალდებულო ველი';
    }
  }

  getPersonalNumberError(): string | null {
    const control = this.registerForm.get('personalNumber');
    if (!control || !control.errors) return null;
  
    if (control.errors['required']) {
      return 'პირადი ნომრის ველის შევსება აუცილებელია';
    } else if (control.errors['minlength'] || control.errors['maxlength']) {
      return 'გთხოვთ შეიყვანეთ 11 ციფრი';
    } else if (control.errors['pattern']) {
      return 'გთხოვთ შეიყვანეთ მხოლოდ ციფრები';
    }
  
    return null;
  }
}

================
File: pages/user-profile/user-profile.component.css
================
.user-prof {
    padding: 40px 5%;
    display: flex;
    gap: 30px;
    max-width: 100%;
    margin: 0 auto;
    overflow-x: hidden;
    justify-content: center;
}

.buttons {
    display: flex;
    gap: 30px;
    margin-top: 30px;
    float: right;
    font-size: 18px;
}

.edit-btn, .dlt-btn {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 8px;
    height: 50px;
    border-radius: 50px;
    border: none;
    cursor: pointer;
}

.edit-btn {
    width: 230px;
    background-color: #ECF2F8;
    color: #18A4E1;
}

.dlt-btn {
    width: 170px;
    background-color: #FF93A6;
    color: white;
}

.edit-btn img, .dlt-btn img {
    width: 26px;
    height: 26px;
}

h2 {
    margin-bottom: 56px;
    color: #18A4E1;
    font-size: 26px;
}

.main-content {
    display: flex;
    justify-content: space-between;
    padding: 20px;
    background-color: #f5f5f5;
    width: 100%;
  
}

.user-profile {
    background-color: white;
    border-radius: 10px;
    padding: 30px;  
    width: 366px;
    min-width: 300px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    text-align: center;
}

.user-image {
    width: 150px;
    height: 150px;
    border-radius: 50%;
    
    object-fit: cover;
}

.user-name {
    font-size: 24px;
    margin-bottom: 15px; 
}

.user-specialty {
    color: #18A4E1;
    margin-bottom: 25px; 
    font-size: 16px;
    padding: 5px 0;  
}

.rating {
    color: #FFD700;
    font-size: 20px;
    margin-bottom: 25px; 
}

.contact-info {
    margin-bottom: 25px; 
    display: flex;
    flex-direction: column;
    gap: 15px;  
}

.phone, .email {
    margin: 10px 0; 
    color: #053354;
    padding: 5px 0;  
}

h5 {
    margin: 10px 0 25px; 
    word-break: break-word;
    color: #B4C2CC;
    line-height: 1.5;  
}

.experience{
    cursor: pointer;
}

.experience, .appointments {
    margin: 20px 0; 
    color: #666;
    transition: color 0.3s ease;
    padding: 5px 0;  
}

.experience:hover, .appointments:hover {
    color: #333;
}

.appointments span {
    font-weight: bold;
    color: #333;
    margin-left: 8px;  
}

.calendar-section {
    background-color: transparent;
  
}

@media (max-width: 1400px) {
    .user-prof {
        max-width: 1208px;
    }
    
    .calendar-section {
        width: 700px;
    }
}

@media (max-width: 1200px) {
    .user-prof {
        padding: 20px 3%;
    }

    .calendar-section {
        width: 600px;
    }

    .user-profile {
        width: 320px;
        min-width: 280px;
        padding: 25px;  
    }
}

@media (max-width: 992px) {
    .user-prof {
        flex-direction: column;
        align-items: center;
        gap: 25px; 
    }

    .user-profile {
        width: 100%;
        max-width: 500px;
    }

    .calendar-section {
        width: 100%;
        max-width: 800px;
    }

    app-categories {
        width: 100%;
        max-width: 800px;
    }
}

@media (max-width: 768px) {
    .user-prof {
        padding: 15px 2%;
    }

    .user-profile {
        padding: 20px;  
    }

    .user-image {
        width: 120px;
        height: 120px;
        margin-bottom: 20px;  
    }

    .user-name {
        font-size: 20px;
    }

    .user-specialty {
        font-size: 14px;
        margin-bottom: 20px;  
    }
}

@media (max-width: 480px) {
    .user-prof {
        padding: 10px;
        gap: 15px;
    }

    .user-profile {
        padding: 15px;  
    }

    .user-image {
        width: 100px;
        height: 100px;
        margin-bottom: 15px;  
    }

    .calendar-section {
        padding: 15px;
    }

    .contact-info {
        font-size: 14px;
        margin-bottom: 20px;  
        gap: 10px; 
    }

    h5 {
        font-size: 14px;
        margin: 8px 0 20px;  
    }
}

================
File: pages/user-profile/user-profile.component.html
================
<div class="user-prof">
   
    <div class="user-profile">
        <img src="assets\png-clipart-anonymous-person-login-google-account-computer-icons-user-activity-miscellaneous-computer.png" alt="anon" class="user-image">
        <p class="user-specialty">მომხმარებელი</p>
        <div class="contact-info">
          <div *ngIf="currentUser$|async as user">
          <p class="phone">პირადი ნომერი : </p>
          <h5>{{user.personalNumber}}</h5>
          <p class="email">Email : </p>
          <h5>{{user.email}}</h5>
        </div>
        <p class="experience" (click)="toggleChangePasswordModal()">პაროლის შეცვლა</p>
        <p class="appointments">ჯავშანი: <br><h5>( {{appointmentCount$ | async}} )</h5></p>
      </div>
    </div>
      
      <div class="calendar-section">
        <h2>ჩემი ჯავშანი <label style="color: #0533544D;">( {{appointmentCount$ | async}} )</label></h2>

        <app-calendar 
        [doctorId]="doctorId"
        viewMode="patient"
        [isDeleteVisible]="isDeleteVisible"
        [isEditVisible]="isEditVisible">
    </app-calendar>    
  <div class="buttons">
          <button type="submit" class="edit-btn" (click)="toggleEdit()" ><img src="assets/calendaredit.svg" alt="">რედაქტირება</button>
          <button type="submit" class="dlt-btn" (click)="toggleDelete()"><img src="assets/calendardelete.svg" alt="">წაშლა</button>
    </div>
  
  </div>

    
</div>

<app-change-password-modal 
  *ngIf="showChangePasswordModal"
  (close)="toggleChangePasswordModal()">
</app-change-password-modal>

================
File: pages/user-profile/user-profile.component.ts
================
import { Component, OnInit } from '@angular/core';
import { AuthService } from '../../services/auth.service';
import { Observable } from 'rxjs';
import { AppointmentService } from '../../services/appointment.service';

@Component({
  selector: 'app-user-profile',
  templateUrl: './user-profile.component.html',
  styleUrl: './user-profile.component.css'
})
export class UserProfileComponent implements OnInit {

  isAuthenticated$! : Observable<boolean>;
  userId :number|null = null;
  currentUser$! : Observable<any>;
  showChangePasswordModal = false;
  doctorId :number = 0;
  appointmentCount:number = 0;
  isEditVisible : boolean = false;
  isDeleteVisible:boolean = false;
  appointmentCount$! : Observable<number>;

  
  constructor(private authService: AuthService,     private appointmentService: AppointmentService) {}
 

  

  ngOnInit() {
    this.isAuthenticated$ = this.authService.isAuthenticated();
    this.currentUser$ = this.authService.getCurrentUser();
    this.userId = Number(this.authService.getUserId());
    this.doctorId = Number(this.authService.getUserId());
    this.toggleAppointmentCount();
    this.appointmentCount$ = this.appointmentService.appointmentCount$;
    this.appointmentService.getCurrentUserAppointmentCount().subscribe();
    
  }

  toggleDelete(){
    this.isDeleteVisible = !this.isDeleteVisible;
    console.log(this.isDeleteVisible);
  }
  toggleEdit(){
    this.isEditVisible = !this.isEditVisible;
  }

  toggleChangePasswordModal() {
    this.showChangePasswordModal = !this.showChangePasswordModal;
  }

  toggleAppointmentCount(){
    this.appointmentService.getCurrentUserAppointmentCount().subscribe({
      next:(count)=>{
        this.appointmentCount = count;
      }
    });
  }
}

================
File: services/appointment.service.ts
================
import { Injectable } from '@angular/core';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { BehaviorSubject, Observable, of, throwError } from 'rxjs';
import { catchError, map, tap } from 'rxjs/operators';
import { API_CONFIG } from '../config/api.config';

export interface Appointment {
  appointmentId: number;
  doctorId: number;
  patientId: number;
  appointmentDate: Date;
  timeSlot: string;
  description?: string;
  isBlocked: boolean;
  doctorFirstName?: string;
  doctorLastName?: string;
  doctorSpecialty?: string;
  patientFirstName?: string;
  patientLastName?: string;
}

export interface TimeSlot {
  timeSlot: string;
  isAvailable: boolean;
  isBlocked: boolean;
  patientId?: number;
}

export interface CreateAppointmentDto {
  doctorId: number;
  appointmentDate: Date;
  timeSlot: string;
  description?: string;
}

@Injectable({
  providedIn: 'root'
})
export class AppointmentService {
  
  private patientAppointmentsSubject = new BehaviorSubject<Appointment[]>([]);
  private doctorAppointmentsSubject = new BehaviorSubject<Appointment[]>([]);
  private appointmentCountSubject = new BehaviorSubject<number>(0);
  appointmentCount$ = this.appointmentCountSubject.asObservable();

  constructor(private http: HttpClient) {}
  
  getCurrentUserAppointmentCount(): Observable<number> {
    return this.http.get<any>(`${API_CONFIG.baseUrl}${API_CONFIG.endpoints.appointment.base}${API_CONFIG.endpoints.appointment.count}`)
      .pipe(
        tap(count => {
          this.appointmentCountSubject.next(count);
        })
      );
  }

  getSelectedDoctorAppointmentCount(doctorId:number):Observable<number>{
    return this.http.get<any>(`${API_CONFIG.baseUrl}${API_CONFIG.endpoints.appointment.base}${API_CONFIG.endpoints.appointment.count}/${doctorId}`)
    .pipe(
      tap(count=>{
        this.appointmentCountSubject.next(count);
      })
    )
  }
  
  createAppointment(appointmentData: CreateAppointmentDto): Observable<any> {
    return this.http.post(`${API_CONFIG.baseUrl}${API_CONFIG.endpoints.appointment.base}${API_CONFIG.endpoints.appointment.book}`, appointmentData).pipe(
      tap(() => {
        this.loadPatientAppointments();
      }),
      catchError(this.handleError)
    );
  }

  blockTimeSlot(date: Date, timeSlot: string): Observable<any> {
    return this.http.post(`${API_CONFIG.baseUrl}${API_CONFIG.endpoints.appointment.base}${API_CONFIG.endpoints.appointment.blockTime}`, { appointmentDate: date, timeSlot }).pipe(
      tap(() => {
        this.loadDoctorAppointments();
      }),
      catchError(this.handleError)
    );
  }

  loadDoctorAppointments(): Observable<Appointment[]> {
    return this.http.get<Appointment[]>(`${API_CONFIG.baseUrl}${API_CONFIG.endpoints.appointment.base}${API_CONFIG.endpoints.appointment.loadDoc}`).pipe(
      tap(appointments => this.doctorAppointmentsSubject.next(appointments)),
      catchError(this.handleError)
    );
  }

   // Get appointments for doctor (non-logged in)
   loadDoctorAppointmentsFromUser(id:number): Observable<Appointment[]> {
    return this.http.get<Appointment[]>(`${API_CONFIG.baseUrl}${API_CONFIG.endpoints.appointment.base}${API_CONFIG.endpoints.appointment.loadDoc}/${id}`).pipe(
      tap(appointments => this.doctorAppointmentsSubject.next(appointments)),
      catchError(this.handleError)
    );
  }

  loadPatientAppointments(): Observable<Appointment[]> {
    return this.http.get<Appointment[]>(`${API_CONFIG.baseUrl}${API_CONFIG.endpoints.appointment.base}${API_CONFIG.endpoints.appointment.loadPat}`).pipe(
      tap(appointments => this.patientAppointmentsSubject.next(appointments)),
      catchError(this.handleError)
    );
  }

  updateAppointmentDescription(appointmentId: number, description: string): Observable<any> {
    return this.http.put(`${API_CONFIG.baseUrl}${API_CONFIG.endpoints.appointment.base}/${appointmentId}${API_CONFIG.endpoints.appointment.update}`, { description }).pipe(
      tap(() => {
       
        this.loadPatientAppointments();
        this.loadDoctorAppointments();
      }),
      catchError(this.handleError)
    );
  }
  

  deleteAppointment(appointmentId: number): Observable<any> {
    return this.http.delete(`${API_CONFIG.baseUrl}${API_CONFIG.endpoints.appointment.base}${API_CONFIG.endpoints.appointment.delete}/${appointmentId}`).pipe(
      tap(() => {

        const currentCount = this.appointmentCountSubject.value;
        this.appointmentCountSubject.next(currentCount - 1);

        this.loadPatientAppointments();
        this.loadDoctorAppointments();
        
      }),
      catchError(this.handleError)
    );
  }

  getAvailableSlots(doctorId: number, date: Date): Observable<TimeSlot[]> {
    const formattedDate = this.formatDate(date);
    return this.http.get<TimeSlot[]>(
      `${API_CONFIG.baseUrl}${API_CONFIG.endpoints.appointment.base}${API_CONFIG.endpoints.appointment.available}${doctorId}?date=${formattedDate}`
    ).pipe(
      catchError(this.handleError)
    );
  }

  checkSlotAvailability(doctorId: number, date: Date, timeSlot: string): Observable<boolean> {
    const formattedDate = this.formatDate(date);
    return this.http.get<{isAvailable: boolean}>(
      `${API_CONFIG.baseUrl}${API_CONFIG.endpoints.appointment.base}${API_CONFIG.endpoints.appointment.slotAvailable}${doctorId}?date=${formattedDate}&timeSlot=${timeSlot}`
    ).pipe(
      map(response => response.isAvailable),
      catchError(this.handleError)
    );
  }

  getDoctorAppointments(): Observable<Appointment[]> {
    return this.doctorAppointmentsSubject.asObservable();
  }

  getPatientAppointments(): Observable<Appointment[]> {
    return this.patientAppointmentsSubject.asObservable();
  }

  private formatDate(date: Date): string {
    return date.toISOString().split('T')[0];
  }

  private handleError(error: HttpErrorResponse) {
    let errorMessage = 'An error occurred';

    if (error.error instanceof ErrorEvent) {
      errorMessage = error.error.message;
    } else {
      switch (error.status) {
        case 400:
          errorMessage = error.error?.message || 'Invalid appointment data';
          break;
        case 401:
          errorMessage = 'You must be logged in to manage appointments';
          break;
        case 403:
          errorMessage = 'You do not have permission to perform this action';
          break;
        case 404:
          errorMessage = 'Appointment not found';
          break;
        case 409:
          errorMessage = 'This time slot is already booked';
          break;
        case 422:
          errorMessage = 'Cannot book appointment in the past';
          break;
        case 503:
          errorMessage = 'Service temporarily unavailable';
          break;
        default:
          errorMessage = 'An error occurred while processing your request';
      }
    }

    return throwError(() => new Error(errorMessage));
  }
}

================
File: services/auth.service.ts
================
import { Injectable } from '@angular/core';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { BehaviorSubject, Observable, throwError } from 'rxjs';
import { tap, catchError, map } from 'rxjs/operators';
import { Router } from '@angular/router';
import { jwtDecode } from 'jwt-decode';
import { PasswordChangeDto, UserLoginDto } from '../Models/Login.model';
import { User } from '../Models/Patient.model';
import { API_CONFIG } from '../config/api.config';

interface EmailCheckResponse {
  exists: boolean;
}

interface EmailVerificationRequest {
  email: string;
  verificationCode?: string;
}

@Injectable({
  providedIn: 'root'
})
export class AuthService {
  private isAuthenticatedSubject = new BehaviorSubject<boolean>(false);
  private currentUserSubject = new BehaviorSubject<any>(null);

  constructor(
    private http: HttpClient,
    private router: Router
  ) {
    this.initializeFromToken();
  }

  private initializeFromToken() {
    const token = localStorage.getItem('Token');
    if (token) {
      this.isAuthenticatedSubject.next(true);
      const decodedToken = this.getDecodedToken();
      if (decodedToken?.nameid) {
        this.fetchUserDetails(decodedToken.nameid).subscribe({
          next: (user) => this.currentUserSubject.next(user),
          error: () => this.logout()
        });
      }
    }
  }

  authenticate(loginData: UserLoginDto): Observable<any> {
    return this.http.post<any>(
      `${API_CONFIG.baseUrl}${API_CONFIG.endpoints.user.base}${API_CONFIG.endpoints.user.authenticate}`,
      loginData
    ).pipe(
      tap(response => {
        if (response?.accessToken) {
          localStorage.setItem('Token', response.accessToken);
          this.isAuthenticatedSubject.next(true);
          this.initializeFromToken();
        }
      }),
    
    );
  }
  
  requestPasswordReset(email: string): Observable<any> {
    const body = { email: email };
    return this.http.post(
      `${API_CONFIG.baseUrl}${API_CONFIG.endpoints.user.base}${API_CONFIG.endpoints.user.forgotPassword}`,
      body
    );
  }

  
  changePassword(currentPassword: string, newPassword: string, confirmPassword: string): Observable<any> {
    const payload: PasswordChangeDto = {
      currentPassword,
      newPassword,
      confirmPassword
    };

    return this.http.put(
      `${API_CONFIG.baseUrl}${API_CONFIG.endpoints.user.base}${API_CONFIG.endpoints.user.changePassword}`,
      payload
    );
  }
  

  sendVerificationCode(email: string): Observable<any> {
    return this.http.post(`${API_CONFIG.baseUrl}/Verification/send`, { email })
      .pipe(
        catchError(this.handleError)
      );
  }

  verifyCode(email: string, verificationCode: string): Observable<any> {
    return this.http.post(`${API_CONFIG.baseUrl}/Verification/verify`, {
      email,
      verificationCode
    }).pipe(
      catchError(this.handleError)
    );
  }

  checkEmailExists(email: string): Observable<boolean> {
    return this.http.get<EmailCheckResponse>(
      `${API_CONFIG.baseUrl}${API_CONFIG.endpoints.user.base}${API_CONFIG.endpoints.user.checkEmail}/${email}`
    ).pipe(
      map(response => response.exists),
      catchError(() => {
        return throwError(() => new Error('Unable to verify email. Please try again.'));
      })
    );
  }

  addUser(user: User): Observable<any> {
    return this.http.post<any>(
      `${API_CONFIG.baseUrl}${API_CONFIG.endpoints.patient.base}${API_CONFIG.endpoints.patient.register}`,
      user
    ).pipe(
      catchError(this.handleError)
    );
  }

  addDoctor(formData: FormData): Observable<any> {
    return this.http.post<any>(
      `${API_CONFIG.baseUrl}${API_CONFIG.endpoints.doctor.base}${API_CONFIG.endpoints.doctor.register}`,
      formData
    ).pipe(
      catchError((error: HttpErrorResponse) => {
        if (error.status === 409) {
          return throwError(() => new Error('This doctor is already registered'));
        }
        if (error.status === 413) {
          return throwError(() => new Error('The uploaded files are too large'));
        }
        return throwError(() => new Error('Doctor registration failed. Please try again later.'));
      })
    );
  }

  private fetchUserDetails(userId: string): Observable<any> {
    return this.http.get<any>(
      `${API_CONFIG.baseUrl}${API_CONFIG.endpoints.user.base}${API_CONFIG.endpoints.user.info}/${userId}`
    ).pipe(
      catchError(this.handleError)
    );
  }

  private handleError(error: HttpErrorResponse) {
    let errorMessage = 'An error occurred. Please try again later.';

    if (error.error instanceof ErrorEvent) {
      errorMessage = error.error.message;
    } else {
      switch (error.status) {
        case 400:
          errorMessage = error.error?.message || 'Invalid request';
          break;
        case 401:
          errorMessage = 'Unauthorized: Please login again';
          break;
        case 403:
          errorMessage = 'You do not have permission to perform this action';
          break;
        case 404:
          errorMessage = 'Resource not found';
          break;
        case 409:
          errorMessage = 'This email is already registered';
          break;
        case 422:
          errorMessage = 'Invalid verification code';
          break;
      }
    }

    return throwError(() => new Error(errorMessage));
  }


  logout(): void {
    localStorage.removeItem('Token');
    this.isAuthenticatedSubject.next(false);
    this.currentUserSubject.next(null);
    this.router.navigate(['/main']);
  }

  isAuthenticated(): Observable<boolean> {
    return this.isAuthenticatedSubject.asObservable();
  }

  getCurrentUser(): Observable<any> {
    return this.currentUserSubject.asObservable();
  }

  private getDecodedToken(): any {
    const token = localStorage.getItem('Token');
    return token ? jwtDecode(token) : null;
  }

  getUserId(): string | null {
    const decodedToken = this.getDecodedToken();
    return decodedToken?.nameid || null;
  }

  getUserPatientId():string|null{
    const decodedToken = this.getDecodedToken();
    return decodedToken?.PatientId || null;
  }

  getUserDoctorId():string|null{
    const decodedToken = this.getDecodedToken();
    return decodedToken?.DoctorId || null;
  }

  getRole(): string | null {
    const decodedToken = this.getDecodedToken();
    return decodedToken?.role || null;
  }

  isPatient(): boolean {
    return this.getRole() === 'Patient';
  }

  isDoctor(): boolean {
    return this.getRole() === 'Doctor';
  }

  isAdmin(): boolean {
    return this.getRole() === 'Admin';
  }
}

================
File: services/doctor.service.ts
================
import { Injectable } from '@angular/core';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { BehaviorSubject, Observable, of, Subscription, throwError } from 'rxjs';
import { tap, map, catchError } from 'rxjs/operators';
import { DoctorCard } from '../Models/doctorCard.model';
import { API_CONFIG } from '../config/api.config';
import { AuthService } from './auth.service';

interface UserPinnedDoctors {
  [userId: string]: number[];
}


@Injectable({
  providedIn: 'root'
})
export class DoctorService {
  private readonly PINNED_DOCTORS_KEY = 'userPinnedDoctors';
  private _cards: DoctorCard[] = [];
  private filteredCardsSubject = new BehaviorSubject<DoctorCard[]>([]);
  private currentFilter: string | null = null;
  private authSubscription:Subscription;
  private photoCache = new Map<number, string>();

  constructor(
    private http: HttpClient,
    private authService: AuthService
  ) {
    this.authSubscription = this.authService.getCurrentUser().subscribe(()=>{
      if(this._cards.length>0){
        this.cardsList = [...this._cards]; 
      }
    });
    
  }

  getCategoryCount(categoryName:string):Observable<number>{
    return this.http.get<any>(`https://localhost:7226/api/Doctor/GetSpecialtyCount/specialty-count/${categoryName}`)
  }

  ngOnDestroy(){
    if(this.authSubscription){
      this.authSubscription.unsubscribe();
    }
  }

  get cardsList(): DoctorCard[] {
    return this._cards;
  }

  set cardsList(list: DoctorCard[]) {
    this._cards = this.applyUserPins(list);
    this.applyCurrentFilter();
  }

  // getDoctorCard(): Observable<DoctorCard[]> {
  //   return this.http.get<DoctorCard[]>(
  //     `${API_CONFIG.baseUrl}${API_CONFIG.endpoints.doctor.base}${API_CONFIG.endpoints.doctor.cards}`
  //   ).pipe(
  //     map(doctors => this.applyUserPins(doctors)),
  //     tap(data => {
  //       this._cards = data;
  //       this.applyCurrentFilter();
  //     })
  //   );
  // }
   // Add a cache to store doctor photos

  //  updateDoctor(doctorId: number, formData: FormData): Observable<any> {
  //   return this.http.put<any>(
  //     `${API_CONFIG.baseUrl}${API_CONFIG.endpoints.doctor.base}${API_CONFIG.endpoints.doctor.update}/${doctorId}`,
  //     formData
  //   ).pipe(
  //     catchError((error: HttpErrorResponse) => {
  //       if (error.status === 409) {
  //         return throwError(() => new Error('This email is already in use'));
  //       }
  //       if (error.status === 413) {
  //         return throwError(() => new Error('The uploaded files are too large'));
  //       }
  //       return throwError(() => new Error('Failed to update doctor information'));
  //     })
  //   );
  // }

  updateDoctor(doctorId: number, formData: FormData): Observable<any> {
    return this.http.put<any>(
      `${API_CONFIG.baseUrl}${API_CONFIG.endpoints.doctor.base}${API_CONFIG.endpoints.doctor.update}/${doctorId}`,
      formData
    ).pipe(
      map(response => {
        return { success: true, message: 'Doctor information updated successfully' };
      }),
      catchError((error: HttpErrorResponse) => {
        if (error.status === 409) {
          return throwError(() => new Error('This email is already in use'));
        }
        if (error.status === 413) {
          return throwError(() => new Error('The uploaded files are too large'));
        }
        const errorMessage = error.error?.message || 'Failed to update doctor information';
        return throwError(() => new Error(errorMessage));
      })
    );
  }
  
   extractCvText(doctorId: number): Observable<string> {
    return this.http.post<{ text: string }>(
      `${API_CONFIG.baseUrl}${API_CONFIG.endpoints.doctor.base}${API_CONFIG.endpoints.doctor.cv}/${doctorId}`,
      {}
    ).pipe(
      map(response => response.text),
      catchError(error => {
        console.error('Error extracting CV text:', error);
        return throwError(() => new Error('Failed to extract CV text. Please try again later.'));
      })
    );
  }

   
   getDoctorPhoto(id: number): Observable<string> {
     if (this.photoCache.has(id)) {
       return of(this.photoCache.get(id)!);
     }
 
     return this.http.get(
       `${API_CONFIG.baseUrl}${API_CONFIG.endpoints.doctor.base}/GetDoctorPhoto/photo/${id}`, 
       { responseType: 'blob' }
     ).pipe(
       tap(blob => {
         const imageUrl = URL.createObjectURL(blob);
         this.photoCache.set(id, imageUrl);
       }),
       map(blob => {
         return URL.createObjectURL(blob);
       }),
       catchError(error => {
         console.error(`Error loading photo for doctor ${id}:`, error);
         return of('assets/png-clipart-anonymous-person-login-google-account-computer-icons-user-activity-miscellaneous-computer.png');
       })
     );
   }
 
   clearPhotoCache(): void {
     this.photoCache.forEach(url => URL.revokeObjectURL(url));
     this.photoCache.clear();
   }

    getDoctorCard(): Observable<DoctorCard[]> {
      return this.http.get<DoctorCard[]>(`${API_CONFIG.baseUrl}${API_CONFIG.endpoints.doctor.base}${API_CONFIG.endpoints.doctor.cards}`)
        .pipe(
          map(doctors => this.applyUserPins(doctors)),
          tap(data => {
            this._cards = data;
            this.applyCurrentFilter();
          }),
          catchError((error: HttpErrorResponse) => {
            console.error('Error fetching doctor cards:', error);
            return throwError(() => new Error('Failed to load doctor cards. Please try again later.'));
          })
        );
    }
  
    getDoctorById(id: number): Observable<DoctorCard> {
      return this.http.get<DoctorCard>(
        `${API_CONFIG.baseUrl}${API_CONFIG.endpoints.doctor.base}${API_CONFIG.endpoints.doctor.byId}/${id}`
      ).pipe(
        map(doctor => {
          const currentUserId = this.authService.getUserId();
          if (!currentUserId) return doctor;
  
          const userPinnedDoctors = this.getUserPinnedDoctors();
          const userPins = new Set(userPinnedDoctors[currentUserId] || []);
          
          return {
            ...doctor,
            isPinned: userPins.has(doctor.doctorId)
          };
        }),
          catchError((error: HttpErrorResponse) => {
            console.error('Error fetching doctor by ID:', error);
            return throwError(() => new Error('Failed to load doctor details. Please try again later.'));
          })
        );
    }
  
    deleteDoctorById(id: number): Observable<any> {
      return this.http.delete(`${API_CONFIG.baseUrl}${API_CONFIG.endpoints.doctor.base}${API_CONFIG.endpoints.doctor.delete}/${id}`)
        .pipe(
          tap(() => this.handleDoctorDeletion(id)),
          catchError((error: HttpErrorResponse) => {
            console.error('Error deleting doctor:', error);
            return throwError(() => new Error('Failed to delete doctor. Please try again later.'));
          })
        );
    }

  private applyUserPins(doctors: DoctorCard[]): DoctorCard[] {
    const currentUserId = this.authService.getUserId();
    if (!currentUserId) return doctors;

    const userPinnedDoctors = this.getUserPinnedDoctors();
    const userPins = new Set(userPinnedDoctors[currentUserId] || []);

    return doctors.map(doctor => ({
      ...doctor,
      isPinned: userPins.has(doctor.doctorId)
    }));
  }

  // getDoctorById(id: number): Observable<DoctorCard> {
  //   return this.http.get<DoctorCard>(
  //     `${API_CONFIG.baseUrl}${API_CONFIG.endpoints.doctor.base}${API_CONFIG.endpoints.doctor.byId}/${id}`
  //   ).pipe(
  //     map(doctor => {
  //       const currentUserId = this.authService.getUserId();
  //       if (!currentUserId) return doctor;

  //       const userPinnedDoctors = this.getUserPinnedDoctors();
  //       const userPins = new Set(userPinnedDoctors[currentUserId] || []);
        
  //       return {
  //         ...doctor,
  //         isPinned: userPins.has(doctor.doctorId)
  //       };
  //     })
  //   );
  // }

  // deleteDoctorById(id: number): Observable<any> {
  //   return this.http.delete(
  //     `${API_CONFIG.baseUrl}${API_CONFIG.endpoints.doctor.base}${API_CONFIG.endpoints.doctor.delete}/${id}`
  //   ).pipe(
  //     tap(() => {
  //       this.handleDoctorDeletion(id);
  //     })
  //   );
  // }

  private handleDoctorDeletion(id: number): void {
    const currentUserId = this.authService.getUserId();
    if (currentUserId) {
      const userPinnedDoctors = this.getUserPinnedDoctors();
      if (userPinnedDoctors[currentUserId]) {
        userPinnedDoctors[currentUserId] = userPinnedDoctors[currentUserId].filter(
          pinnedId => pinnedId !== id
        );
        localStorage.setItem(this.PINNED_DOCTORS_KEY, JSON.stringify(userPinnedDoctors));
      }
    }

    this._cards = this._cards.filter(card => card.doctorId !== id);
    this.applyCurrentFilter();
  }

  togglePin(doctorId: number): void {
    const currentUserId = this.authService.getUserId();
    if (!currentUserId) return;

    const userPinnedDoctors = this.getUserPinnedDoctors();
    const userPins = userPinnedDoctors[currentUserId] || [];
    
    if (userPins.includes(doctorId)) {
      userPinnedDoctors[currentUserId] = userPins.filter(id => id !== doctorId);
    } else {
      userPinnedDoctors[currentUserId] = [...userPins, doctorId];
    }

    localStorage.setItem(this.PINNED_DOCTORS_KEY, JSON.stringify(userPinnedDoctors));

    this._cards = this._cards.map(card => {
      if (card.doctorId === doctorId) {
        return { ...card, isPinned: !card.isPinned };
      }
      return card;
    });

    this.applyCurrentFilter();
  }

  private applyCurrentFilter(): void {
    const currentUserId = this.authService.getUserId();
    let cardsToFilter = this._cards;

    if (currentUserId) {
      const userPinnedDoctors = this.getUserPinnedDoctors();
      const userPins = new Set(userPinnedDoctors[currentUserId] || []);
      
      cardsToFilter = this._cards.map(card => ({
        ...card,
        isPinned: userPins.has(card.doctorId)
      }));
    }

    const filteredCards = this.currentFilter
      ? cardsToFilter.filter(doctor => 
          doctor.specialty.toLowerCase() === this.currentFilter!.toLowerCase())
      : cardsToFilter;

    const sortedCards = [...filteredCards].sort((a, b) => {
      if (a.isPinned === b.isPinned) return 0;
      return a.isPinned ? -1 : 1;
    });

    this.filteredCardsSubject.next(sortedCards);
  }

  filterBySpecialty(specialty: string | null): void {
    this.currentFilter = specialty;
    this.applyCurrentFilter();
  }

  getFilteredCards(): Observable<DoctorCard[]> {
    return this.filteredCardsSubject.asObservable();
  }

  private getUserPinnedDoctors(): UserPinnedDoctors {
    const pinnedDoctors = localStorage.getItem(this.PINNED_DOCTORS_KEY);
    return pinnedDoctors ? JSON.parse(pinnedDoctors) : {};
  }
}

================
File: services/search.service.ts
================
import { Injectable } from '@angular/core';
import { BehaviorSubject, Observable, combineLatest } from 'rxjs';
import { DoctorCard } from '../Models/doctorCard.model';
import { DoctorService } from './doctor.service';
import { debounceTime, distinctUntilChanged, map } from 'rxjs/operators';

@Injectable({
  providedIn: 'root'
})
export class SearchService {
  private nameSearchSubject = new BehaviorSubject<string>('');
  private specialtySearchSubject = new BehaviorSubject<string>('');
  private showDropdownSubject = new BehaviorSubject<boolean>(false);
  private searchResultsSubject = new BehaviorSubject<DoctorCard[]>([]);

  constructor(private doctorService: DoctorService) {
    combineLatest([
      this.nameSearchSubject.pipe(
        debounceTime(300),
        distinctUntilChanged()
      ),
      this.specialtySearchSubject.pipe(
        debounceTime(300),
        distinctUntilChanged()
      ),
      this.doctorService.getFilteredCards()
    ]).subscribe(([nameSearch, specialtySearch, doctors]) => {
      const results = this.filterDoctors(doctors, nameSearch, specialtySearch);
      this.searchResultsSubject.next(results);
      this.showDropdownSubject.next(results.length > 0 && (nameSearch.length > 0 || specialtySearch.length > 0));
    });
  }

  private filterDoctors(doctors: DoctorCard[], nameSearch: string, specialtySearch: string): DoctorCard[] {
    return doctors.filter(doctor => {
      const fullName = `${doctor.firstName} ${doctor.lastName}`.toLowerCase();
      const specialty = doctor.specialty.toLowerCase();
      const nameMatch = nameSearch ? fullName.includes(nameSearch.toLowerCase()) : true;
      const specialtyMatch = specialtySearch ? specialty.includes(specialtySearch.toLowerCase()) : true;
      return nameMatch && specialtyMatch;
    });
  }

  setNameSearch(term: string) {
    this.nameSearchSubject.next(term);
  }

  setSpecialtySearch(term: string) {
    this.specialtySearchSubject.next(term);
  }

  getNameSearch(): Observable<string> {
    return this.nameSearchSubject.asObservable();
  }

  getSpecialtySearch(): Observable<string> {
    return this.specialtySearchSubject.asObservable();
  }

  getSearchResults(): Observable<DoctorCard[]> {
    return this.searchResultsSubject.asObservable();
  }

  getShowDropdown(): Observable<boolean> {
    return this.showDropdownSubject.asObservable();
  }

  closeDropdown() {
    this.showDropdownSubject.next(false);
  }
}

================
File: services/visibility.service.ts
================
import { Injectable } from '@angular/core';
import { NavigationEnd, Router } from '@angular/router';
import { BehaviorSubject, filter } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class VisibilityService {
  private visibilitySource = new BehaviorSubject<boolean>(false);
  private editVisibilitySource = new BehaviorSubject<boolean>(false);
  
  isVisible$ = this.visibilitySource.asObservable();
  isEditVisible$ = this.editVisibilitySource.asObservable();

  constructor(private router: Router) {
    this.router.events.pipe(
      filter(event => event instanceof NavigationEnd)
    ).subscribe((event: any) => {
      if (!event.url.includes('/admin/profile/')) {
        this.setVisibility(false);
        this.editVisibilitySource.next(false);
      }
    });
  }

  toggleVisibility() {
    this.visibilitySource.next(!this.visibilitySource.value);
  }

  setVisibility(value: boolean) {
    this.visibilitySource.next(value);
    if (!value) {
      this.editVisibilitySource.next(false);
    }
  }

  toggleEditVisibility() {
    this.editVisibilitySource.next(!this.editVisibilitySource.value);
  }
}

This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-11-11T10:24:44.000Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
.editorconfig
.gitignore
angular.json
package.json
README.md
src/app/app-routing.module.ts
src/app/app.component.css
src/app/app.component.html
src/app/app.component.ts
src/app/app.module.ts
src/app/components/calendar/calendar.component.css
src/app/components/calendar/calendar.component.html
src/app/components/calendar/calendar.component.ts
src/app/components/categories/categories.component.css
src/app/components/categories/categories.component.html
src/app/components/categories/categories.component.ts
src/app/components/doctor-profile-card/doctor-profile-card.component.css
src/app/components/doctor-profile-card/doctor-profile-card.component.html
src/app/components/doctor-profile-card/doctor-profile-card.component.ts
src/app/components/footer/footer.component.css
src/app/components/footer/footer.component.html
src/app/components/footer/footer.component.ts
src/app/components/header/header.component.css
src/app/components/header/header.component.html
src/app/components/header/header.component.ts
src/app/components/login-pop-up/login-pop-up.component.css
src/app/components/login-pop-up/login-pop-up.component.html
src/app/components/login-pop-up/login-pop-up.component.ts
src/app/config/api.config.ts
src/app/custom-preloading-strategy.ts
src/app/guards/admin.guard.ts
src/app/guards/auth.guard.ts
src/app/guards/doctor.guard.ts
src/app/guards/no-auth.guard.ts
src/app/guards/patient.guard.ts
src/app/interceptors/auth.interceptor.ts
src/app/Models/doctorCard.model.ts
src/app/Models/Login.model.ts
src/app/Models/Patient.model.ts
src/app/modules/admin/admin-routing.module.ts
src/app/modules/admin/admin.module.ts
src/app/modules/doctor/admin-routing.ts
src/app/modules/doctor/doctor.module.ts
src/app/modules/patient/patient-routing.ts
src/app/modules/patient/patient.module.ts
src/app/modules/registration/registration-routing.modue.ts
src/app/modules/registration/registration.module.ts
src/app/modules/shared/shared.module.ts
src/app/pages/admin-categories/admin-categories.component.css
src/app/pages/admin-categories/admin-categories.component.html
src/app/pages/admin-categories/admin-categories.component.ts
src/app/pages/admin-profile/admin-profile.component.css
src/app/pages/admin-profile/admin-profile.component.html
src/app/pages/admin-profile/admin-profile.component.ts
src/app/pages/book-appointment/book-appointment.component.css
src/app/pages/book-appointment/book-appointment.component.html
src/app/pages/book-appointment/book-appointment.component.ts
src/app/pages/doctor-profile/doctor-profile.component.css
src/app/pages/doctor-profile/doctor-profile.component.html
src/app/pages/doctor-profile/doctor-profile.component.ts
src/app/pages/doctor-registration/doctor-registration.component.css
src/app/pages/doctor-registration/doctor-registration.component.html
src/app/pages/doctor-registration/doctor-registration.component.ts
src/app/pages/main/main.component.css
src/app/pages/main/main.component.html
src/app/pages/main/main.component.ts
src/app/pages/registration/registration.component.css
src/app/pages/registration/registration.component.html
src/app/pages/registration/registration.component.ts
src/app/pages/user-profile/user-profile.component.css
src/app/pages/user-profile/user-profile.component.html
src/app/pages/user-profile/user-profile.component.ts
src/app/services/appointment.service.ts
src/app/services/auth.service.ts
src/app/services/doctor.service.ts
src/app/services/search.service.ts
src/app/services/visibility.service.ts
src/index.html
src/main.ts
src/styles.css
tsconfig.app.json
tsconfig.json
tsconfig.spec.json

================================================================
Repository Files
================================================================

================
File: .editorconfig
================
# Editor configuration, see https://editorconfig.org
root = true

[*]
charset = utf-8
indent_style = space
indent_size = 2
insert_final_newline = true
trim_trailing_whitespace = true

[*.ts]
quote_type = single

[*.md]
max_line_length = off
trim_trailing_whitespace = false

================
File: .gitignore
================
# See https://docs.github.com/get-started/getting-started-with-git/ignoring-files for more about ignoring files.

# Compiled output
/dist
/tmp
/out-tsc
/bazel-out

# Node
/node_modules
npm-debug.log
yarn-error.log

# IDEs and editors
.idea/
.project
.classpath
.c9/
*.launch
.settings/
*.sublime-workspace

# Visual Studio Code
.vscode/*
!.vscode/settings.json
!.vscode/tasks.json
!.vscode/launch.json
!.vscode/extensions.json
.history/*

# Miscellaneous
/.angular/cache
.sass-cache/
/connect.lock
/coverage
/libpeerconnection.log
testem.log
/typings

# System files
.DS_Store
Thumbs.db

================
File: angular.json
================
{
  "$schema": "./node_modules/@angular/cli/lib/config/schema.json",
  "version": 1,
  "newProjectRoot": "projects",
  "projects": {
    "clinic-app": {
      "projectType": "application",
      "schematics": {
        "@schematics/angular:component": {
          "standalone": false
        },
        "@schematics/angular:directive": {
          "standalone": false
        },
        "@schematics/angular:pipe": {
          "standalone": false
        }
      },
      "root": "",
      "sourceRoot": "src",
      "prefix": "app",
      "architect": {
        "build": {
          "builder": "@angular-devkit/build-angular:application",
          "options": {
            "outputPath": "dist/clinic-app",
            "index": "src/index.html",
            "browser": "src/main.ts",
            "polyfills": [
              "zone.js"
            ],
            "tsConfig": "tsconfig.app.json",
            "assets": [
                "src/favicon.ico",
                "src/assets",
              {
                
                "glob": "**/*",
                "input": "public"
              }
            ],
            "styles": [
             
              "src/styles.css"
            ],
            "scripts": []
          },
          "configurations": {
            "production": {
              "budgets": [
                {
                  "type": "initial",
                  "maximumWarning": "500kB",
                  "maximumError": "1MB"
                },
                {
                  "type": "anyComponentStyle",
                  "maximumWarning": "2kB",
                  "maximumError": "4kB"
                }
              ],
              "outputHashing": "all"
            },
            "development": {
              "optimization": false,
              "extractLicenses": false,
              "sourceMap": true
            }
          },
          "defaultConfiguration": "production"
        },
        "serve": {
          "builder": "@angular-devkit/build-angular:dev-server",
          "configurations": {
            "production": {
              "buildTarget": "clinic-app:build:production"
            },
            "development": {
              "buildTarget": "clinic-app:build:development"
            }
          },
          "defaultConfiguration": "development"
        },
        "extract-i18n": {
          "builder": "@angular-devkit/build-angular:extract-i18n"
        },
        "test": {
          "builder": "@angular-devkit/build-angular:karma",
          "options": {
            "polyfills": [
              "zone.js",
              "zone.js/testing"
            ],
            "tsConfig": "tsconfig.spec.json",
            "assets": [
              {
                "glob": "**/*",
                "input": "public"
              }
            ],
            "styles": [
              
              "src/styles.css"
            ],
            "scripts": []
          }
        }
      }
    }
  },
  "cli": {
    "analytics": false
  }
}

================
File: package.json
================
{
  "name": "clinic-app",
  "version": "0.0.0",
  "scripts": {
    "ng": "ng",
    "start": "ng serve",
    "build": "ng build",
    "watch": "ng build --watch --configuration development",
    "test": "ng test"
  },
  "private": true,
  "dependencies": {
    "@angular/animations": "^18.2.0",
    "@angular/cdk": "^18.2.8",
    "@angular/common": "^18.2.0",
    "@angular/compiler": "^18.2.0",
    "@angular/core": "^18.2.0",
    "@angular/forms": "^18.2.0",
    "@angular/material": "^18.2.8",
    "@angular/platform-browser": "^18.2.0",
    "@angular/platform-browser-dynamic": "^18.2.0",
    "@angular/router": "^18.2.0",
    "jwt-decode": "^4.0.0",
    "primeng": "^17.18.11",
    "rxjs": "~7.8.0",
    "tslib": "^2.3.0",
    "zone.js": "~0.14.10"
  },
  "devDependencies": {
    "@angular-devkit/build-angular": "^18.2.4",
    "@angular/cli": "^18.2.4",
    "@angular/compiler-cli": "^18.2.0",
    "@types/jasmine": "~5.1.0",
    "jasmine-core": "~5.2.0",
    "karma": "~6.4.0",
    "karma-chrome-launcher": "~3.2.0",
    "karma-coverage": "~2.2.0",
    "karma-jasmine": "~5.1.0",
    "karma-jasmine-html-reporter": "~2.1.0",
    "typescript": "~5.5.2"
  }
}

================
File: README.md
================
# ClinicApp

This project was generated with [Angular CLI](https://github.com/angular/angular-cli) version 18.2.4.

## Development server

Run `ng serve` for a dev server. Navigate to `http://localhost:4200/`. The application will automatically reload if you change any of the source files.

## Code scaffolding

Run `ng generate component component-name` to generate a new component. You can also use `ng generate directive|pipe|service|class|guard|interface|enum|module`.

## Build

Run `ng build` to build the project. The build artifacts will be stored in the `dist/` directory.

## Running unit tests

Run `ng test` to execute the unit tests via [Karma](https://karma-runner.github.io).

## Running end-to-end tests

Run `ng e2e` to execute the end-to-end tests via a platform of your choice. To use this command, you need to first add a package that implements end-to-end testing capabilities.

## Further help

To get more help on the Angular CLI use `ng help` or go check out the [Angular CLI Overview and Command Reference](https://angular.dev/tools/cli) page.

================
File: src/app/app-routing.module.ts
================
import { NgModule } from '@angular/core';
import { RouterModule, Routes, PreloadAllModules } from '@angular/router';
import { MainComponent } from './pages/main/main.component';
import { AuthGuard } from './guards/auth.guard';
import { NoAuthGuard } from './guards/no-auth.guard';
import { CustomPreloadingStrategy } from './custom-preloading-strategy';

const routes: Routes = [
  {
    path: '',
    component: MainComponent
  },
  {
    path:'main',
    component:MainComponent
  },
  {
    path: 'register',
    loadChildren: () => import('./modules/registration/registration.module')
      .then(m => m.RegistrationModule)
      .catch(err => {
        console.error('Error loading registration module:', err);
        throw err;
      }),
    canActivate: [NoAuthGuard],
    data: { preload: true } // This module will be preloaded
  },
  {
    path: 'admin',
    loadChildren: () => import('./modules/admin/admin.module')
      .then(m => m.AdminModule)
      .catch(err => {
        console.error('Error loading admin module:', err);
        throw err;
      }),
    canActivate: [AuthGuard],
    data: { preload: false } // This module will not be preloaded
  },
  {
    path: 'doctor',
    loadChildren: () => import('./modules/doctor/doctor.module')
      .then(m => m.DoctorModule)
      .catch(err => {
        console.error('Error loading doctor module:', err);
        throw err;
      }),
    canActivate: [AuthGuard],
    data: { preload: true }
  },
  {
    path: 'patient',
    loadChildren: () => import('./modules/patient/patient.module')
      .then(m => m.PatientModule)
      .catch(err => {
        console.error('Error loading patient module:', err);
        throw err;
      }),
    canActivate: [AuthGuard],
    data: { preload: true }
  },
  {
    path: '**',
    redirectTo: ''
  }
];

@NgModule({
  imports: [
    RouterModule.forRoot(routes, {
      
      preloadingStrategy: CustomPreloadingStrategy,
      
     
      scrollPositionRestoration: 'enabled', // Restore scroll position when navigating
      anchorScrolling: 'enabled', // Enable anchor scrolling
      onSameUrlNavigation: 'reload' // Reload the same URL when navigating
    })
  ],
  exports: [RouterModule]
})
export class AppRoutingModule { }

================
File: src/app/app.component.css
================
:host {
    display: flex;
    flex-direction: column;
    min-height: 100vh;
  }
  .content {
    flex: 1;
  }

================
File: src/app/app.component.html
================
<app-header></app-header>
<main class="content">
<router-outlet></router-outlet>
</main>
<app-footer></app-footer>

================
File: src/app/app.component.ts
================
import { Component, OnInit } from '@angular/core';
import { Router, RouteConfigLoadStart, RouteConfigLoadEnd } from '@angular/router';

@Component({
  selector: 'app-root',
  template: `
    <app-header></app-header>
    <main class="content">
      <!-- Loading indicator for lazy loaded modules -->
      <div *ngIf="isLoading" class="loading-indicator">
        Loading...
      </div>
      <router-outlet></router-outlet>
    </main>
    <app-footer></app-footer>
  `,
  styles: [`
    .loading-indicator {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      background: #18a4e1;
      height: 3px;
      z-index: 1000;
      animation: loading 1s ease-in-out infinite;
    }
    @keyframes loading {
      0% { width: 0; }
      50% { width: 50%; }
      100% { width: 100%; }
    }
  `]
})
export class AppComponent implements OnInit {
  isLoading = false;
  loadingCount = 0;

  constructor(private router: Router) {}

  ngOnInit() {
    // Track loading state of lazyloaded modules
    this.router.events.subscribe(event => {
      if (event instanceof RouteConfigLoadStart) {
        this.loadingCount++;
        this.isLoading = true;
      } else if (event instanceof RouteConfigLoadEnd) {
        this.loadingCount--;
        this.isLoading = this.loadingCount > 0;
      }
    });
  }
}

================
File: src/app/app.module.ts
================
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';
import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';
import { HeaderComponent } from './components/header/header.component';
import { FooterComponent } from './components/footer/footer.component';
import { MainComponent } from './pages/main/main.component';
import { LoginPopUpComponent } from './components/login-pop-up/login-pop-up.component';
import { MatDialogModule } from '@angular/material/dialog';
import { ReactiveFormsModule, FormsModule } from '@angular/forms';
import { CategoriesComponent } from './components/categories/categories.component';
import { SharedModule } from './modules/shared/shared.module';
import { AuthInterceptor } from './interceptors/auth.interceptor';

@NgModule({
  declarations: [
    AppComponent,
    HeaderComponent,
    FooterComponent,
    MainComponent,
    LoginPopUpComponent,
  ],
  imports: [
    BrowserModule,
    HttpClientModule,
    MatDialogModule,
    ReactiveFormsModule,
    FormsModule,
    SharedModule,
    AppRoutingModule
  ],
  providers: [
    {
      provide: HTTP_INTERCEPTORS,
      useClass: AuthInterceptor,
      multi: true
    }
  ],
  bootstrap: [AppComponent]
})
export class AppModule { }

================
File: src/app/components/calendar/calendar.component.css
================
.calendar-container {
    font-family: Arial, sans-serif;
    max-width: 1000px;
    margin: 0 auto;
    border: 1px solid #ccc;
    border-radius: 8px;
    overflow: hidden;
  }
  .appointment-slot {
    height: 60px;
    border-top: 1px solid #eee;
    cursor: pointer;
    transition: background-color 0.3s;
  }
  
  .appointment-slot.available {
    background-color: #e6f7ff;
  }
  
  .appointment-slot.selected {
    background-color: #52c41a;
  }
  
  .appointment-slot.unavailable {
    background-color: #ff4d4f;
    cursor: not-allowed;
  }
  .calendar-header {
    background-color: #f0f0f0;
    padding: 10px;
    text-align: center;
  }
  
  .month-navigation, .week-navigation {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 10px;
  }
  
  .month-navigation span, .week-navigation span {
    font-size: 18px;
    font-weight: bold;
  }
  
  .month-navigation button, .week-navigation button {
    background: none;
    border: none;
    font-size: 18px;
    cursor: pointer;
  }
  
  .calendar-body {
    padding: 10px;
  }
  
  .week-days, .time-slots {
    display: flex;
  }
  
  .time-column {
    width: 100px;
    flex-shrink: 0;
  }
  
  .day-column {
    flex: 1;
    text-align: center;
    border-left: 1px solid #eee;
  }
  
  .day-name {
    font-weight: bold;
  }
  
  .day-date {
    font-size: 14px;
    color: #666;
  }
  
  .time-slot {
    height: 60px;
    border-top: 1px solid #eee;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  
  .appointment-slot {
    height: 60px;
    border-top: 1px solid #eee;
    cursor: pointer;
    transition: background-color 0.3s;
  }
  
  .appointment-slot:hover {
    background-color: #f0f0f0;
  }
  
  .appointment-slot.selected {
    background-color: #e6f7ff;
  }
  
  /* Responsive adjustments */
  @media (max-width: 768px) {
    .time-column {
      width: 60px;
    }
  
    .time-slot {
      font-size: 12px;
    }
  
    .day-name, .day-date {
      font-size: 12px;
    }
  }
  .appointment-popup {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
  }
  
  .popup-content {
    background-color: white;
    padding: 20px;
    border-radius: 5px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    width: 300px;
  }
  
  .popup-content h3 {
    margin-top: 0;
  }
  
  .popup-content textarea {
    width: 100%;
    height: 100px;
    margin-bottom: 10px;
  }
  
  .popup-buttons {
    display: flex;
    justify-content: space-between;
  }
  
  .popup-buttons button {
    padding: 5px 10px;
    border: none;
    border-radius: 3px;
    cursor: pointer;
  }
  
  .popup-buttons button:first-child {
    background-color: #52c41a;
    color: white;
  }
  
  .popup-buttons button:last-child {
    background-color: #f5f5f5;
    color: #333;
  }

================
File: src/app/components/calendar/calendar.component.html
================
<div class="calendar-container">
  <div class="calendar-header">
    <div class="month-navigation">
      <button (click)="changeMonth('prev')">&lt;</button>
      <span>{{ currentMonth }} {{ currentYear }}</span>
      <button (click)="changeMonth('next')">&gt;</button>
    </div>
    <div class="week-navigation">
      <button (click)="changeWeek('prev')">&lt;</button>
      <span>კვირა</span>
      <button (click)="changeWeek('next')">&gt;</button>
    </div>
  </div>
  <div class="calendar-body">
    <div class="week-days">
      <div class="time-column"></div>
      <div *ngFor="let day of weekDays" class="day-column">
        <div class="day-name">{{ day.name }}</div>
        <div class="day-date">{{ day.date }}</div>
      </div>
    </div>
    <div class="time-slots">
      <div class="time-column">
        <div *ngFor="let slot of timeSlots" class="time-slot">{{ slot }}</div>
      </div>
      <div *ngFor="let day of weekDays" class="day-column">
        <div *ngFor="let slot of day.timeSlots" 
             class="appointment-slot" 
             [class.selected]="slot.isSelected"
             [class.available]="slot.isAvailable"
             [class.unavailable]="!slot.isAvailable"
             (click)="toggleTimeSlot(day, slot)">
        </div>
      </div>
    </div>
  </div>
</div>

<div class="appointment-popup" *ngIf="showPopup">
  <div class="popup-content">
    <h3>Book Appointment</h3>
    <p>Date: {{ selectedDay?.fullDate | date:'mediumDate' }}</p>
    <p>Time: {{ selectedSlot?.time }}</p>
    <textarea [(ngModel)]="appointmentDescription" placeholder="Enter appointment description"></textarea>
    <div class="popup-buttons">
      <button (click)="bookAppointment()">Submit</button>
      <button (click)="closePopup()">Cancel</button>
    </div>
  </div>

================
File: src/app/components/calendar/calendar.component.ts
================
import { Component, OnInit, Input } from '@angular/core';
import { Appointment,AppointmentService } from '../../services/appointment.service';
interface TimeSlot {
  time: string;
  isSelected: boolean;
  isAvailable: boolean;
}

interface DayInfo {
  name: string;
  date: number;
  fullDate: Date;
  timeSlots: TimeSlot[];
}

@Component({
  selector: 'app-calendar',
  templateUrl: './calendar.component.html',
  styleUrls: ['./calendar.component.css']
})
export class CalendarComponent implements OnInit {
  @Input() isDoctorView: boolean = false;
  @Input() userId: number | null = null;
  @Input() doctorId: number | null = null;

  weekDays: DayInfo[] = [];
  timeSlots = [
    '9:00 - 10:00', '10:00 - 11:00', '11:00 - 12:00', '12:00 - 13:00',
    '13:00 - 14:00', '14:00 - 15:00', '15:00 - 16:00', '16:00 - 17:00'
  ];
  currentDate: Date;
  monthNames = [
    'იანვარი', 'თებერვალი', 'მარტი', 'აპრილი', 'მაისი', 'ივნისი',
    'ივლისი', 'აგვისტო', 'სექტემბერი', 'ოქტომბერი', 'ნოემბერი', 'დეკემბერი'
  ];
  dayNames = ['კვი', 'ორშ', 'სამ', 'ოთხ', 'ხუთ', 'პარ', 'შაბ'];

  showPopup: boolean = false;
  selectedDay: DayInfo | null = null;
  selectedSlot: TimeSlot | null = null;
  appointmentDescription: string = '';

  constructor(private appointmentService: AppointmentService) {
    this.currentDate = new Date();
  }

  ngOnInit(): void {
    this.updateWeekDays();
  }

  updateWeekDays(): void {
    this.weekDays = [];
    const startOfWeek = new Date(this.currentDate);
    startOfWeek.setDate(this.currentDate.getDate() - this.currentDate.getDay() + 1);

    for (let i = 0; i < 7; i++) {
      const day = new Date(startOfWeek);
      day.setDate(startOfWeek.getDate() + i);
      this.weekDays.push({
        name: this.dayNames[day.getDay()],
        date: day.getDate(),
        fullDate: new Date(day),
        timeSlots: this.timeSlots.map(time => ({
          time,
          isSelected: false,
          isAvailable: this.isDoctorView ? false : this.appointmentService.isTimeSlotAvailable(this.doctorId!, day, time)
        }))
      });
    }

    if (this.isDoctorView && this.doctorId) {
      this.loadDoctorAppointments();
    } else if (this.userId) {
      this.loadUserAppointments();
    }
  }

  loadDoctorAppointments(): void {
    this.appointmentService.getDoctorAppointments(this.doctorId!).subscribe(appointments => {
      this.updateCalendarWithAppointments(appointments);
    });
  }

  loadUserAppointments(): void {
    this.appointmentService.getUserAppointments(this.userId!).subscribe(appointments => {
      this.updateCalendarWithAppointments(appointments);
    });
  }

  updateCalendarWithAppointments(appointments: Appointment[]): void {
    appointments.forEach(appointment => {
      const dayIndex = this.weekDays.findIndex(day => 
        day.fullDate.toDateString() === appointment.date.toDateString()
      );
      if (dayIndex !== -1) {
        const timeSlotIndex = this.weekDays[dayIndex].timeSlots.findIndex(slot => 
          slot.time === appointment.timeSlot
        );
        if (timeSlotIndex !== -1) {
          this.weekDays[dayIndex].timeSlots[timeSlotIndex].isSelected = true;
          this.weekDays[dayIndex].timeSlots[timeSlotIndex].isAvailable = false;
        }
      }
    });
  }

  changeWeek(direction: 'prev' | 'next'): void {
    const daysToAdd = direction === 'next' ? 7 : -7;
    this.currentDate.setDate(this.currentDate.getDate() + daysToAdd);
    this.updateWeekDays();
  }

  changeMonth(direction: 'prev' | 'next'): void {
    const monthsToAdd = direction === 'next' ? 1 : -1;
    this.currentDate.setMonth(this.currentDate.getMonth() + monthsToAdd);
    this.updateWeekDays();
  }

   toggleTimeSlot(day: DayInfo, slot: TimeSlot): void {
    if (!this.isDoctorView && slot.isAvailable && !slot.isSelected) {
      this.selectedDay = day;
      this.selectedSlot = slot;
      this.showPopup = true;
    }
  }
  bookAppointment(): void {
    if (this.selectedDay && this.selectedSlot && this.userId && this.doctorId) {
      const newAppointment: Appointment = {
        id: Math.floor(Math.random() * 1000000),
        doctorId: this.doctorId,
        userId: this.userId,
        date: this.selectedDay.fullDate,
        timeSlot: this.selectedSlot.time,
        description: this.appointmentDescription
      };

      this.appointmentService.addAppointment(newAppointment);
      this.selectedSlot.isSelected = true;
      this.selectedSlot.isAvailable = false;
      this.closePopup();
    }
  }
  closePopup(): void {
    this.showPopup = false;
    this.selectedDay = null;
    this.selectedSlot = null;
    this.appointmentDescription = '';
  }

  get currentMonth(): string {
    return this.monthNames[this.currentDate.getMonth()];
  }

  get currentYear(): number {
    return this.currentDate.getFullYear();
  }
}

================
File: src/app/components/categories/categories.component.css
================
.categories {
  height: 800px;
  width: 350px;
  display: flex;
  flex-direction: column;
  box-shadow: 0px 4px 50px 0px #0533540d;
  border-radius: 10px;
  overflow: hidden;
}
@media(max-width:1600px){
  .categories{
    justify-self: center;
  }
}

.categories-header, .categories-footer {
  padding: 20px 50px;
  background-color: white;
  z-index: 1;
  text-align: center;
}

.categories-content {
  flex-grow: 1;
  padding: 0;
  overflow-y: hidden;
  overflow-x: hidden;
}

.categories-content.expanded {
  overflow-y: auto;
  scrollbar-width: thin;
  scrollbar-color: #18a4e1 #f0f0f0;
}

.categories-content.expanded::-webkit-scrollbar {
  width: 8px;
}

.categories-content.expanded::-webkit-scrollbar-track {
  background: #f0f0f0;
  border-radius: 4px;
}

.categories-content.expanded::-webkit-scrollbar-thumb {
  background-color: #18a4e1;
  border-radius: 4px;
  border: 2px solid #f0f0f0;
}

.categories-content.expanded::-webkit-scrollbar-thumb:hover {
  background-color: #1493c9;
}

.category {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 10px 20px;
  cursor: pointer;
  transition: all 0.2s ease;
  position: relative;
  margin-bottom: 25px;
  width: 100%;
}

.category-content {
  display: flex;
  gap: 15px;
  flex: 1;
  min-width: 0;
  padding-right: 30px;
}

.category span {
  color: rgb(165, 165, 165);
  font-size: 16px;
  min-width: 45px;
  flex-shrink: 0;
}

.category h4 {
  font-size: 16px;
  font-weight: 400;
  color: #053354;
  margin: 0;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  flex: 1;
}

.arrow-icon {
  flex-shrink: 0;
  width: 24px;
  height: 24px;
  margin-left: 10px;
  opacity: 0;
  transform: translateX(-10px);
  transition: all 0.2s ease;
  position: absolute;
  right: 5px;
}

.category:hover {
  background-color: #f5f5f5;
}

.category:hover .arrow-icon,
.category.selected .arrow-icon {
  opacity: 1;
  transform: translateX(0);
}

.category.selected {
  background-color: #f5f5f5;
}

.category.selected h4 {
  color: #18a4e1;
}

.category.selected span {
  color: #18a4e1;
}

.hidden-categories {
  max-height: 0;
  overflow: hidden;
  transition: max-height 0.3s ease-out;
}

.hidden-categories.expanded {
  max-height: 1000px;
}

h3 {
  font-size: 18px;
  font-weight: 500;
  margin-bottom: 15px;
}

.view-full {
  font-size: 14px;
  font-weight: 400;
  color: #18a4e1;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 5px;
  margin: 15px 0 0 0;
}

.view-full svg {
  transition: transform 0.3s ease;
}

.view-full svg.rotated {
  transform: rotate(180deg);
}

================
File: src/app/components/categories/categories.component.html
================
<div class="categories">
    <div class="categories-header">
        <h3>კატეგორიები</h3>
        <svg width="250" height="2" viewBox="0 0 250 2" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M0 1H250" stroke="#ECF2F8"/>
        </svg>
    </div>
    <div class="categories-content" #categoriesContent [class.expanded]="isExpanded">
        <div class="category" 
             *ngFor="let category of visibleCategories"
             [class.selected]="selectedCategory === category.name"
             (click)="onCategoryClick(category.name)">
            <div class="category-content">
                <span>({{ category.count }})</span>
                <h4>{{ category.name }}</h4>
            </div>
            <svg class="arrow-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">
                <path d="M9 18L15 12L9 6" stroke="#18A4E1" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
            </svg>
        </div>
        <div class="hidden-categories" [class.expanded]="isExpanded">
            <div class="category" 
                 *ngFor="let category of hiddenCategories"
                 [class.selected]="selectedCategory === category.name"
                 (click)="onCategoryClick(category.name)">
                <div class="category-content">
                    <span>({{ category.count }})</span>
                    <h4>{{ category.name }}</h4>
                </div>
                <svg class="arrow-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">
                    <path d="M9 18L15 12L9 6" stroke="#18A4E1" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
            </div>
        </div>
    </div>
    <div class="categories-footer">
        <svg class="line" width="250" height="2" viewBox="0 0 250 2" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M0 1H250" stroke="#ECF2F8"/>
        </svg>
        <p class="view-full" (click)="toggleView()">
            {{ isExpanded ? 'დახურვა' : 'ყველას ნახვა' }}
            <svg [class.rotated]="isExpanded" width="14" height="8" viewBox="0 0 14 8" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M13.0667 1.91667L7.46667 7.53334C7.4 7.60001 7.32778 7.64712 7.25 7.67467C7.17222 7.70267 7.08889 7.71667 7 7.71667C6.91111 7.71667 6.82778 7.70267 6.75 7.67467C6.67222 7.64712 6.6 7.60001 6.53333 7.53334L0.916668 1.91667C0.761112 1.76112 0.683334 1.56667 0.683334 1.33334C0.683334 1.10001 0.766668 0.900008 0.933334 0.733342C1.1 0.566675 1.29445 0.483342 1.51667 0.483342C1.73889 0.483342 1.93333 0.566675 2.1 0.733342L7 5.63334L11.9 0.733342C12.0556 0.577786 12.2471 0.500008 12.4747 0.500008C12.7027 0.500008 12.9 0.583342 13.0667 0.750008C13.2333 0.916675 13.3167 1.11112 13.3167 1.33334C13.3167 1.55556 13.2333 1.75001 13.0667 1.91667Z" fill="#18A4E1"/>
            </svg>
        </p>
    </div>
</div>

================
File: src/app/components/categories/categories.component.ts
================
import { Component, ElementRef, OnInit, Output, EventEmitter, ViewChild } from '@angular/core';

@Component({
  selector: 'app-categories',
  templateUrl: './categories.component.html',
  styleUrls: ['./categories.component.css']
})
export class CategoriesComponent implements OnInit {
  @Output() categorySelected = new EventEmitter<string|null>();
  @ViewChild('categoriesContent') categoriesContent?: ElementRef;
  
  isExpanded = false;
  selectedCategory: string|null = null;
  categories = [
    { count: 23424, name: 'Dermatologist' },
    { count: 15678, name: 'Dentist' },
    { count: 19876, name: 'ნევროლოგი' },
    { count: 12345, name: 'ოფთალმოლოგი' },
    { count: 21098, name: 'დერმატოლოგი' },
    { count: 18765, name: 'ორთოპედი' },
    { count: 14567, name: 'გინეკოლოგი' },
    { count: 17890, name: 'ენდოკრინოლოგი' },
    { count: 13456, name: 'უროლოგი' },
    { count: 16789, name: 'გასტროენტეროლოგი' },
    { count: 20987, name: 'ოტორინოლარინგოლოგი' },
    { count: 11234, name: 'პულმონოლოგი' },
    { count: 15678, name: 'რევმატოლოგი' },
    { count: 19876, name: 'ონკოლოგი' },
    { count: 22345, name: 'ნეფროლოგი' },
    { count: 18765, name: 'ჰემატოლოგი' },
    { count: 14567, name: 'ალერგოლოგი' },
    { count: 17890, name: 'იმუნოლოგი' },
    { count: 21098, name: 'ფსიქიატრი' },
    { count: 13456, name: 'ნეიროქირურგი' },
  ];

  visibleCategories: any[] | undefined;
  hiddenCategories: any[] | undefined;

  ngOnInit() {
    this.splitCategories();
  }

  splitCategories() {
    this.visibleCategories = this.categories.slice(0, 16);
    this.hiddenCategories = this.categories.slice(16);
  }

  onCategoryClick(categoryName: string) {
    if (this.selectedCategory === categoryName) {
      this.selectedCategory = null;
      this.categorySelected.emit(null);
    } else {
      this.selectedCategory = categoryName;
      this.categorySelected.emit(categoryName);
    }
  }

  toggleView() {
    this.isExpanded = !this.isExpanded;
    
    // If closing the expanded view, scroll to top
    if (!this.isExpanded && this.categoriesContent) {
      setTimeout(() => {
        this.categoriesContent!.nativeElement.scrollTop = 0;
      }, 0);
    }
  }
}

================
File: src/app/components/doctor-profile-card/doctor-profile-card.component.css
================
/* Card Container */

.card {
  background-color: #ffffff;
  border-radius: 8px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  overflow: hidden;
  border: 1px solid #e0e0e0;
  width: 1208px;
}

/* Card Content Layout */
.card-content {
  display: flex;
  justify-content: space-between;
  align-items: stretch;
  padding: 24px;
  gap: 40px;
}

/* Profile Column */
.profile-info-column {
  display: flex;
  align-items: center;
  gap: 40px;
  flex: 1;
}

/* Doctor Photo */
.doctor-photo {
  width: 157px;
  height: 157px;
  border-radius: 50%;
  object-fit: cover;
  flex-shrink: 0;
}

/* Information Column */
.info-content {
  display: flex;
  flex-direction: column;
}

/* Vertical Divider */
.vertical-divider {
  width: 1px;
  background-color: #e0e0e0;
  align-self: stretch;
}

/* History Column */
.history-column {
  flex: 1;
  display: flex;
  align-items: center;
  max-width: 50%;
}

/* Doctor Name */
.doctor-name {
  font-size: 20px;
  font-weight: bold;
  color: #333;
  margin: 0 0 4px 0;
}

/* Doctor Specialization */
.doctor-specialization {
  font-size: 14px;
  color: #666;
  margin: 0 0 8px 0;
}

/* Doctor Rating */
.doctor-rating {
  color: #ffd700;
  font-size: 18px;
}

/* Experience Item */
.experience-item {
  margin-bottom: 8px;
  font-size: 14px;
}

/* Experience Year */
.experience-year {
  color: #2196f3;
  font-weight: bold;
}

/* Experience Description */
.experience-description {
  color: #333;
}

/* Responsive Breakpoints */
@media (max-width: 1750px) {
  .card {
    width: 100%;

  }

  .card-content {
    padding: 24px;
    gap: 40px;
  }

  .profile-info-column {
    gap: 40px;
  }

  .doctor-photo {
    width: 157px;
    height: 157px;
  }

  .doctor-name {
    font-size: 20px;
    margin: 0 0 4px 0;
  }

  .doctor-specialization {
    font-size: 14px;
    margin: 0 0 8px 0;
  }

  .doctor-rating {
    font-size: 18px;
  }

  .experience-item {
    margin-bottom: 8px;
    font-size: 14px;
  }
}
@media (max-width: 1250px) {.cont{
    padding: 20px;
  }
  .card {
    width: 95%;
    margin: 0 auto;
  }
}

@media (max-width: 768px) {
  
  .card-content {
    flex-direction: column;
    align-items: center;
    padding: 20px;
    gap: 24px;
  }

  .profile-info-column {
    flex-direction: column;
    text-align: center;
    gap: 20px;
  }

  .doctor-photo {
    width: 120px;
    height: 120px;
  }

  .info-content {
    align-items: center;
  }

  .vertical-divider {
    width: 100%;
    height: 1px;
    margin: 8px 0;
  }

  .history-column {
    max-width: 100%;
    width: 100%;
  }

  .history-content {
    width: 100%;
  }

  .experience-item {
    text-align: center;
  }
}

@media (max-width: 480px) {
  .card {
    width: 92%;
  }

  .card-content {
    padding: 16px;
    gap: 20px;
  }

  .doctor-photo {
    width: 100px;
    height: 100px;
  }

  .doctor-name {
    font-size: 18px;
  }

  .doctor-specialization {
    font-size: 13px;
  }

  .experience-item {
    display: flex;
    flex-direction: column;
    gap: 4px;
    font-size: 13px;
  }
}

================
File: src/app/components/doctor-profile-card/doctor-profile-card.component.html
================
<div class="cont">
<div class="card" *ngIf="doctor">
  <div class="card-content">
    <div class="profile-info-column">
      <img [src]="doctor.photoUrl" [alt]="doctor.firstName + ' ' + doctor.lastName" class="doctor-photo">
      <div class="info-content">
        <h2 class="doctor-name">{{ doctor.firstName }} {{ doctor.lastName }}</h2>
        <p class="doctor-specialization">{{ doctor.specialty }}</p>
        <div class="doctor-rating">
          <ng-container *ngFor="let filled of getStarsArray(doctor.rating)">
            <svg xmlns="http://www.w3.org/2000/svg" 
                 width="17" 
                 height="17" 
                 [attr.fill]="filled ? '#FFD233' : '#ECF2F8'"
                 viewBox="0 0 256 256">
                <path d="M234.5,114.38l-45.1,39.36,13.51,58.6a16,16,0,0,1-23.84,17.34l-51.11-31-51,31a16,16,0,0,1-23.84-17.34L66.61,153.8,21.5,114.38a16,16,0,0,1,9.11-28.06l59.46-5.15,23.21-55.36a15.95,15.95,0,0,1,29.44,0h0L166,81.17l59.44,5.15a16,16,0,0,1,9.11,28.06Z"></path>
            </svg>
        </ng-container>
        </div>
      </div>
    </div>
    <div class="vertical-divider"></div>
    <div class="history-column">
      <div class="history-content">
        <div *ngFor="let exp of experiences" class="experience-item">
          <span class="experience-year">{{ exp.year }} - </span>
          <span class="experience-description">{{ exp.description }}</span>
        </div>
      </div>
    </div>
  </div>
</div>

<div class="loading-state" *ngIf="!doctor">
  Loading doctor information...
</div></div>

================
File: src/app/components/doctor-profile-card/doctor-profile-card.component.ts
================
// doctor-profile-card.component.ts
import { Component, Input, OnInit } from '@angular/core';
import { DoctorService } from '../../services/doctor.service';

@Component({
  selector: 'app-doctor-profile-card',
  templateUrl: './doctor-profile-card.component.html',
  styleUrls: ['./doctor-profile-card.component.css']
})
export class DoctorProfileCardComponent implements OnInit {
  @Input() doctorId: number = 0;
  
  doctor: any = null;
  experiences: any[] = [
    { year: '2017', description: 'დღემდე, ჩვენი კლინიკის გენერალური დირექტორი' },
    { year: '2002', description: 'დღემდე, ჩვენი კომპიუტერული ტომოგრაფიის განყოფილების ხელმძღვანელი' },
    { year: '1995', description: 'დღემდე, კარდიოლოგი / არითმოლოგი' }
  ];

  constructor(private doctorService: DoctorService) {}

  ngOnInit() {
    if (this.doctorId) {
      this.loadDoctorDetails();
    }
  }

  loadDoctorDetails() {
    this.doctorService.getDoctorById(this.doctorId).subscribe({
      next: (data) => {
        this.doctor = data;
        console.log(this.doctor.rating);
      },
      error: (error) => {
        console.error('Error loading doctor details:', error);
      }
    });
  }

  getStarsArray(rating: number): number[] {
    return Array(5).fill(0).map((_, i) => i < rating ? 1 : 0);
  }
}

================
File: src/app/components/footer/footer.component.css
================
/* Global Styles */
* {
  font-family: 'FiraGO', sans-serif;
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

/* Info Section */
.info {
  height: fit-content;
  padding: 30px 120px;
  background-color: #053354;
  display: flex;
  gap: 150px;
}

.details {
  display: flex;
  flex-direction: column;
  width: 100%;
}

/* Hospital Logo and Heading */
.hospital {
  display: flex;
  align-items: center;
  margin-top: 20px;
  align-self: flex-start;
}

.hospital img {
  width: 90px;
  height: 66px;
  object-fit: cover;
}

.hospital h2 {
  font-size: 22px;
  font-weight: 500;
  color: #fff;
  margin-left: -25px;
}

/* Headers Section */
.headers {
  display: flex;
  justify-content: space-between;
  border-bottom: 1px solid #ecf2f84d;
  padding-bottom: 20px;
}

.headers h2 {
  font-size: 16px;
  font-weight: 500;
  color: white;
  width: 160px;
}

/* Information Section */
.informations {
  display: flex;
  justify-content: space-between;
  padding-top: 20px;
}

.informations div h3 {
  line-height: 1.2;
  width: 160px;
  font-size: 16px;
  font-weight: 400;
  color: #fff;
  padding: 5px 0;
  cursor: pointer;
}

/* Copyright */
.copyright {
  padding: 15px 120px;
  color: #053354;
}

/* Responsive Styles */
@media (max-width: 1200px) {
  .info {
    padding: 30px 60px;
    gap: 50px;
  }
}

@media (max-width: 920px) {
  .info {
    padding: 30px 20px;
    flex-direction: column;
    gap: 30px;
  }

  .hospital {
    align-self: center;
  }

  .headers, .informations {
    flex-direction: column;
    gap: 20px;
  }

  .headers h2, .informations div h3 {
    width: 100%;
    text-align: center;
  }

  .copyright {
    padding: 15px 20px;
    text-align: center;
  }
}

@media (max-width: 480px) {
  .hospital img {
    width: 70px;
    height: 52px;
  }

  .hospital h2 {
    font-size: 18px;
  }
}

================
File: src/app/components/footer/footer.component.html
================
<footer>
    <div class="info">
        <div class="hospital">
            <img src="assets/logo 2.png" alt="">
            <h2>კლინიკა</h2>
        </div>
        <div class="details">
            <div class="headers">
                <h2>ინფორმაცია</h2>
                <h2>პაციენტებისთვის</h2>
                <h2>კონტაქტი</h2>
                <h2>გამოგვყევით</h2>
            </div>
            <div class="informations">
                <div class="content1">
                    <h3>ჩვენს შესახებ</h3>
                    <h3>პარტნიორები</h3>
                    <h3>ექიმებისთვის</h3>
                    <h3>კლინიკებისთვის</h3>
                    <h3>აფთიაქებისთვის</h3>
                </div>
                <div class="content2">
                    <h3>ექიმები</h3>
                    <h3>კლინიკები</h3>
                    <h3>ანოტაციები</h3>
                    <h3>ბლოგი</h3>
                    <h3>მედია</h3>
                </div>
                <div class="content3">
                    <h3>სამუშაო დღეები : ორშ - პარ</h3>
                    <h3>სამუშაო დრო : 09:00-17:00</h3>
                    <h3>იაკობ ნიკოლაძე №10</h3>
                    <h3>032 2 100 100</h3>
                </div>
                <div class="content4">
                    <h3>Facebook</h3>
                    <h3>Instagram</h3>
                    <h3>Youtube</h3>
                </div>
            </div>
        </div>
    </div>
    <p class="copyright">copyright</p>
</footer>

================
File: src/app/components/footer/footer.component.ts
================
import { Component } from '@angular/core';

@Component({
  selector: 'app-footer',
  templateUrl: './footer.component.html',
  styleUrl: './footer.component.css'
})
export class FooterComponent {

}

================
File: src/app/components/header/header.component.css
================
/* Header Styling */
header {
  padding: 20px 120px;
  align-items: center;
  width: 100%;
  box-sizing: border-box;
}

/* Navigation */
.navigations {
  display: flex;
  align-items: center;
  justify-content: space-between;
  flex-wrap: wrap;
  width: 100%;
}

.logo {
  display: flex;
  align-items: center;
  color: #ff2c52;
  cursor: pointer;
}

.logo h2 {
  margin-left: -25px;
  font-family: 'FiraGO', sans-serif;
  font-size: 22px;
  font-weight: 500;
}

.logo img {
  width: 90px;
  height: 66px;
  object-fit: cover;
}

/* Navigation Links */
nav {
  display: flex;
  gap: 10px;
  border-bottom: 1px solid #ecf2f8;
  margin: 0 70px;
}

nav a {
  text-decoration: none;
  color: #053354;
  padding: 20px 5px;
  font-size: 18px;
  white-space: nowrap;
}

.active {
  border-bottom: 1px solid #18A4E1;
}

/* Authentication and Language Buttons */
.auth, .language {
  padding: 10px 15px;
  border-radius: 25px;
  background-color: #f0faff;
}

.login {
  color: #18a4e1;
  cursor: pointer;
}

.register {
  color: #053354;
  text-decoration: none;
  cursor: pointer;
}

/* User Role Styling */
.user-role {
  font-size: 12px;
  color: #666;
  display: block;
  text-align: center;
  margin-bottom: 4px;
}

/* Role-Specific Styling */
.user-profile-container[data-role="ADMIN"] .avatar-circle {
  border: 2px solid #ff4081; 
}

.user-profile-container[data-role="DOCTOR"] .avatar-circle {
  border: 2px solid #2196f3; 
}

.user-profile-container[data-role="PATIENT"] .avatar-circle {
  border: 2px solid #4caf50; 
}

/* Contact Section */
.contact {
  padding: 40px 120px;
  background-color: #ecf2f8;
  display: flex;
  align-items: center;
  justify-content: space-between;
  flex-wrap: wrap;
  gap: 20px;
}

.info {
  display: flex;
  gap: 35px;
  flex-wrap: wrap;
}

.phone, .location {
  width: 40px;
  height: 40px;
  padding: 5px;
  background-color: white;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
}

.number, .location_info {
  display: flex;
  gap: 20px;
  align-items: center;
}

/* Inputs */
.inputs {
  display: flex;
  align-items: center;
  gap: 30px;
  flex-wrap: wrap;
}

input {
  width: 480px;
  border-radius: 50px;
  border: 1px solid #18a4e180;
  padding: 15px 25px;
  max-width: 100%;
}

/* Search Icon */
.search {
  border-radius: 50%;
  background-color: #053354;
  width: 50px;
  height: 50px;
  display: flex;
  align-items: center;
  justify-content: center;
  flex-shrink: 0;
}

/* Mobile Menu Toggle */
.mobile-menu-toggle {
  display: none;
  flex-direction: column;
  justify-content: space-between;
  width: 30px;
  height: 21px;
  background: none;
  border: none;
  cursor: pointer;
  padding: 0;
}

.mobile-menu-toggle span {
  width: 100%;
  height: 3px;
  background-color: #053354;
  transition: all 0.3s ease;
}

/* User Profile Container */
.user-profile-container {
  display: flex;
  align-items: center;
  gap: 12px;
  padding: 8px 16px;
  background-color: #f0faff;
  border-radius: 25px;
}

.avatar-circle {
  width: 32px;
  height: 32px;
  border-radius: 50%;
  background-color: #333;
  cursor: pointer;
}

.user-info {
  display: flex;
  flex-direction: column;
  gap: 4px;
}

.user-name {
  color: #053354;
  font-size: 14px;
  font-weight: 500;
}

.logout-btn {
  background: none;
  border: none;
  color: #18a4e1;
  font-size: 12px;
  cursor: pointer;
  padding: 0;
  text-align: center;
}

.logout-btn:hover {
  text-decoration: none;
}

/* Responsive Styles */
@media (max-width: 1600px) {
  header, .contact {
    padding: 20px 60px;
  }
  nav {
    margin: 0 30px;
  }
  input {
    width: 380px;
  }
}

@media (max-width: 1200px) {
  input {
    width: 300px;
  }
}

@media (max-width: 1500px) {
  .mobile-menu-toggle {
    display: flex;
    order: 1;
  }
  .mobile-menu-toggle.active span:nth-child(1) {
    transform: translateY(9px) rotate(45deg);
  }
  .mobile-menu-toggle.active span:nth-child(2) {
    opacity: 0;
  }
  .mobile-menu-toggle.active span:nth-child(3) {
    transform: translateY(-9px) rotate(-45deg);
  }
  .logo {
    order: 0;
  }
  nav {
    display: none;
    width: 100%;
    order: 3;
    margin: 20px 0;
    flex-direction: column;
    align-items: center;
    text-align: center;
  }
  nav.mobile-menu-open {
    display: flex;
  }
  .auth {
    order: 1;
  }
  .language {
    order: 2;
  }
  .inputs {
    flex-direction: column;
    width: 100%;
  }
  input {
    width: 100%;
  }
  .search {
    align-self: flex-end;
  }
}

@media (max-width: 968px) {
  header, .contact {
    padding: 15px 20px;
  }
  .info {
    gap: 20px;
  }
  .logo h2 {
    font-size: 18px;
  }
  .logo img {
    width: 70px;
    height: 52px;
  }
  .mobile-menu-toggle.active span:nth-child(1) {
    transform: translateY(9px) rotate(45deg);
  }
  .mobile-menu-toggle.active span:nth-child(2) {
    opacity: 0;
  }
  .mobile-menu-toggle.active span:nth-child(3) {
    transform: translateY(-9px) rotate(-45deg);
  }
}

@media (max-width: 480px) {
  .auth, .language {
    width: 100%;
    text-align: center;
    box-sizing: border-box;
  }
  .user-info {
    flex-direction: column;
    gap: 4px;
  }
  .user-name {
    color: #053354;
    font-size: 14px;
    font-weight: 500;
  }
}

@media (max-width: 768px) {
  .user-profile-container {
    padding: 6px 12px;
  }
  .language {
    display: none;
  }
  .avatar-circle {
    width: 28px;
    height: 28px;
  }
  .user-name {
    font-size: 12px;
  }
}

================
File: src/app/components/header/header.component.html
================
<header>
  <div class="navigations">
    <div class="logo" routerLink="/main">
      <img src="assets/logo 1.png" alt="" routerLink="/main">
      <h2>კლინიკა</h2>
    </div>

    <button class="mobile-menu-toggle" [class.active]="isMobileMenuOpen" (click)="toggleMobileMenu()">
      <span></span>
      <span></span>
      <span></span>
    </button>

    <nav [class.mobile-menu-open]="isMobileMenuOpen">
      <a routerLink="/main" class="active">ექიმები</a>
      <a routerLink="#">კლინიკები</a>
      <a routerLink="#">ანოტაციები</a>
      <a routerLink="#">აქციები</a>
      <a routerLink="#">სერვისები</a>
      <a routerLink="#">მედიკამენტები</a>
      <a routerLink="#">კონტაქტი</a>

    </nav>
    <ng-container *ngIf="!(isAuthenticated$|async); else userProfile">


      <div class="auth">
        <p><span class="login" (click)="openLoginModal()">ავტორიზაცია</span> / <a class="register"
            routerLink="/register">რეგისტრაცია</a></p>
      </div>
    </ng-container>
    <ng-template #userProfile>
      <div class="user-profile-container" *ngIf="currentUser$ | async as user" [attr.data-role]="user.role">
        <div class="user-avatar">
          <div class="avatar-circle" [routerLink]="getProfileRoute(user.role)"></div>
        </div>
        <div class="user-info">
          <span class="user-name">{{user.firstName}} {{user.lastName}}</span>
          <ng-container [ngSwitch]="user.role">
            <span class="user-role" *ngSwitchCase="'ADMIN'">ადმინისტრატორი</span>
          </ng-container>
          <button class="logout-btn" (click)="logout()">გასვლა</button>
        </div>
      </div>
    </ng-template>
    <select name="" id="" class="language">
      <option value="ge">GEO</option>
      <option value="en">ENG</option>
    </select>
  </div>
</header>

<div class="contact">
  <div class="info">
    <div class="number">
      <div class="phone">
        <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" fill="#18A4E1" viewBox="0 0 256 256">
          <path
            d="M222.37,158.46l-47.11-21.11-.13-.06a16,16,0,0,0-15.17,1.4,8.12,8.12,0,0,0-.75.56L134.87,160c-15.42-7.49-31.34-23.29-38.83-38.51l20.78-24.71c.2-.25.39-.5.57-.77a16,16,0,0,0,1.32-15.06l0-.12L97.54,33.64a16,16,0,0,0-16.62-9.52A56.26,56.26,0,0,0,32,80c0,79.4,64.6,144,144,144a56.26,56.26,0,0,0,55.88-48.92A16,16,0,0,0,222.37,158.46ZM176,208A128.14,128.14,0,0,1,48,80,40.2,40.2,0,0,1,82.87,40a.61.61,0,0,0,0,.12l21,47L83.2,111.86a6.13,6.13,0,0,0-.57.77,16,16,0,0,0-1,15.7c9.06,18.53,27.73,37.06,46.46,46.11a16,16,0,0,0,15.75-1.14,8.44,8.44,0,0,0,.74-.56L168.89,152l47,21.05h0s.08,0,.11,0A40.21,40.21,0,0,1,176,208Z">
          </path>
        </svg>
      </div>
      <p>032 2 100 100</p>
    </div>
    <div class="address">
      <div class="location_info">
        <div class="location">
          <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" fill="#18A4E1" viewBox="0 0 256 256">
            <path
              d="M128,64a40,40,0,1,0,40,40A40,40,0,0,0,128,64Zm0,64a24,24,0,1,1,24-24A24,24,0,0,1,128,128Zm0-112a88.1,88.1,0,0,0-88,88c0,31.4,14.51,64.68,42,96.25a254.19,254.19,0,0,0,41.45,38.3,8,8,0,0,0,9.18,0A254.19,254.19,0,0,0,174,200.25c27.45-31.57,42-64.85,42-96.25A88.1,88.1,0,0,0,128,16Zm0,206c-16.53-13-72-60.75-72-118a72,72,0,0,1,144,0C200,161.23,144.53,209,128,222Z">
            </path>
          </svg>
        </div>
        <p>იაკობ ნიკოლაძე №10</p>
      </div>
    </div>
  </div>
  
  <div class="inputs">
    <input placeholder="მოძებნე ექიმი სახელით" type="text">
    <input placeholder="მოძებნე სპეციალობით" type="text">
    <div class="search">
      <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="#fff" viewBox="0 0 256 256">
        <path
          d="M229.66,218.34l-50.07-50.06a88.11,88.11,0,1,0-11.31,11.31l50.06,50.07a8,8,0,0,0,11.32-11.32ZM40,112a72,72,0,1,1,72,72A72.08,72.08,0,0,1,40,112Z">
        </path>
      </svg>
    </div>
  </div>
</div>

<app-login-pop-up *ngIf="showLoginModal" (close)="closeLoginModal()"></app-login-pop-up>

================
File: src/app/components/header/header.component.ts
================
import { Component, OnInit } from '@angular/core';
import { LoginPopUpComponent } from '../login-pop-up/login-pop-up.component';
import { MatDialog } from '@angular/material/dialog';
import { AuthService } from '../../services/auth.service';
import { Observable } from 'rxjs';

@Component({
  selector: 'app-header',
  templateUrl: './header.component.html',
  styleUrl: './header.component.css'
})
export class HeaderComponent implements OnInit {
  isMobileMenuOpen = false;
  showLoginModal = false;
  isAuthenticated$! : Observable<boolean>;
  currentUser$! : Observable<any>;

  constructor(private authService: AuthService) {}

  ngOnInit() {
    this.isAuthenticated$ = this.authService.isAuthenticated();
    this.currentUser$ = this.authService.getCurrentUser();

    
    }
  

  getProfileRoute(role:string):string{
    switch(role){
      case 'ADMIN':
        return '/admin/profile';
      case 'PATIENT':
        return  '/patient/profile';
      case 'DOCTOR':
        return '/patient/profile';
        default:
          return '/user-prof';
    }
  }

  toggleMobileMenu() {
    this.isMobileMenuOpen = !this.isMobileMenuOpen;
  }

  openLoginModal() {
    this.showLoginModal = true;
  }

  closeLoginModal() {
    this.showLoginModal = false;
  }

  logout() {
    this.authService.logout();
  }
}

================
File: src/app/components/login-pop-up/login-pop-up.component.css
================
.modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.5);
  z-index: 1000;
}

.modal-container {
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 600px;
  height: fit-content;
  background-color: white;
  border-radius: 8px;
  padding: 30px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  z-index: 1001;
  display: flex;
  flex-direction: column;
}

.modal-content {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  flex: 1;
}
h2 {
  color: #18a4e1;
  margin-bottom: 30px;
  font-size: 24px;
  text-align: center;
}
form {
  width: 100%;
  max-width: 400px;
  display: flex;
  flex-direction: column;
  gap: 20px;
}
input {
  width: 100%;
  padding: 12px;
  border: 1px solid #ccc;
  border-radius: 50px;

  font-size: 16px;
}
button {
  align-self: flex-start;
  border: none;
  background-color: #053354;
  border-radius: 50px;
  padding: 12px 35px;
  color: white;
  font-size: 16px;
  cursor: pointer;
  transition: background-color 0.3s;
}
button:hover {
  background-color: #18a4e1;
}
.forgot-password {
  align-self: flex-end;
  color: #053354;
  font-size: 14px;
  cursor: pointer;
  margin: 10px 0;
}

.confirmation {
  color: #18a4e1;
  font-size: 14px;
}
.close-button {
  margin-top: 20px;
}
.alert {
  padding: 12px;
  border-radius: 4px;
  margin-bottom: 20px;
  text-align: center;
  font-size: 14px;
}

.alert-success {
  background-color: #d4edda;
  color: #155724;
  border: 1px solid #c3e6cb;
}

.alert-error {
  background-color: #f8d7da;
  color: #721c24;
  border: 1px solid #f5c6cb;
}

.form-group {
  margin-bottom: 15px;
}

.error-message {
  color: #dc3545;
  font-size: 12px;
  margin-top: 5px;
}

input.invalid {
  border-color: #dc3545;
}

.submit-button {
  background-color: #053354;
  color: white;
  border: none;
  padding: 10px 20px;
  border-radius: 25px;
  cursor: pointer;
  width: 100%;
  margin-top: 15px;
}

.submit-button:disabled {
  background-color: #cccccc;
  cursor: not-allowed;
}

.close-button {
  margin-top: 15px;
  padding: 8px 16px;
  border: none;
  background-color: #f8f9fa;
  border-radius: 4px;
  cursor: pointer;
}

.close-button:hover {
  background-color: #e2e6ea;
}

================
File: src/app/components/login-pop-up/login-pop-up.component.html
================
<!-- login-pop-up.component.html -->
<div class="modal-overlay" (click)="onClose()"></div>
<div class="modal-container">
  <h2>ავტორიზაცია</h2>
  
  <!-- Alert Message -->
  <div *ngIf="showAlert" 
       [class]="'alert ' + (alertType === 'success' ? 'alert-success' : 'alert-error')">
    {{ alertMessage }}
  </div>

  <div class="modal-content">
    <form (ngSubmit)="onLogin()" [formGroup]="loginForm">
      <div class="form-group">
        <input formControlName="email" 
               placeholder='ელ.ფოსტა' 
               type="email" 
               [class.invalid]="loginForm.get('email')?.invalid && loginForm.get('email')?.touched">
        <div class="error-message" *ngIf="loginForm.get('email')?.invalid && loginForm.get('email')?.touched">
          <span *ngIf="loginForm.get('email')?.errors?.['required']">Email is required</span>
          <span *ngIf="loginForm.get('email')?.errors?.['email']">Please enter a valid email</span>
        </div>
      </div>

      <div class="form-group">
        <input formControlName="password" 
               placeholder='პაროლი' 
               type="password"
               [class.invalid]="loginForm.get('password')?.invalid && loginForm.get('password')?.touched">
        <div class="error-message" *ngIf="loginForm.get('password')?.invalid && loginForm.get('password')?.touched">
          Password is required
        </div>
      </div>

      <p class="forgot-password">პაროლის აღდგენა</p>
      
      <button type="submit" [disabled]="!loginForm.valid" class="submit-button">
        {{ isLoading ? 'მიმდინარეობს...' : 'ავტორიზაცია' }}
      </button>
    </form>
  </div>

</div>

================
File: src/app/components/login-pop-up/login-pop-up.component.ts
================
// login-pop-up.component.ts
import { Component, EventEmitter, OnInit, Output } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { AuthService } from '../../services/auth.service';
import { Observable } from 'rxjs';

@Component({
  selector: 'app-login-pop-up',
  templateUrl: './login-pop-up.component.html',
  styleUrls: ['./login-pop-up.component.css']
})
export class LoginPopUpComponent implements OnInit {
  @Output() close = new EventEmitter<void>();
  loginForm: FormGroup;
  isLoading: boolean = false;
  alertMessage: string = '';
  alertType: 'success' | 'error' = 'error';
  showAlert: boolean = false;

  constructor(
    private authService: AuthService,
    private fb: FormBuilder
  ) {
    this.loginForm = this.fb.group({
      email: ['', [Validators.required, Validators.email]],
      password: ['', Validators.required]
    });
  }

  ngOnInit() {}

  onLogin(): void {
    if (this.loginForm.valid) {
      this.isLoading = true;
      this.hideAlert();

      const loginData = {
        email: this.loginForm.get('email')?.value,
        password: this.loginForm.get('password')?.value
      };

      this.authService.authenticate(loginData).subscribe({
        next: (response) => {
          this.showSuccessAlert('Login successful!');
          
            this.close.emit();
        },
        error: (error) => {
          this.showErrorAlert(error.message || 'Invalid email or password');
          this.isLoading = false;
        }
      });
    } else {
      this.showErrorAlert('Please fill in all required fields correctly');
    }
  }

  showSuccessAlert(message: string): void {
    this.alertMessage = message;
    this.alertType = 'success';
    this.showAlert = true;
  }

  showErrorAlert(message: string): void {
    this.alertMessage = message;
    this.alertType = 'error';
    this.showAlert = true;
  }

  hideAlert(): void {
    this.showAlert = false;
    this.alertMessage = '';
  }

  onClose(): void {
    this.close.emit();
  }
}

================
File: src/app/config/api.config.ts
================
export const API_CONFIG = {
    baseUrl: 'https://localhost:7226/api',
    endpoints: {
      user: {
        base: '/User',
        authenticate: '/Authenticate',
        checkEmail: '/CheckEmailExists/check-email',
        info: '/GetUserInfo'
      },
      doctor: {
        base: '/Doctor',
        register: '/RegisterDoctor',
        cards: '/GetDoctorCards',
        byId: '/GetDoctorById',
        delete: '/DeleteDoctorById'
      },
      patient: {
        base: '/Patient',
        register: '/RegisterPatient'
      }
    }
  };

================
File: src/app/custom-preloading-strategy.ts
================
import { Injectable } from '@angular/core';
import { PreloadAllModules, Route } from '@angular/router';
import { Observable, of } from 'rxjs';

@Injectable({ providedIn: 'root' })
export class CustomPreloadingStrategy implements PreloadAllModules {
  preload(route: Route, load: () => Observable<any>): Observable<any> {
    // Preload only routes that have preload data property set to true
    if (route.data?.['preload'] === true) {
      console.log('Preloading:', route.path);
      return load();
    }
    return of(null);
  }
}

================
File: src/app/guards/admin.guard.ts
================
import { Injectable } from '@angular/core';
import { CanActivate, Router } from '@angular/router';
import { Observable, map, take } from 'rxjs';
import { AuthService } from '../services/auth.service';

@Injectable({
  providedIn: 'root'
})
export class AdminGuard implements CanActivate {
  constructor(private authService: AuthService, private router: Router) {}

  canActivate(): Observable<boolean> {
    return this.authService.getCurrentUser().pipe(
      take(1),
      map(user => {
        if (user?.role !== 'ADMIN') {
          this.router.navigate(['/main']);
          return false;
        }
        return true;
      })
    );
  }
}

================
File: src/app/guards/auth.guard.ts
================
import { Injectable } from '@angular/core';
import { CanActivate, Router, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';
import { Observable, map, take } from 'rxjs';
import { AuthService } from '../services/auth.service';

@Injectable({
  providedIn: 'root'
})
export class AuthGuard implements CanActivate {
  constructor(private authService: AuthService, private router: Router) {}

  canActivate(
    route: ActivatedRouteSnapshot,
    state: RouterStateSnapshot
  ): Observable<boolean> {
    return this.authService.isAuthenticated().pipe(
      take(1),
      map(isAuthenticated => {
        if (!isAuthenticated) {
          this.router.navigate(['/main']);
          return false;
        }
        return true;
      })
    );
  }
}

================
File: src/app/guards/doctor.guard.ts
================
import { Injectable } from '@angular/core';
import { CanActivate, Router } from '@angular/router';
import { Observable, map, take } from 'rxjs';
import { AuthService } from '../services/auth.service';

@Injectable({
  providedIn: 'root'
})
export class DoctorGuard implements CanActivate {
  constructor(private authService: AuthService, private router: Router) {}

  canActivate(): Observable<boolean> {
    return this.authService.getCurrentUser().pipe(
      take(1),
      map(user => {
        if (user?.role !== 'DOCTOR') {
          this.router.navigate(['/main']);
          return false;
        }
        return true;
      })
    );
  }
}

================
File: src/app/guards/no-auth.guard.ts
================
// guards/no-auth.guard.ts
import { Injectable } from '@angular/core';
import { CanActivate, Router } from '@angular/router';
import { Observable, map, take } from 'rxjs';
import { AuthService } from '../services/auth.service';

@Injectable({
  providedIn: 'root'
})
export class NoAuthGuard implements CanActivate {
  constructor(private authService: AuthService, private router: Router) {}

  canActivate(): Observable<boolean> {
    return this.authService.isAuthenticated().pipe(
      take(1),
      map(isAuthenticated => {
        if (isAuthenticated) {
          // Get user role and redirect to appropriate profile
          this.authService.getCurrentUser().pipe(take(1)).subscribe(user => {
            switch(user?.role) {
              case 'ADMIN':
                this.router.navigate(['/admin-prof']);
                break;
              case 'DOCTOR':
                this.router.navigate(['/doc-prof']);
                break;
              case 'PATIENT':
                this.router.navigate(['/user-prof']);
                break;
              default:
                this.router.navigate(['/main']);
            }
          });
          return false;
        }
        return true;
      })
    );
  }
}

================
File: src/app/guards/patient.guard.ts
================
import { Injectable } from '@angular/core';
import { CanActivate, Router } from '@angular/router';
import { Observable, map, take } from 'rxjs';
import { AuthService } from '../services/auth.service';

@Injectable({
  providedIn: 'root'
})
export class PatientGuard implements CanActivate {
  constructor(private authService: AuthService, private router: Router) {}

  canActivate(): Observable<boolean> {
    return this.authService.getCurrentUser().pipe(
      take(1),
      map(user => {
        if (user?.role !== 'PATIENT') {
          this.router.navigate(['/main']);
          return false;
        }
        return true;
      })
    );
  }
}

================
File: src/app/interceptors/auth.interceptor.ts
================
import { Injectable } from '@angular/core';
import {
  HttpRequest,
  HttpHandler,
  HttpEvent,
  HttpInterceptor,
  HttpErrorResponse,
  HttpResponse
} from '@angular/common/http';
import { Observable, throwError } from 'rxjs';
import { catchError, tap } from 'rxjs/operators';
import { Router } from '@angular/router';

@Injectable()
export class AuthInterceptor implements HttpInterceptor {
  private readonly AUTH_HEADER = 'Authorization';
  private readonly TOKEN_PREFIX = 'Bearer ';

  constructor(private router: Router) {}

  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {
    // Get token from localStorage
    const token = localStorage.getItem('Token');

    // Clone and modify the request
    let modifiedRequest = request;

    if (token && !this.isPublicEndpoint(request.url)) {
      modifiedRequest = request.clone({
        headers: request.headers
          .set(this.AUTH_HEADER, `${this.TOKEN_PREFIX}${token}`)
          .set('Content-Type', 'application/json')
      });
    }

    // Process the request and handle responses/errors
    return next.handle(modifiedRequest).pipe(
      tap((event) => {
        if (event instanceof HttpResponse) {
          // Log successful responses if needed
          this.logResponse(event, modifiedRequest);
        }
      }),
      catchError((error: HttpErrorResponse) => {
        // Handle different types of errors
        return this.handleError(error);
      })
    );
  }

  private isPublicEndpoint(url: string): boolean {
    const publicEndpoints = [
      '/api/User/Authenticate',
      '/api/Patient/RegisterPatient',
      '/api/Doctor/GetDoctorCards'
    ];
    return publicEndpoints.some(endpoint => url.includes(endpoint));
  }

  private handleError(error: HttpErrorResponse): Observable<never> {
    if (error.status === 401) {
      // Handle unauthorized access
      localStorage.removeItem('Token');
      this.router.navigate(['/main']);
      return throwError(() => new Error('Unauthorized access. Please log in again.'));
    }

    if (error.status === 403) {
      // Handle forbidden access
      this.router.navigate(['/main']);
      return throwError(() => new Error('Access forbidden. You do not have permission to access this resource.'));
    }

    if (error.status === 404) {
      // Handle not found errors
      return throwError(() => new Error('The requested resource was not found.'));
    }

    if (error.status === 0) {
      // Handle connection errors
      return throwError(() => new Error('A connection error occurred. Please check your internet connection.'));
    }

    // Handle other errors
    const errorMessage = error.error?.message || 'An unexpected error occurred.';
    return throwError(() => new Error(errorMessage));
  }

  private logResponse(response: HttpResponse<any>, request: HttpRequest<unknown>): void {
    // Only log in development environment
    if (!this.isProduction()) {
      const logMessage = `[HTTP] ${request.method} ${request.url} ${response.status}`;
      console.log(logMessage);
    }
  }

  private isProduction(): boolean {
    // TODO: Replace with actual environment check
    return false;
  }
}

================
File: src/app/Models/doctorCard.model.ts
================
export class DoctorCard {
  constructor(
    public userId:number=0,
    public doctorId: number = 0,
    public firstName: string = '',
    public lastName: string = '',
    public email:string = '',
    public personalNumber = '',
    public specialty: string = '',
    public photoUrl: string = '',
    public rating: number = 0,
    public isPinned:boolean = false
  ) {}
}

================
File: src/app/Models/Login.model.ts
================
export class UserLoginDto{
    public email:string;
    public password:string;
    constructor(email:string,password:string){
        this.email = email;
        this.password = password;
    }
}

================
File: src/app/Models/Patient.model.ts
================
import { first } from "rxjs";

export interface User {
    userId: number;
    firstName: string;
    lastName: string;
    email: string;
    personalNumber: string;
    role: string;
    password?: string;
    // Additional fields for doctors
    specialization?: string;
    rating?: number;
    photoUrl?: string;
    cvUrl?:string;
}

================
File: src/app/modules/admin/admin-routing.module.ts
================
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { AdminGuard } from '../../guards/admin.guard';
import { AdminCategoriesComponent } from '../../pages/admin-categories/admin-categories.component';
import { AdminProfileComponent } from '../../pages/admin-profile/admin-profile.component';
import { DoctorRegistrationComponent } from '../../pages/doctor-registration/doctor-registration.component';

const routes: Routes = [
  {
    path: 'categories',
    component: AdminCategoriesComponent,
    canActivate: [AdminGuard]
  },
  {
    path: 'profile',
    component: AdminProfileComponent,
    canActivate: [AdminGuard]
  },
  {
    path: 'profile/:id',
    component: AdminProfileComponent,
    canActivate: [AdminGuard]
  },
  {
    path: 'doctor-registration',
    component: DoctorRegistrationComponent,
    canActivate: [AdminGuard]
  }
];

@NgModule({
  imports: [RouterModule.forChild(routes)],
  exports: [RouterModule]
})
export class AdminRoutingModule { }

================
File: src/app/modules/admin/admin.module.ts
================
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { AdminRoutingModule } from './admin-routing.module';
import { SharedModule } from '../shared/shared.module';
import { AdminCategoriesComponent } from '../../pages/admin-categories/admin-categories.component';
import { AdminProfileComponent } from '../../pages/admin-profile/admin-profile.component';
import { DoctorRegistrationComponent } from '../../pages/doctor-registration/doctor-registration.component';

@NgModule({
  declarations: [
    AdminCategoriesComponent,
    AdminProfileComponent,
    DoctorRegistrationComponent
  ],
  imports: [
    CommonModule,
    SharedModule,
    AdminRoutingModule
  ]
})
export class AdminModule { }

================
File: src/app/modules/doctor/admin-routing.ts
================
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { DoctorGuard } from '../../guards/doctor.guard';
import { DoctorProfileComponent } from '../../pages/doctor-profile/doctor-profile.component';

const routes: Routes = [
  {
    path: 'profile',
    component: DoctorProfileComponent,
    canActivate: [DoctorGuard]
  }
];

@NgModule({
  imports: [RouterModule.forChild(routes)],
  exports: [RouterModule]
})
export class DoctorRoutingModule { }

================
File: src/app/modules/doctor/doctor.module.ts
================
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { DoctorRoutingModule } from './admin-routing';
import { SharedModule } from '../shared/shared.module';
import { DoctorProfileComponent } from '../../pages/doctor-profile/doctor-profile.component';

@NgModule({
  declarations: [
    DoctorProfileComponent
  ],
  imports: [
    CommonModule,
    SharedModule,
    DoctorRoutingModule
  ]
})
export class DoctorModule { }

================
File: src/app/modules/patient/patient-routing.ts
================
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { PatientGuard } from '../../guards/patient.guard';
import { UserProfileComponent } from '../../pages/user-profile/user-profile.component';
import { BookAppointmentComponent } from '../../pages/book-appointment/book-appointment.component';

const routes: Routes = [
  {
    path: 'profile',
    component: UserProfileComponent,
    canActivate: [PatientGuard]
  },
  {
    path: 'book-appointment/:id',
    component: BookAppointmentComponent,
    canActivate: [PatientGuard]
  }
];

@NgModule({
  imports: [RouterModule.forChild(routes)],
  exports: [RouterModule]
})
export class PatientRoutingModule { }

================
File: src/app/modules/patient/patient.module.ts
================
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { PatientRoutingModule } from './patient-routing';
import { SharedModule } from '../shared/shared.module';
import { UserProfileComponent } from '../../pages/user-profile/user-profile.component';
import { BookAppointmentComponent } from '../../pages/book-appointment/book-appointment.component';

@NgModule({
  declarations: [
    UserProfileComponent,
    BookAppointmentComponent
  ],
  imports: [
    CommonModule,
    SharedModule,
    PatientRoutingModule
  ]
})
export class PatientModule { }

================
File: src/app/modules/registration/registration-routing.modue.ts
================
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { RegistrationComponent } from '../../pages/registration/registration.component';
import { NoAuthGuard } from '../../guards/no-auth.guard';

const routes: Routes = [
  {
    path: '',
    component: RegistrationComponent,
    canActivate: [NoAuthGuard]
  }
];

@NgModule({
  imports: [RouterModule.forChild(routes)],
  exports: [RouterModule]
})
export class RegistrationRoutingModule { }

================
File: src/app/modules/registration/registration.module.ts
================
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { RegistrationRoutingModule } from './registration-routing.modue';
import { SharedModule } from '../shared/shared.module';
import { RegistrationComponent } from '../../pages/registration/registration.component';

@NgModule({
  declarations: [
    RegistrationComponent
  ],
  imports: [
    CommonModule,
    SharedModule,
    RegistrationRoutingModule
  ]
})
export class RegistrationModule { }

================
File: src/app/modules/shared/shared.module.ts
================
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ReactiveFormsModule, FormsModule } from '@angular/forms';
import { CalendarModule } from 'primeng/calendar';
import { CategoriesComponent } from '../../components/categories/categories.component';
import { CalendarComponent } from '../../components/calendar/calendar.component';
import { DoctorProfileCardComponent } from '../../components/doctor-profile-card/doctor-profile-card.component';

@NgModule({
  declarations: [
    CategoriesComponent,
    CalendarComponent,
    DoctorProfileCardComponent
  ],
  imports: [
    CommonModule,
    ReactiveFormsModule,
    FormsModule,
    CalendarModule
  ],
  exports: [
    ReactiveFormsModule,
    FormsModule,
    CalendarModule,
    CategoriesComponent,
    CalendarComponent,
    DoctorProfileCardComponent
  ]
})
export class SharedModule { }

================
File: src/app/pages/admin-categories/admin-categories.component.css
================
.outer-container {
    width: 100%;
    max-width: 1460px;
    margin: 0 auto 50px;
    padding: 20px;
    display: flex;
    flex-direction: column;
    align-items: flex-start;
  }
  
  h1 {
    color: #18A4E1;
    margin: 0 0 45px 0;
    padding: 0;
    align-self: flex-start;
  }
  
  .table-container {
    width: 100%;
    background-color: white;
    border-radius: 8px;
    box-shadow: 0 0 10px rgba(0,0,0,0.1);
    overflow: hidden;
  }
  
  .table-wrapper {
    height: 480px; /* Adjust this value to match your design */
    overflow-y: auto;
  }
  
  table {
    width: 100%;
    border-collapse: collapse;
  }
  
  th, td {
    padding: 12px;
    text-align: center;
    border-bottom: 1px solid #e0e0e0;
    height: 68px;
  }
  
  th {
    position: sticky;
    top: 0;
    background-color: #F0FAFF;
    font-weight: bold;
    z-index: 1;
  }
  
  .user-image {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    object-fit: cover;
  }
  
  .rating {
    color: #ffc107;
  }
  
  .action-buttons {
    display: flex;
    gap: 10px;
  }
  
  .edit-btn, .delete-btn {
    width: 42px;
    height: 42px;
    border: none;
    padding: 0;
    border-radius: 20px;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  
  .edit-btn {
    background-color: #DAFAEE;
  }
  
  .delete-btn {
    background-color: #FF93A6;
  }
  
  /* Scrollbar styles */
  .table-wrapper::-webkit-scrollbar {
    width: 8px;
  }
  
  .table-wrapper::-webkit-scrollbar-track {
    background: #f1f1f1;
  }
  
  .table-wrapper::-webkit-scrollbar-thumb {
    background: #888;
    border-radius: 4px;
  }
  
  .table-wrapper::-webkit-scrollbar-thumb:hover {
    background: #555;
  }

================
File: src/app/pages/admin-categories/admin-categories.component.html
================
<div class="outer-container">
    <h1>კატეგორიები</h1>
    <div class="table-container">
      <div class="table-wrapper">
        <table>
          <thead>
            <tr>
              <th>სახელი</th>
              <th>კატეგორია</th>
              <th>ფოტოსურათი</th>
              <th>რეიტინგი</th>
              <th></th>
            </tr>
          </thead>
          <tbody>
            <tr *ngFor="let row of doctors">
              <td>{{ row.firstName }} {{row.lastName}}</td>
              <td>{{ row.specialty }}</td>
              <td><img [src]="row.photoUrl" alt="User" class="user-image"></td>
              <td class="rating">
                <ng-container *ngFor="let filled of getStarsArray(row.rating)">
                  <svg xmlns="http://www.w3.org/2000/svg" 
                       width="17" 
                       height="17" 
                       [attr.fill]="filled ? '#FFD233' : '#ECF2F8'"
                       viewBox="0 0 256 256">
                      <path d="M234.5,114.38l-45.1,39.36,13.51,58.6a16,16,0,0,1-23.84,17.34l-51.11-31-51,31a16,16,0,0,1-23.84-17.34L66.61,153.8,21.5,114.38a16,16,0,0,1,9.11-28.06l59.46-5.15,23.21-55.36a15.95,15.95,0,0,1,29.44,0h0L166,81.17l59.44,5.15a16,16,0,0,1,9.11,28.06Z"></path>
                  </svg>
              </ng-container>
              </td>
              <td>
                <div class="action-buttons">

                  <button class="edit-btn"(click)="toggleVisibility()" [routerLink]="['/admin/profile/'+ row.doctorId]">
                    <svg width="26" height="26" viewBox="0 0 26 26" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path fill-rule="evenodd" clip-rule="evenodd" d="M15.3698 4.19626C16.1775 3.73881 17.1339 3.62097 18.0285 3.86864C18.4252 3.97846 18.7641 4.16977 19.0835 4.38584C19.387 4.59106 19.735 4.86275 20.1384 5.17765L20.1972 5.22359C20.6006 5.53849 20.9488 5.81018 21.2215 6.05472C21.5087 6.3122 21.7765 6.59455 21.9794 6.95268C22.4369 7.76039 22.5547 8.71675 22.307 9.61135C22.1972 10.008 22.0059 10.347 21.7898 10.6664C21.5846 10.9699 21.3129 11.318 20.9979 11.7214L12.7114 22.3372C12.6904 22.3641 12.6698 22.3905 12.6493 22.4168C12.2604 22.9155 11.9663 23.2926 11.6021 23.6024C11.294 23.8645 10.953 24.0855 10.5879 24.2597C10.1565 24.4655 9.69211 24.5799 9.07787 24.7313C9.04567 24.7393 9.01305 24.7473 8.98001 24.7555L6.50105 25.3674C6.32938 25.4099 6.13341 25.4584 5.96055 25.4849C5.76784 25.5145 5.46943 25.5414 5.13984 25.4359C4.74364 25.309 4.40559 25.0451 4.18633 24.6916C4.00393 24.3974 3.95752 24.1015 3.93947 23.9073C3.92328 23.7331 3.92271 23.5313 3.92221 23.3544C3.92217 23.3435 3.92215 23.3326 3.92211 23.3219L3.9141 20.8011C3.91398 20.767 3.91386 20.7334 3.91375 20.7003C3.91147 20.0677 3.90976 19.5894 4.00469 19.121C4.08505 18.7244 4.21663 18.34 4.39612 17.9775C4.60817 17.5491 4.9026 17.1723 5.29206 16.6738C5.31248 16.6476 5.33316 16.6211 5.35411 16.5943L13.6407 5.9784C13.9555 5.57498 14.2273 5.22688 14.4718 4.95413C14.7293 4.66695 15.0116 4.39909 15.3698 4.19626ZM17.4058 6.11738C17.1076 6.03482 16.7889 6.0741 16.5196 6.22659C16.4739 6.25249 16.3871 6.31324 16.2092 6.51174C16.0242 6.71808 15.8013 7.00245 15.457 7.44354L19.1357 10.315C19.4801 9.87394 19.7017 9.58878 19.857 9.35924C20.0065 9.13839 20.0443 9.03942 20.0583 8.98877C20.1409 8.69057 20.1015 8.37179 19.9491 8.10255C19.9232 8.05683 19.8624 7.97002 19.6639 7.79204C19.4575 7.60704 19.1732 7.38427 18.7321 7.03996C18.291 6.69566 18.0059 6.47387 17.7764 6.31862C17.5555 6.16926 17.4565 6.1314 17.4058 6.11738ZM17.7 12.1543L14.0213 9.28286L7.19343 18.03C6.71538 18.6424 6.58057 18.8242 6.48725 19.0127C6.39751 19.194 6.33171 19.3861 6.29154 19.5844C6.24976 19.7905 6.24495 20.0167 6.24742 20.7936L6.25451 23.025L8.42076 22.4902C9.17502 22.304 9.39328 22.2444 9.58312 22.1537C9.7657 22.0667 9.93617 21.9562 10.0903 21.8251C10.2505 21.6888 10.394 21.5139 10.8721 20.9015L17.7 12.1543Z" fill="#3ACF99"/>
                  </svg>
                </button>
                <button class="delete-btn" (click)="deleteDoctor(row.doctorId)">
                  <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M20 5C20.5523 5 21 5.44772 21 6C21 6.55228 20.5523 7 20 7H19.0001L18.9975 7.07129L18.0638 20.1425C17.9891 21.1891 17.1182 22 16.0689 22H7.93116C6.88189 22 6.011 21.1891 5.93624 20.1425L5.00258 7.07129C5.00088 7.04738 5.00002 7.02361 5 7H4C3.44772 7 3 6.55228 3 6C3 5.44772 3.44772 5 4 5H20ZM16.9975 7H7.00259L7.93116 20H16.0689L16.9975 7ZM14 2C14.5523 2 15 2.44772 15 3C15 3.55228 14.5523 4 14 4H10C9.44772 4 9 3.55228 9 3C9 2.44772 9.44772 2 10 2H14Z" fill="white"/>
                  </svg>
                </button>
              </div>
            </td>
            </tr>
          </tbody>
        </table>
      </div>
    </div>
  </div>

================
File: src/app/pages/admin-categories/admin-categories.component.ts
================
import { Component, OnInit } from '@angular/core';
import { DoctorCard } from '../../Models/doctorCard.model';
import { DoctorService } from '../../services/doctor.service';
import { VisibilityService } from '../../services/visibility.service';


@Component({
  selector: 'app-admin-categories',
  templateUrl: './admin-categories.component.html',
  styleUrl: './admin-categories.component.css'
  
})

export class AdminCategoriesComponent implements OnInit {
 doctors:DoctorCard[]=[];

 constructor(public doctorService:DoctorService,private visibilityService:VisibilityService){}

 toggleVisibility(){

  this.visibilityService.setVisibility(true);
 }

  ngOnInit() {

    this.doctorService.getDoctorCard().subscribe(data=>{
      this.doctorService.cardsList = data;
      this.doctors = data;
    }) 
  }

  deleteDoctor(id:number){
    this.doctorService.deleteDoctorById(id).subscribe(res=>{
      this.doctorService.getDoctorCard().subscribe(data=>{
        this.doctorService.cardsList = data;
        this.doctors = data;
    });
  });
}

  getStarsArray(rating: number): number[] {
    return Array(5).fill(0).map((_, i) => i < rating ? 1 : 0);
  }

}

================
File: src/app/pages/admin-profile/admin-profile.component.css
================
/* CSS */
.admin-container {
    width: 100%;
    max-width: 1440px;
    margin: 0 auto;
    padding: 20px;
}

.buttons-container {
    margin: 50px auto;
    display: flex;
    flex-direction: row;
    width: 100%;
    gap: 50px;
    justify-content: space-around;
}

.action-buttons-container {
    width: 450px;
    display: flex;
    height: 45px;
    border: 1px solid #f2f2f2;
    border-radius: 20px;
    align-items: center;
    justify-content: space-around;
    flex-shrink: 0;
}

.action-button {
    border: none;
    background-color: transparent;
    cursor: pointer;
    font-weight: 500;
    font-size: 16px;
    padding: 8px 16px;
    transition: color 0.3s ease;
}

.action-button:hover {
    color: #18a4e1;
}

.active_button {
    color: #18a4e1;
}

.user-buttons {
    display: flex;
    gap: 20px;
    flex-grow: 1;
    max-width: 800px;
    justify-content: space-between;
}

.user-button {
    flex: 1;
    height: 45px;
    border: 1px solid #18a4e1;
    border-radius: 40px;
    background-color: transparent;
    cursor: pointer;
    font-weight: 500;
    font-size: 16px;
    color: #18a4e1;
    transition: all 0.3s ease;
}

.user-button:hover {
    background-color: #18a4e1;
    color: white;
}
.sel-doc {
  width: 100%;
  padding: 0 20px;
}

.sel-doc-container {
  display: flex;
  gap: 40px; /* Increased gap for better spacing */
  width: 100%;
  max-width: 1600px; /* Increased max-width to accommodate both sections */
  margin: 0 auto;
  justify-content: center; /* Centers the content */
}

.sel-doc-info {
  flex: 1;
  
  min-width: 750px; /* Minimum width for smaller screens */
}

.calendar-wrapper {
  flex: 1;
  min-width: 830px;
}
.doctor-card {
    background: #FFFFFF;
    border-radius: 16px;
    padding: 24px;
    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.08);
    margin-bottom: 20px;
}

.card-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 24px;
    align-items: start;
}

.column.basic-info {
    display: flex;
    flex-direction: column;
    align-items: center;
    text-align: center;
}

.doctor-avatar {
    width: 120px;
    height: 120px;
    border-radius: 50%;
    object-fit: cover;
    margin-bottom: 16px;
    border: 2px solid #F5F5F5;
}

.doctor-header {
    width: 100%;
}

.doctor-name {
    font-size: 20px;
    font-weight: 600;
    color: #1A1A1A;
    margin-bottom: 8px;
}

.doctor-role {
    font-size: 14px;
    color: #666666;
    margin-bottom: 4px;
}

.doctor-specialty {
    font-size: 14px;
    color: #666666;
    margin-bottom: 12px;
}

.rating {
    display: flex;
    justify-content: center;
    gap: 4px;
}

.star {
    color: #FFD700;
    font-size: 18px;
}

.column.details {
    display: flex;
    flex-direction: column;
    gap: 16px;
}

.detail-row {
    margin-bottom: 16px;
}

.detail-label {
    display: flex;
    align-items: center;
    gap: 8px;
    color: #666666;
    font-size: 14px;
    margin-bottom: 4px;
}

.detail-label i {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 24px;
    height: 24px;
}

.detail-value {
    color: #1A1A1A;
    font-size: 14px;
    margin-left: 24px;
    word-break: break-word;
    transition: all 0.3s ease;
}
.detail-value.editable {
    background-color: #f8f9fa;
    border: 1px solid #e9ecef;
    border-radius: 4px;
    padding: 4px 8px;
    cursor: pointer;
}

.detail-value.editable:hover {
    background-color: #e9ecef;
    border-color: #dee2e6;
}

.password-change {
    cursor: pointer;
}

.password-change .detail-label {
    color: #18A4E1;
}

.column.additional-content {
    display: flex;
    flex-direction: column;
    gap: 16px;
}

.doctor-actions {
    display: flex;
    justify-content: space-between;
    gap: 12px;
    width: 100%;
}

.btn {
    flex: 1;
    height: 40px;
    border-radius: 20px;
    border: none;
    font-size: 18px;
    font-weight: 500;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 8px;
    transition: all 0.2s ease;
}

.btn:hover {
    opacity: 0.9;
    transform: translateY(-1px);
}

.btn-add {
    background: #3ACF99;
    color: white;
}

.btn-edit {
    background: #ECF2F8;
    color: #18A4E1;
  }
  .btn-edit:hover {
    background: #dde5ed;
}

.btn-edit.active {
    background: #18A4E1;
    color: white;
}

.btn-delete {
    background: #FF93A6;
    color: white;
}

.plus-icon {
    font-size: 18px;
    font-weight: bold;
}

/* Responsive Design */
@media (max-width: 1200px) {
    .buttons-container {
        flex-direction: column;
        align-items: center;
        gap: 20px;
    }

    .user-buttons {
        width: 100%;
        max-width: none;
    }
}

@media (max-width: 992px) {
    .sel-doc-container {
        flex-direction: column;
    }

    .calendar-wrapper {
        max-width: none;
    }

    .card-grid {
        grid-template-columns: 1fr 1fr;
    }
}

@media (max-width: 768px) {
    .action-buttons-container {
        width: 100%;
    }

    .user-buttons {
        flex-direction: column;
    }

    .card-grid {
        grid-template-columns: 1fr;
    }

    .doctor-actions {
        flex-direction: column;
    }

    .btn {
        width: 100%;
    }
}

================
File: src/app/pages/admin-profile/admin-profile.component.html
================
<div class="admin-container">
    <div class="buttons-container">
        <div class="action-buttons-container">
            <button class="action-button" routerLink="/admin/doctor-registration">რეგისტრაცია</button>
            <button class="action-button" routerLink="/admin/categories">კატეგორია</button>
            <button class="action-button">ექიმები</button>
        </div>
        <div class="user-buttons">
            <button class="user-button">ექიმი</button>
            <button class="user-button">მომხმარებელი</button>
            <button class="user-button">ადმინისტრატორი</button>
        </div>
    </div>

    <div class="sel-doc" *ngIf="isVisible" >
        <div class="sel-doc-container">
            <!-- Doctor Info Section -->
            <div class="sel-doc-info">
                <div class="doctor-card">
                    <div class="card-grid">
                        <!-- Column 1: Basic Info -->
                        <div class="column basic-info">
                            <img [src]="doctor.photoUrl" alt="გიორგი სირაძე" class="doctor-avatar">
                            <div class="doctor-header">
                                <h3 class="doctor-name">{{doctor.firstName}} {{doctor.lastName}}</h3>
                                <p class="doctor-role">ექიმი</p>
                                <p class="doctor-specialty">{{doctor.specialty}}</p>
                                <div class="rating">
                                    <ng-container *ngFor="let filled of getStarsArray(doctor.rating)">
                                        <svg xmlns="http://www.w3.org/2000/svg" 
                                             width="17" 
                                             height="17" 
                                             [attr.fill]="filled ? '#FFD233' : '#ECF2F8'"
                                             viewBox="0 0 256 256">
                                            <path d="M234.5,114.38l-45.1,39.36,13.51,58.6a16,16,0,0,1-23.84,17.34l-51.11-31-51,31a16,16,0,0,1-23.84-17.34L66.61,153.8,21.5,114.38a16,16,0,0,1,9.11-28.06l59.46-5.15,23.21-55.36a15.95,15.95,0,0,1,29.44,0h0L166,81.17l59.44,5.15a16,16,0,0,1,9.11,28.06Z"></path>
                                        </svg>
                                    </ng-container>
                                </div>
                            </div>
                        </div>

                        <!-- Column 2: Details -->
                        <div class="column details">
                            <div class="detail-row">
                                <div class="detail-label">
                                    <i class="icon-id" *ngIf="isEditVisible"><svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                        <path d="M16.862 4.487l1.687-1.688a1.875 1.875 0 112.652 2.652L10.582 16.07a4.5 4.5 0 01-1.897 1.13L6 18l.8-2.685a4.5 4.5 0 011.13-1.897l8.932-8.931zm0 0L19.5 7.125M18 14v4.75A2.25 2.25 0 0115.75 21H5.25A2.25 2.25 0 013 18.75V8.25A2.25 2.25 0 015.25 6H10" stroke="#18A4E1" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                                    </svg></i>
                                    <span>პირადი ნომერი :</span>
                                </div>
                                <span class="detail-value" [class.editable]="isEditVisible">{{doctor.personalNumber}}</span>
                            </div>

                            <div class="detail-row">
                                <div class="detail-label">
                                    <i class="icon-email" *ngIf="isEditVisible"><svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                        <path d="M16.862 4.487l1.687-1.688a1.875 1.875 0 112.652 2.652L10.582 16.07a4.5 4.5 0 01-1.897 1.13L6 18l.8-2.685a4.5 4.5 0 011.13-1.897l8.932-8.931zm0 0L19.5 7.125M18 14v4.75A2.25 2.25 0 0115.75 21H5.25A2.25 2.25 0 013 18.75V8.25A2.25 2.25 0 015.25 6H10" stroke="#18A4E1" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                                    </svg></i>
                                    <span>Email :</span>
                                </div>
                                <span class="detail-value" [class.editable]="isEditVisible">{{doctor.email}}</span>
                            </div>

                            <div class="detail-row password-change">
                                <div class="detail-label">
                                  
                                    <span>პაროლის შეცვლა</span>
                                </div>
                            </div>
                            
                        </div>

                        <!-- Column 3: -->
                        <div class="column additional-content">
                            <div class="detail-row">
                                <div class="detail-label">
                                    <i class="icon-id" *ngIf="isEditVisible"><svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                        <path d="M16.862 4.487l1.687-1.688a1.875 1.875 0 112.652 2.652L10.582 16.07a4.5 4.5 0 01-1.897 1.13L6 18l.8-2.685a4.5 4.5 0 011.13-1.897l8.932-8.931zm0 0L19.5 7.125M18 14v4.75A2.25 2.25 0 0115.75 21H5.25A2.25 2.25 0 013 18.75V8.25A2.25 2.25 0 015.25 6H10" stroke="#18A4E1" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                                    </svg></i>
                                    <span>დაჯავშნილია :</span>
                                </div>
                                <span class="detail-value" [class.editable]="isEditVisible">{{doctor.personalNumber}}</span>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Action buttons -->
                <div class="doctor-actions">
                    <button class="btn btn-add">
                        <span class="plus-icon">+</span> დამატება
                    </button>
                    <button class="btn btn-edit" (click)="toggleEditVisibility()" >
                        <i class="icon-edit"></i>
                        <svg width="28" height="28" viewBox="0 0 28 28" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <g clip-path="url(#clip0_35_2130)">
                            <path fill-rule="evenodd" clip-rule="evenodd" d="M15.3698 4.19628C16.1775 3.73883 17.1339 3.62098 18.0285 3.86865C18.4252 3.97847 18.7641 4.16978 19.0835 4.38586C19.387 4.59108 19.735 4.86277 20.1384 5.17766L20.1972 5.22361C20.6006 5.5385 20.9488 5.8102 21.2215 6.05474C21.5087 6.31221 21.7765 6.59457 21.9794 6.9527C22.4369 7.76041 22.5547 8.71677 22.307 9.61137C22.1972 10.008 22.0059 10.347 21.7898 10.6665C21.5846 10.9699 21.3129 11.318 20.9979 11.7214L12.7114 22.3372C12.6904 22.3641 12.6698 22.3906 12.6493 22.4168C12.2604 22.9156 11.9663 23.2926 11.6021 23.6024C11.294 23.8645 10.953 24.0855 10.5879 24.2597C10.1565 24.4655 9.69211 24.5799 9.07787 24.7314C9.04567 24.7393 9.01305 24.7473 8.98001 24.7555L6.50105 25.3674C6.32938 25.4099 6.13341 25.4584 5.96055 25.4849C5.76784 25.5145 5.46943 25.5414 5.13984 25.4359C4.74364 25.309 4.40559 25.0451 4.18633 24.6916C4.00393 24.3975 3.95752 24.1015 3.93947 23.9073C3.92328 23.7332 3.92271 23.5313 3.92221 23.3545C3.92217 23.3435 3.92215 23.3326 3.92211 23.3219L3.9141 20.8011C3.91398 20.767 3.91386 20.7334 3.91375 20.7003C3.91147 20.0677 3.90976 19.5894 4.00469 19.121C4.08505 18.7244 4.21663 18.34 4.39612 17.9775C4.60817 17.5491 4.9026 17.1723 5.29206 16.6738C5.31248 16.6476 5.33316 16.6212 5.35411 16.5943L13.6407 5.97842C13.9555 5.575 14.2273 5.2269 14.4718 4.95414C14.7293 4.66697 15.0116 4.3991 15.3698 4.19628ZM17.4058 6.11739C17.1076 6.03484 16.7889 6.07412 16.5196 6.2266C16.4739 6.2525 16.3871 6.31325 16.2092 6.51176C16.0242 6.7181 15.8013 7.00247 15.457 7.44355L19.1357 10.315C19.4801 9.87395 19.7017 9.58879 19.857 9.35925C20.0065 9.1384 20.0443 9.03943 20.0583 8.98879C20.1409 8.69059 20.1015 8.37181 19.9491 8.10257C19.9232 8.05684 19.8624 7.97003 19.6639 7.79206C19.4575 7.60706 19.1732 7.38428 18.7321 7.03998C18.291 6.69567 18.0059 6.47389 17.7764 6.31864C17.5555 6.16927 17.4565 6.13141 17.4058 6.11739ZM17.7 12.1543L14.0213 9.28287L7.19343 18.03C6.71538 18.6424 6.58057 18.8242 6.48725 19.0127C6.39751 19.194 6.33171 19.3862 6.29154 19.5844C6.24976 19.7905 6.24495 20.0167 6.24742 20.7936L6.25451 23.025L8.42076 22.4902C9.17502 22.304 9.39328 22.2444 9.58312 22.1537C9.7657 22.0667 9.93617 21.9562 10.0903 21.8251C10.2505 21.6888 10.394 21.5139 10.8721 20.9015L17.7 12.1543Z" fill="#18A4E1"/>
                            </g>
                            <defs>
                            <clipPath id="clip0_35_2130">
                            <rect width="28" height="28" fill="white"/>
                            </clipPath>
                            </defs>
                            </svg>
                            რედაქტირება
                    </button>
                    <button class="btn btn-delete" (click)="toggleVisibility()">
                       <svg width="26" height="26" viewBox="0 0 26 26" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M4.33333 24.9166H21.6667C21.954 24.9166 22.2295 24.8025 22.4327 24.5993C22.6359 24.3962 22.75 24.1206 22.75 23.8333V6.49998C22.7499 6.21269 22.6358 5.93718 22.4326 5.73406L18.0993 1.40073C17.8961 1.19755 17.6206 1.08337 17.3333 1.08331H4.33333C4.04602 1.08331 3.77047 1.19745 3.5673 1.40061C3.36414 1.60378 3.25 1.87933 3.25 2.16665V23.8333C3.25 24.1206 3.36414 24.3962 3.5673 24.5993C3.77047 24.8025 4.04602 24.9166 4.33333 24.9166ZM5.41667 3.24998H16.8848L20.5833 6.94848V22.75H5.41667V3.24998ZM16.4742 11.0576L14.5318 13L16.4742 14.9424C16.5777 15.0423 16.6603 15.1619 16.717 15.294C16.7738 15.4262 16.8037 15.5684 16.8049 15.7122C16.8062 15.8561 16.7788 15.9987 16.7243 16.1318C16.6698 16.265 16.5894 16.3859 16.4877 16.4877C16.386 16.5894 16.265 16.6698 16.1319 16.7243C15.9987 16.7788 15.8561 16.8062 15.7122 16.8049C15.5684 16.8037 15.4262 16.7738 15.2941 16.717C15.1619 16.6602 15.0424 16.5777 14.9424 16.4742L13 14.5318L11.0576 16.4742C10.8533 16.6716 10.5796 16.7808 10.2956 16.7783C10.0115 16.7758 9.73981 16.6619 9.53895 16.461C9.33809 16.2602 9.22416 15.9885 9.22169 15.7044C9.21922 15.4204 9.32841 15.1467 9.52575 14.9424L11.4682 13L9.52575 11.0576C9.32841 10.8532 9.21922 10.5796 9.22169 10.2955C9.22416 10.0115 9.33809 9.73979 9.53895 9.53893C9.73981 9.33807 10.0115 9.22414 10.2956 9.22167C10.5796 9.2192 10.8533 9.32839 11.0576 9.52573L13 11.4681L14.9424 9.52573C15.1467 9.32839 15.4204 9.2192 15.7044 9.22167C15.9885 9.22414 16.2602 9.33807 16.4611 9.53893C16.6619 9.73979 16.7758 10.0115 16.7783 10.2955C16.7808 10.5796 16.6716 10.8532 16.4742 11.0576Z" fill="white"/>
                            </svg>
                            
                        წაშლა
                    </button>
                </div>
            </div>

            <!-- Calendar Section -->
            <div class="calendar-wrapper">
                <app-calendar></app-calendar>
            </div>
        </div>
    </div>
</div>

================
File: src/app/pages/admin-profile/admin-profile.component.ts
================
import { Component, OnInit } from '@angular/core';
import { VisibilityService } from '../../services/visibility.service';
import { DoctorCard } from '../../Models/doctorCard.model';
import { DoctorService } from '../../services/doctor.service';
import { ActivatedRoute, Router } from '@angular/router';

@Component({
  selector: 'app-admin-profile',
  templateUrl: './admin-profile.component.html',
  styleUrl: './admin-profile.component.css'
})
export class AdminProfileComponent implements OnInit {
  isVisible: boolean = false;
  isEditVisible:boolean = false;
  doctor:any=null;
  constructor(private visibilityService:VisibilityService, private doctorService:DoctorService, private route:ActivatedRoute,private router:Router){}

  ngOnInit() {
    this.visibilityService.isVisible$.subscribe(visible => {
      this.isVisible = visible;
      
      if(this.isVisible){
        const id = this.route.snapshot.paramMap.get('id');
        this.doctorService.getDoctorById(Number(id)).subscribe(data=>{
          this.doctor = data;
        });
      }
    });
    this.visibilityService.isEditVisible$.subscribe(visible=>{
      this.isEditVisible = visible;
    });
  }

  toggleEditVisibility(){
    this.visibilityService.toggleEditVisibility();
  }

  toggleVisibility(){
    this.visibilityService.toggleVisibility();    
  }
  getStarsArray(rating: number): number[] {
    return Array(5).fill(0).map((_, i) => i < rating ? 1 : 0);
  }
 
}

================
File: src/app/pages/book-appointment/book-appointment.component.css
================
.cont-app {
  padding: 40px 5%;
  display: flex;
  gap: 5%;
  max-width: 100%;
  overflow-x: hidden;
}

.calendar-section {
  width: 100%;
  max-width: 1111px;
  margin-top: 70px;
}

@media (max-width: 1200px) {
  .cont-app {
    flex-direction: column;
    align-items: center;
  }

  .left-column, .right-column {
    width: 100%;
  }

  .calendar-section {
    margin-top: 40px;
  }
}

@media (max-width: 768px) {
  .cont-app {
    padding: 20px 3%;
  }

  .calendar-section {
    margin-top: 30px;
  }
}

@media (max-width: 480px) {
  .cont-app {
    padding: 10px 2%;
  }

  .calendar-section {
    margin-top: 20px;
  }
}

================
File: src/app/pages/book-appointment/book-appointment.component.html
================
<div class="cont-app">
    <div class="left-column">
        <app-categories></app-categories>
    </div>
    <div class="right-column">
        <div class="doctor-card">
            <app-doctor-profile-card [doctorId]="doctorId"></app-doctor-profile-card>
        </div>
        <div class="calendar-section">
       <app-calendar></app-calendar></div>
        </div>
</div>

================
File: src/app/pages/book-appointment/book-appointment.component.ts
================
import { Component, OnInit } from '@angular/core';
import { ActivatedRoute } from '@angular/router';

@Component({
  selector: 'app-book-appointment',
  templateUrl: './book-appointment.component.html',
  styleUrl: './book-appointment.component.css'
})
export class BookAppointmentComponent implements OnInit {
  doctorId :number=0;
  isExpanded = false;
categories = [
  { count: 23424, name: 'კარდიოლოგი' },
  { count: 15678, name: 'პედიატრი' },
  { count: 19876, name: 'ნევროლოგი' },
  { count: 12345, name: 'ოფთალმოლოგი' },
  { count: 21098, name: 'დერმატოლოგი' },
  { count: 18765, name: 'ორთოპედი' },
  { count: 14567, name: 'გინეკოლოგი' },
  { count: 17890, name: 'ენდოკრინოლოგი' },
  { count: 13456, name: 'უროლოგი' },
  { count: 16789, name: 'გასტროენტეროლოგი' },
  { count: 20987, name: 'ოტორინოლარინგოლოგი' },
  { count: 11234, name: 'პულმონოლოგი' },
  { count: 15678, name: 'რევმატოლოგი' },
  { count: 19876, name: 'ონკოლოგი' },
  { count: 22345, name: 'ნეფროლოგი' },
  { count: 18765, name: 'ჰემატოლოგი' },
  { count: 14567, name: 'ალერგოლოგი' },
  { count: 17890, name: 'იმუნოლოგი' },
  { count: 21098, name: 'ფსიქიატრი' },
  { count: 13456, name: 'ნეიროქირურგი' },
];
selectedDate: Date | undefined;
minDate: Date;
maxDate: Date;

constructor(private route:ActivatedRoute) {
  this.minDate = new Date(); // Set minimum date to today
  this.maxDate = new Date();
  this.maxDate.setMonth(this.maxDate.getMonth() + 3); // Set maximum date to 3 months from now
}

visibleCategories: any[] | undefined;
hiddenCategories: any[] | undefined;

ngOnInit() {
  this.route.params.subscribe(params => {
    this.doctorId = +params['id']; // Convert string to number using '+'
  });
  this.splitCategories();
}

splitCategories() {
  this.visibleCategories = this.categories.slice(0, 14);
  this.hiddenCategories = this.categories.slice(14);
}
onDateSelect(event: Date) {
  console.log('Selected date:', event);
  // Add your logic for handling the selected date
}

toggleView() {
  this.isExpanded = !this.isExpanded;
}

}

================
File: src/app/pages/doctor-profile/doctor-profile.component.css
================
/* Main container for doctor profile */
.doc-prof{
  padding: 40px 5%;
  display: flex;
  gap: 30px;
  max-width: 1720px;
  margin: 0 auto;
  overflow-x: hidden;
}

/* Main content layout */
.main-content {
  display: flex;
  justify-content: space-between;
  padding: 20px;
  background-color: #f5f5f5;
  width: 100%;
}

/* Doctor profile card */
.doctor-profile {
  background-color: white;
  border-radius: 10px;
  padding: 20px;
  width: 366px;
  min-width: 300px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  text-align: center;

}

/* Doctor profile image */
.doctor-image {
  width: 150px;
  height: 150px;
  border-radius: 50%;
  margin-bottom: 15px;
  object-fit: cover;
}

/* Doctor name styling */
.doctor-name {
  font-size: 24px;
  margin-bottom: 5px;
  word-wrap: break-word;
}

/* Doctor specialty styling */
.doctor-specialty {
  color: #666;
  margin-bottom: 15px;
  font-size: 16px;
}

/* Rating stars */
.rating {
  color: #FFD700;
  font-size: 20px;
  margin-bottom: 15px;
}

/* Contact information section */
.contact-info {
  margin-bottom: 15px;
}

/* Phone and email labels */
.phone, .email {
  margin: 5px 0;
  color: #333;
}

h5 {
  margin: 5px 0 15px;
  word-break: break-word;
}

/* Experience and appointments styling */
.experience, .appointments {
  margin: 10px 0;
  color: #666;
}

/* Appointment count styling */
.appointments span {
  font-weight: bold;
  color: #333;
}

/* Password change link */
.password-change {
  margin: 10px 0;
  color: #666;
  cursor: pointer;
  transition: color 0.3s ease;
}

.password-change:hover {
  color: #333;
}

/* Calendar section styling */
.calendar-section {
  background-color: white;
  border-radius: 10px;
  padding: 20px;
  width: 830px;
  flex-grow: 1;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
}

/* Responsive Breakpoints */

/* Large screens */
@media (max-width: 1400px) {
  .doc-prof {
      max-width: 1208px;
  }
  
  .calendar-section {
      width: 700px;
  }
}

/* Medium-large screens */
@media (max-width: 1200px) {
  .doc-prof {
      padding: 20px 3%;
  }

  .calendar-section {
      width: 600px;
  }

  .doctor-profile {
      width: 320px;
      min-width: 280px;
  }
}

/* Tablet landscape */
@media (max-width: 992px) {
  .doc-prof {
      flex-direction: column;
      align-items: center;
      gap: 20px;
  }

  .doctor-profile {
      width: 100%;
      max-width: 500px;
  }

  .calendar-section {
      width: 100%;
      max-width: 800px;
  }

  app-categories {
      width: 100%;
      max-width: 800px;
  }
}

/* Tablet portrait */
@media (max-width: 768px) {
  .doc-prof {
      padding: 15px 2%;
  }

  .doctor-profile {
      padding: 15px;
  }

  .doctor-image {
      width: 120px;
      height: 120px;
  }

  .doctor-name {
      font-size: 20px;
  }

  .doctor-specialty {
      font-size: 14px;
  }

  .rating {
      font-size: 18px;
  }
}

/* Mobile devices */
@media (max-width: 480px) {
  .doc-prof {
      padding: 10px;
      gap: 15px;
  }

  .doctor-profile {
      padding: 12px;
  }

  .doctor-image {
      width: 100px;
      height: 100px;
  }

  .calendar-section {
      padding: 12px;
  }

  .contact-info {
      font-size: 14px;
  }

  h5 {
      font-size: 14px;
  }

  .rating {
      font-size: 16px;
  }

  .appointments, .password-change {
      font-size: 14px;
  }
}

================
File: src/app/pages/doctor-profile/doctor-profile.component.html
================
<div class="doc-prof">
    <app-categories></app-categories>
    <div class="doctor-profile"> 
      <div *ngIf="currentUser$|async as user">
        <img [src]="user.photourl" alt="გიორგი ხიზაძე" class="doctor-image">
        <h2 class="doctor-name">{{user.firstName}} {{user.lastName}}</h2>
        <p class="doctor-specialty">ექიმი</p>
       
        <p class="doctor-specialty">{{user.specialty}}</p>
        <div class="rating">
          <span class="star" *ngFor="let star of [1,2,3,4,5]">&#9733;</span>
        </div>
        <div class="contact-info">
          <p class="phone">პირადი ნომერი : </p>
          <h5>{{user.personalNumber}}</h5>
          <p class="email">Email :</p>
          <h5>{{user.email}}</h5>
        </div>
        </div>
        <p class="password-change">პაროლის შეცვლა</p>
        <p class="appointments">დაჯავშნილია : <span>(20)</span></p>
      </div>
    
      
      <div class="calendar-section">
        <app-calendar [isDoctorView]="true" [doctorId]="1"></app-calendar>
      </div>
</div>

================
File: src/app/pages/doctor-profile/doctor-profile.component.ts
================
import { Component, OnInit } from '@angular/core';
import { Observable } from 'rxjs';
import { AuthService } from '../../services/auth.service';

@Component({
  selector: 'app-doctor-profile',
  templateUrl: './doctor-profile.component.html',
  styleUrl: './doctor-profile.component.css'
})
export class DoctorProfileComponent implements OnInit{
 
  isAuthenticated$! : Observable<boolean>;
  currentUser$! : Observable<any>;

  constructor(private authService: AuthService) {}

  ngOnInit() {
    this.isAuthenticated$ = this.authService.isAuthenticated();
    this.currentUser$ = this.authService.getCurrentUser();
    
  }

  

 
}

================
File: src/app/pages/doctor-registration/doctor-registration.component.css
================
@import url("https://free.bboxtype.com/embedfonts/?family=FiraGO:200,300,400,500,600,700,800,900");

*{
  font-family: 'FiraGO', sans-serif;
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}
input {
    width: 480px;
    border-radius: 50px;
    border: 1px solid #18a4e180;
    padding: 15px 25px;
  }
  label {
    margin-left: 20px;
    font-weight:400;
  }
  .input {
    display: flex;
    flex-direction: column;
    gap: 10px;
  }

  .registration {
    
    padding: 20px 120px;
  }
  .remove {
    padding: 20px 0;
  }
  .header {
  font-family: 'FiraGO', sans-serif;

    margin: 30px 0;
    color: #18A4E1;
    font-weight: bold;
  }
  form {
    display: flex;
    flex-direction: column;
    gap: 20px;
    width: fit-content;
    margin-bottom: 100px;
  }
  .row1,
  .row2,
  .row3 {
    display: flex;
    flex-wrap: wrap;
    gap: 50px;
  }
  button {
    border: none;
    background-color: #053354;
    border-radius: 50px;
    padding: 15px 35px;
    color: white;
  }
  .btn {
    align-self: flex-end;
    font-size: 16px;
    cursor: pointer;
    
  }

 /* Add these responsive styles at the end of your existing CSS */

/* Add these responsive styles at the end of your existing CSS */

@media (max-width: 1800px) {
  .registration {
    padding: 20px 60px;
    display: flex;
    flex-direction: column;
    align-items: center;
  }

  form {
    max-width: 1000px;
    width: 100%;
  }

  .row1,
  .row2,
  .row3 {
    gap: 30px;
    justify-content: center;
  }

  .input-container {
    width: calc(33.333% - 20px);
    max-width: 480px;
  }

  input {
    width: 100%;
  }
}

@media (max-width: 992px) {
  .registration {
    padding: 20px 40px;
  }

  form {
    max-width: 600px;
  }

  .row1,
  .row2,
  .row3 {
    flex-direction: column;
    gap: 20px;
  }

  .input-container {
    width: 100%;
  }

  .btn {
    align-self: center;
    margin-top: 20px;
  }
}

@media (max-width: 768px) {
  .registration {
    padding: 20px 20px;
  }

  .header {
    font-size: 24px;
    margin: 20px 0;
    text-align: center;
  }

  form {
    max-width: 480px;
  }

  input {
    padding: 12px 20px;
  }

  .btn {
    width: 100%;
    max-width: 300px;
  }
}

@media (max-width: 480px) {
  .registration {
    padding: 15px 15px;
  }

  .header {
    font-size: 20px;
  }

  label {
    margin-left: 15px;
  }

  input {
    padding: 10px 15px;
  }

  .btn {
    font-size: 14px;
    padding: 12px 25px;
  }
}

================
File: src/app/pages/doctor-registration/doctor-registration.component.html
================
<div class="registration">
    <h2 class="header">რეგისტრაცია</h2>
    <form [formGroup]="registerForm" (ngSubmit)="onRegister()">
        <div class="row1">
            <div class="input-container">
                <div class="input">
                    <label for="firstName">სახელი</label>
                    <input type="text" id="firstName" formControlName="firstName" placeholder="(მინიმუმ 2 სიმბოლო)">
                    <div *ngIf="registerForm.get('firstName')?.invalid && registerForm.get('firstName')?.touched" 
                         class="error-message">
                        სახელის ველის შევსება აუცილებელია
                    </div>
                </div>
            </div>
            <div class="input-container">
                <div class="input">
                    <label for="email">Email</label>
                    <div class="input-wrapper">
                        <input 
                          type="email" 
                          id="email" 
                          formControlName="email"
                          [class.is-pending]="email?.pending"
                          [class.is-invalid]="email?.errors && email?.touched"
                        >
                        <div class="spinner" *ngIf="email?.pending">
                          <!-- Add your loading spinner here -->
                        </div>
                      </div>
                      
                      <div class="error-messages">
                        <div *ngIf="email?.errors?.['required'] && email?.touched" 
                             class="error-message">
                          Email is required
                        </div>
                        <div *ngIf="email?.errors?.['email'] && email?.touched" 
                             class="error-message">
                          Please enter a valid email address
                        </div>
                        <div *ngIf="email?.errors?.['emailExists']" 
                             class="error-message">
                          This email is already in use
                        </div>
                      </div>
                </div>
            </div>
            <div class="input-container">
                <div class="input">
                    <label for="personalNumber">პირადი ნომერი</label>
                    <input type="text" id="personalNumber" formControlName="personalNumber" placeholder="00000000000">
                    <div *ngIf="registerForm.get('personalNumber')?.invalid && registerForm.get('personalNumber')?.touched" 
                         class="error-message">
                        პირადი ნომრის ველის შევსება აუცილებელია
                    </div>
                </div>
            </div>
        </div>
        <div class="row2">
            <div class="input-container">
                <div class="input">
                    <label for="lastName">გვარი</label>
                    <input type="text" id="lastName" formControlName="lastName">
                    <div *ngIf="registerForm.get('lastName')?.invalid && registerForm.get('lastName')?.touched" 
                         class="error-message">
                        გვარის ველის შევსება აუცილებელია
                    </div>
                </div>
            </div>
            <div class="input-container">
                <div class="input">
                    <label for="specialty">სპეციალობა</label>
                    <input type="text" id="specialty" formControlName="specialty" 
                           placeholder="შეიყვანეთ სპეციალობა">
                    <div *ngIf="registerForm.get('specialty')?.invalid && registerForm.get('specialty')?.touched" 
                         class="error-message">
                        სპეციალობის ველის შევსება აუცილებელია
                    </div>
                </div>
            </div>
            <div class="input-container">
                <div class="input">
                    <label for="password">პაროლი</label>
                    <input type="password" id="password" formControlName="password" placeholder="(მინიმუმ 8 სიმბოლო)">
                    <div *ngIf="registerForm.get('password')?.invalid && registerForm.get('password')?.touched" 
                         class="error-message">
                        პაროლის ველის შევსება აუცილებელია
                    </div>
                </div>
            </div>
        </div>
        <div class="row3">
            <div class="input-container">
                <div class="input">
                    <label for="photoUrl">ფოტოს URL</label>
                    <input type="text" id="photoUrl" formControlName="photoUrl">
                </div>
            </div>
        
            <div class="input-container">
                <div class="input">
                    <label for="cvUrl">CV URL</label>
                    <input type="text" id="cvUrl" formControlName="cvUrl">
                </div>
            </div>
        </div>
        <button type="submit" class="btn" [disabled]="!registerForm.valid || isSubmitting">
            {{ isSubmitting ? 'მიმდინარეობს...' : 'რეგისტრაცია' }}
        </button>
    </form>
</div>

================
File: src/app/pages/doctor-registration/doctor-registration.component.ts
================
import { Component } from '@angular/core';
import { AbstractControl, AsyncValidatorFn, FormBuilder, FormGroup, ValidationErrors, Validators } from '@angular/forms';
import { AuthService } from '../../services/auth.service';
import { Router } from '@angular/router';
import { catchError, debounceTime, map, Observable, of } from 'rxjs';
import { User } from '../../Models/Patient.model';

@Component({
  selector: 'app-doctor-registration',
  templateUrl: './doctor-registration.component.html',
  styleUrl: './doctor-registration.component.css'
})
export class DoctorRegistrationComponent {

  registerForm:FormGroup;
  errorMessage:string = '';
  isSubmitting:boolean=false;

  constructor(
    private fb: FormBuilder,
    private authService: AuthService,
    private router: Router
  ) {
    this.registerForm = this.fb.group({
      firstName: ['', [Validators.required, Validators.minLength(2)]],
      lastName: ['', [Validators.required, Validators.minLength(2)]],
      email: ['', [Validators.required, Validators.email], [this.emailExistsValidator()]],
      personalNumber: ['', [
        Validators.required,
        Validators.minLength(11),
        Validators.maxLength(11),
        Validators.pattern('^[0-9]*$')
      ]],
      password: ['', [Validators.required, Validators.minLength(8)]],
      specialty: ['', Validators.required],
      photoUrl: [''],
      cvUrl: ['']
    });
  }

  private emailExistsValidator(): AsyncValidatorFn {
    return (control: AbstractControl): Observable<ValidationErrors | null> => {
      // Don't validate empty or invalid email format
      if (!control.value || !control.value.trim() || control.hasError('email')) {
        return of(null);
      }

      return this.authService.checkEmailExists(control.value).pipe(
        debounceTime(300), // Wait for user to stop typing
        map(exists => exists ? { emailExists: true } : null),
        catchError(() => of(null)) // Handle errors gracefully
      );
    };
  }

    // Getter for easy access in template
    get email() { 
      return this.registerForm.get('email'); 
    }

    onRegister() {
      if (this.registerForm.valid) {
        this.isSubmitting = true;
        this.errorMessage = '';
  
        const doctorData = {
          ...this.registerForm.value,
          role: 'DOCTOR',
          userId: 0 // This will be assigned by the backend
        };
  
        this.authService.addDoctor(doctorData).subscribe({
          next: (response) => {
            console.log('Doctor registration successful:', response);
            this.router.navigate(['/main']);
          },
          error: (error) => {
            console.error('Registration error:', error);
            this.errorMessage = error.message || 'Registration failed';
            this.isSubmitting = false;
          },
          complete: () => {
            this.isSubmitting = false;
          }
        });
      }
    }

}

================
File: src/app/pages/main/main.component.css
================
.main-image {
  height: 600px;
  width: 100%;
  background-image: url("/assets/slider.png");
  background-repeat: no-repeat;
  background-size: cover;
  background-position: center;
}

.main-section {
  padding: 50px 120px;
  display: flex;
  gap: 70px;
}

.content-wrapper {
  display: flex;
  flex-direction: column;
  width: 100%;
}

.doctors {
  display: flex;
  flex-wrap: wrap;
  gap: 30px;
  transition: all 0.3s ease;
}

.see-all {
  align-self: flex-end;
  margin-top: 30px;
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 6px;
  cursor: pointer;
  transition: all 0.3s ease;
}

.see-all p {
  color: #053354;
  font-size: 14px;
  font-weight: 400;
  transition: color 0.3s ease;
}

.see-all:hover p {
  color: #18a4e1;
}

.see {
  width: 80px;
  height: 2px;
  background-color: #18a4e1;
  transition: width 0.3s ease;
}

.see-all:hover .see {
  width: 100px;
}

.card {
  display: flex;
  flex-direction: column;
  align-items: center;
  width: 390px;
  height: 390px;
  box-shadow: 0px 4px 30px 0px #0533540d;
  border: 1px solid #18a4e14d;
  border-radius: 10px;
  padding: 15px;
  transition: all 0.3s ease;
}

.card[data-pinned="true"] {
  border-color: #18A4E1;
  box-shadow: 0px 4px 30px 0px rgba(24, 164, 225, 0.1);
}

.views {
  display: flex;
  align-items: center;
  background-color: #ecf2f880;
  border-radius: 50px;
  gap: 10px;
  padding: 6px 15px;
  color: #05335480;
  align-self: flex-start;
}

.top {
  display: flex;
  justify-content: space-between;
  width: 100%;
}

.pin {
  cursor: pointer;
  transition: all 0.3s ease;
}

.pin:hover {
  transform: scale(1.1);
}

.pin.pinned {
  fill: #18A4E1;
}

.pinned {
  stroke: #18a4e1;
}

img {
  width: 157px;
  height: 157px;
  margin-bottom: 5px;
  border-radius: 50%;
  object-fit: cover;
}

h2 {
  color: #053354;
  font-size: 18px;
  font-weight: 400;
  margin-top: 10px;
}

.position {
  color: #0533544d;
  font-size: 16px;
  font-weight: 400;
  margin: 10px 0;
}

.book {
  display: flex;
  border: none;
  border-radius: 25px;
  background-color: #ecf2f8;
  padding: 15px 30px;
  align-items: center;
  gap: 5px;
  cursor: pointer;
  margin-top: 10px;
  transition: all 0.3s ease;
}

.book:hover {
  border: 1px solid #18a4e1;
  background-color: white;
  color: #18a4e1;
}

.book:hover svg {
  fill: #18a4e1;
}

.book p {
  font-size: 16px;
  font-weight: 400;
}

@media (max-width: 1600px) {
  .main-image {
      height: 600px;
      width: 100%;
      background-image: url("../../../assets/slider.png");
      background-repeat: no-repeat;
      background-size: cover;
      background-position: left center;
  }
  .main-section {
      padding: 50px 60px;
      flex-direction: column;
  }
  
  .doctors {
      justify-content: center;
  }
}

@media (max-width: 768px) {
  .main-image {
      height: 300px;
  }

  .main-section {
      padding: 30px 20px;
  }

  .card {
      width: 100%;
      max-width: 390px;
  }

  .doctors {
      gap: 20px;
  }

  .see-all {
      align-self: center;
  }
}

@media (max-width: 480px) {
  .main-image {
      height: 200px;
  }

  .card {
      height: auto;
      padding: 10px;
  }

  .book {
      width: 100%;
      justify-content: center;
  }
}

================
File: src/app/pages/main/main.component.html
================
<div class="main-image">
</div>

<div class="main-section">
    <app-categories class="categories" (categorySelected)="handleCategorySelected($event)"></app-categories>
    <div class="content-wrapper">
        <div class="doctors">
            <div class="card" *ngFor="let card of displayedDoctors" [attr.data-pinned]="card.isPinned">
                <div class="top">
                    <div class="views">
                        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="#053354" viewBox="0 0 256 256">
                            <path d="M251,123.13c-.37-.81-9.13-20.26-28.48-39.61C196.63,57.67,164,44,128,44S59.37,57.67,33.51,83.52C14.16,102.87,5.4,122.32,5,123.13a12.08,12.08,0,0,0,0,9.75c.37.82,9.13,20.26,28.49,39.61C59.37,198.34,92,212,128,212s68.63-13.66,94.48-39.51c19.36-19.35,28.12-38.79,28.49-39.61A12.08,12.08,0,0,0,251,123.13Zm-46.06,33C183.47,177.27,157.59,188,128,188s-55.47-10.73-76.91-31.88A130.36,130.36,0,0,1,29.52,128,130.45,130.45,0,0,1,51.09,99.89C72.54,78.73,98.41,68,128,68s55.46,10.73,76.91,31.89A130.36,130.36,0,0,1,226.48,128,130.45,130.45,0,0,1,204.91,156.12ZM128,84a44,44,0,1,0,44,44A44.05,44.05,0,0,0,128,84Zm0,64a20,20,0,1,1,20-20A20,20,0,0,1,128,148Z"></path>
                        </svg>
                        <p>127123</p>
                    </div>
                    <button style="background-color: transparent; border: none;">
                    <svg class="pin" width="24" height="24" viewBox="0 0 24 24" fill="none"
                        [class.pinned]="card.isPinned"
                        (click)="togglePin(card.doctorId,$event)"   
                        xmlns="http://www.w3.org/2000/svg">
                        <path d="M23.7 11.3L12.7 0.300049L11.3 1.70005L12.7 3.10005L7.39999 8.40005C5.49999 8.50005 3.79999 9.30005 2.39999 10.7L1.69999 11.4L6.39999 16.1L0.299988 22.3L1.69999 23.7001L7.89999 17.5L12.7 22.4L13.4 21.7001C14.8 20.4001 15.6 18.6 15.7 16.7001L21 11.4L22.3 12.7L23.7 11.3ZM13.6 15.8V16.2C13.6 17.4 13.3 18.5 12.6 19.5L4.49999 11.4C5.49999 10.7 6.59999 10.3 7.69999 10.3H8.09999L14 4.40005L19.5 9.90005L13.6 15.8Z" fill="#ECF2F8"/>
                    </svg></button>
                </div>

                <img [src]="card.photoUrl" alt="{{card.firstName}} {{card.lastName}}">
                <h2>{{card.firstName}} {{card.lastName}}</h2>
                <p class="position">{{card.specialty}}</p>
                <div class="start">
                    <ng-container *ngFor="let filled of getStarsArray(card.rating)">
                        <svg xmlns="http://www.w3.org/2000/svg" 
                             width="17" 
                             height="17"
                             [attr.fill]="filled ? '#FFD233' : '#ECF2F8'" 
                             viewBox="0 0 256 256">
                            <path d="M234.5,114.38l-45.1,39.36,13.51,58.6a16,16,0,0,1-23.84,17.34l-51.11-31-51,31a16,16,0,0,1-23.84-17.34L66.61,153.8,21.5,114.38a16,16,0,0,1,9.11-28.06l59.46-5.15,23.21-55.36a15.95,15.95,0,0,1,29.44,0h0L166,81.17l59.44,5.15a16,16,0,0,1,9.11,28.06Z"></path>
                        </svg>
                    </ng-container>
                </div>
                <button class="book" [routerLink]="['/patient/book-appointment/'+card.doctorId]">
                    <p>მიღებაზე ჩაწერა</p>
                    <svg xmlns="http://www.w3.org/2000/svg" width="17" height="17" viewBox="0 0 256 256">
                        <path d="M181.66,133.66l-80,80a8,8,0,0,1-11.32-11.32L164.69,128,90.34,53.66a8,8,0,0,1,11.32-11.32l80,80A8,8,0,0,1,181.66,133.66Z"></path>
                    </svg>
                </button>
            </div>
        </div>
        
        <div class="see-all" *ngIf="allDoctors.length > CARDS_PER_PAGE">
            <button style="background-color: transparent; border: none; cursor: pointer;">
            <p (click)="toggleShowAll()">{{ showAllDoctors ? 'ნაკლების ნახვა' : 'ყველას ნახვა' }}</p>
            </button><div class="see"></div>
        </div>
    </div>
</div>

================
File: src/app/pages/main/main.component.ts
================
import { Component, OnInit, OnDestroy } from '@angular/core';
import { DoctorService } from '../../services/doctor.service';
import { DoctorCard } from '../../Models/doctorCard.model';
import { Subscription } from 'rxjs';

@Component({
  selector: 'app-main',
  templateUrl: './main.component.html',
  styleUrl: './main.component.css'
})
export class MainComponent implements OnInit, OnDestroy {
  displayedDoctors: DoctorCard[] = [];
  allDoctors: DoctorCard[] = [];
  showAllDoctors: boolean = false;
  readonly CARDS_PER_PAGE = 6;
  private subscription: Subscription = new Subscription();

  constructor(public doctorService: DoctorService) {}

  ngOnInit(): void {
    // Get initial data
    this.doctorService.getDoctorCard().subscribe();
    console.log(this.doctorService.getDoctorCard().subscribe());
    
    // Subscribe to filtered cards
    this.subscription.add(
      this.doctorService.getFilteredCards().subscribe(doctors => {
        this.allDoctors = [...doctors]; // Keep a copy of all doctors
        console.log(this.allDoctors)
        this.updateDisplayedDoctors();
      })
    );
  }

  ngOnDestroy(): void {
    if (this.subscription) {
      this.subscription.unsubscribe();
    }
  }

  private updateDisplayedDoctors() {
    const sortedDoctors = [...this.allDoctors].sort((a, b) => {
      if (a.isPinned === b.isPinned) return 0;
      return a.isPinned ? -1 : 1;
    });

    this.displayedDoctors = this.showAllDoctors 
      ? sortedDoctors 
      : sortedDoctors.slice(0, this.CARDS_PER_PAGE);
  }

  toggleShowAll() {
    this.showAllDoctors = !this.showAllDoctors;
    this.updateDisplayedDoctors();
  }

  togglePin(doctorId: number, event: Event) {
    event.stopPropagation();
    this.doctorService.togglePin(doctorId);
  }

  handleCategorySelected(category: string | null) {
    this.showAllDoctors = false;
    this.doctorService.filterBySpecialty(category);
  }

  getStarsArray(rating: number): number[] {
    return Array(5).fill(0).map((_, i) => i < rating ? 1 : 0);
  }
}

================
File: src/app/pages/registration/registration.component.css
================
@import url("https://free.bboxtype.com/embedfonts/?family=FiraGO:200,300,400,500,600,700,800,900");

/* General Reset */
* {
  font-family: 'FiraGO', sans-serif;
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

/* Input Styles */
input {
  width: 480px;
  border-radius: 50px;
  border: 1px solid #18a4e180;
  padding: 15px 25px;
}

label {
  margin-left: 20px;
  font-weight: 400;
}

/* Layout Styles */
.input {
  display: flex;
  flex-direction: column;
  gap: 10px;
}

.registration {
  padding: 20px 120px;
}

.remove {
  padding: 20px 0;
}

.header {
  margin: 30px 0;
  color: #18A4E1;
  font-weight: bold;
}

form {
  display: flex;
  flex-direction: column;
  gap: 20px;
  width: fit-content;
  margin-bottom: 100px;
}

/* Row Styles */
.row1,
.row2 {
  display: flex;
  flex-wrap: wrap;
  gap: 50px;
}

/* Button Styles */
.btn {
  align-self: flex-end;
  background-color: #053354;
  font-size: 16px;
  border: none;
  border-radius: 50px;
  padding: 15px 35px;
  color: white;
  cursor: pointer;
}

/* Error Message Styles */
.error-message {
  color: #ff0000;
  font-size: 12px;
  margin-top: 5px;
}

/* Responsive Styles */
@media (max-width: 1800px) {
  .registration {
    padding: 20px 60px;
    display: flex;
    flex-direction: column;
    align-items: center;
  }

  form {
    max-width: 1000px;
    width: 100%;
  }

  .row1,
  .row2 {
    gap: 30px;
    justify-content: center;
  }

  .input-container {
    width: calc(33.333% - 20px);
    max-width: 480px;
  }

  input {
    width: 100%;
  }
}

@media (max-width: 992px) {
  .registration {
    padding: 20px 40px;
  }

  form {
    max-width: 600px;
  }

  .row1,
  .row2 {
    flex-direction: column;
    gap: 20px;
  }

  .input-container {
    width: 100%;
  }

  .btn {
    align-self: center;
    margin-top: 20px;
  }
}

@media (max-width: 768px) {
  .registration {
    padding: 20px 20px;
  }

  .header {
    font-size: 24px;
    margin: 20px 0;
    text-align: center;
  }

  form {
    max-width: 480px;
  }

  input {
    padding: 12px 20px;
  }

  .btn {
    width: 100%;
    max-width: 300px;
  }
}

@media (max-width: 480px) {
  .registration {
    padding: 15px 15px;
  }

  .header {
    font-size: 20px;
  }

  label {
    margin-left: 15px;
  }

  input {
    padding: 10px 15px;
  }

  .btn {
    font-size: 14px;
    padding: 12px 25px;
  }
}

/* Input Wrapper */
.input-wrapper {
  position: relative;
  width: 100%;
  display: flex;
  align-items: center;
}

.input-wrapper input {
  padding-right: 120px; /* Space for the button */
}

/* Button in Input Wrapper */
.send-email-btn {
  position: absolute;
  right: 5px;
  top: 50%;
  transform: translateY(-50%);
  color: white;
  background-color: transparent;
  border: none;
  border-radius: 25px;
  padding: 8px 20px;
  font-size: 14px;
  cursor: pointer;
  transition: background-color 0.3s ease;
  z-index: 2;
}

/* Spinner Styles */
.spinner {
  position: absolute;
  right: 10px;
  top: 50%;
  transform: translateY(-50%);
  width: 20px;
  height: 20px;
  border: 2px solid #f3f3f3;
  border-top: 2px solid #3498db;
  border-radius: 50%;
  animation: spin 1s linear infinite;
}

@keyframes spin {
  0% { transform: translateY(-50%) rotate(0deg); }
  100% { transform: translateY(-50%) rotate(360deg); }
}

/* State Classes */
.is-pending {
  background-color: #f8f9fa;
  border-color: #007bff;
}

.is-invalid {
  border-color: #dc3545;
}

/* Error Message Container */
.error-messages {
  margin-top: 5px;
}

.error-message {
  color: #dc3545;
  font-size: 12px;
  margin-top: 2px;
}

================
File: src/app/pages/registration/registration.component.html
================
<div class="registration">
    <h2 class="header">რეგისტრაცია</h2>
    <div *ngIf="errorMessage" class="error-alert">
        {{ errorMessage }}
    </div>
    <form [formGroup]="registerForm" (ngSubmit)="onRegister()">
        <div class="row1">
            <div class="input-container">
                <div class="input">
                    <label for="firstName">სახელი</label>
                    <input type="text" id="firstName" formControlName="firstName" placeholder="(მინიმუმ 2 სიმბოლო)">
                    <div *ngIf="registerForm.get('firstName')?.invalid && registerForm.get('firstName')?.touched" 
                         class="error-message">
                        სახელის ველის შევსება აუცილებელია
                    </div>
                </div>
            </div>
            <div class="input-container">
                <div class="input">
                    <label for="email">Email</label>
                    <div class="input-wrapper">
                        <input 
                          type="email" 
                          id="email" 
                          formControlName="email"
                          [class.is-pending]="email?.pending"
                          [class.is-invalid]="email?.errors && email?.touched"
                        >
                        <button 
                        type="button" 
                        class="send-email-btn"
                        [disabled]="!email?.valid || email?.pending"
                        (click)="sendEmailVerification()"
                    >
                    <svg width="20" height="17" viewBox="0 0 20 17" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path fill-rule="evenodd" clip-rule="evenodd" d="M2.33333 0.333336C1.55376 0.333336 0.872333 0.724361 0.453604 1.3066C0.167283 1.70473 0 2.19583 0 2.72223V11.2778C0 12.5683 1.01637 13.6667 2.33333 13.6667H8.5C8.96025 13.6667 9.33333 13.2936 9.33333 12.8333C9.33333 12.3731 8.96025 12 8.5 12H2.33333C1.99345 12 1.66667 11.7055 1.66667 11.2778V3.62305L6.4829 8.92467C7.47488 10.0166 9.19175 10.0166 10.1838 8.92467L15 3.62305V7.11108C15 7.57133 15.3731 7.94442 15.8333 7.94442C16.2936 7.94442 16.6667 7.57133 16.6667 7.11108V2.72223C16.6667 2.19584 16.4994 1.70473 16.2131 1.3066C15.7943 0.724361 15.1129 0.333336 14.3333 0.333336H2.33333ZM7.71653 7.80392L2.44392 2H14.2228L8.95017 7.80392C8.6195 8.16792 8.04718 8.16792 7.71653 7.80392ZM15.2441 14.7441C14.9187 15.0695 14.9187 15.5972 15.2441 15.9226C15.5695 16.248 16.0972 16.248 16.4226 15.9226L18.9226 13.4226C19.248 13.0972 19.248 12.5695 18.9226 12.2441L16.4226 9.74409C16.0972 9.41867 15.5695 9.41867 15.2441 9.74409C14.9187 10.0695 14.9187 10.5972 15.2441 10.9226L16.3215 12H12.5C12.0398 12 11.6667 12.3731 11.6667 12.8333C11.6667 13.2936 12.0398 13.6667 12.5 13.6667H16.3215L15.2441 14.7441Z" fill="#053354"/>
                        </svg>
                        
                    </button>
                        <div class="spinner" *ngIf="email?.pending">
                          <!-- Add your loading spinner here -->
                        </div>
                      </div>
                      
                      <div class="error-messages">
                        <div *ngIf="email?.errors?.['required'] && email?.touched" 
                             class="error-message">
                          Email is required
                        </div>
                        <div *ngIf="email?.errors?.['email'] && email?.touched" 
                             class="error-message">
                          Please enter a valid email address
                        </div>
                        <div *ngIf="email?.errors?.['emailExists']" 
                             class="error-message">
                          This email is already in use
                        </div>
                      </div>
                </div>
            </div>
            <div class="input-container">
                <div class="input">
                    <label for="personalNumber">პირადი ნომერი</label>
                    <input type="text" id="personalNumber" formControlName="personalNumber" placeholder="00000000000">
                    <div *ngIf="registerForm.get('personalNumber')?.invalid && registerForm.get('personalNumber')?.touched" 
                         class="error-message">
                        პირადი ნომრის ველის შევსება აუცილებელია
                    </div>
                </div>
            </div>
        </div>
        <div class="row2">
            <div class="input-container">
                <div class="input">
                    <label for="lastName">გვარი</label>
                    <input type="text" id="lastName" formControlName="lastName">
                    <div *ngIf="registerForm.get('lastName')?.invalid && registerForm.get('lastName')?.touched" 
                         class="error-message">
                        გვარის ველის შევსება აუცილებელია
                    </div>
                </div>
            </div>
            <div class="input-container">
                <div class="input">
                    <label for="lastName">აქტვიაციის კოდი</label>
                    <input type="text" id="activationCode" formControlName="activationCode">
                    <div *ngIf="registerForm.get('activationCode')?.invalid && registerForm.get('activationCode')?.touched" 
                         class="error-message">
                        გვარის ველის შევსება აუცილებელია
                    </div>
                </div>
            </div>
            <div class="input-container">
                <div class="input">
                    <label for="password">პაროლი</label>
                    <input type="password" id="password" formControlName="password" placeholder="(მინიმუმ 8 სიმბოლო)">
                    <div *ngIf="registerForm.get('password')?.invalid && registerForm.get('password')?.touched" 
                         class="error-message">
                        პაროლის ველის შევსება აუცილებელია
                    </div>
                </div>
            </div>
        </div>
        <button type="submit" class="btn" [disabled]="!registerForm.valid || isSubmitting">
            {{ isSubmitting ? 'მიმდინარეობს...' : 'რეგისტრაცია' }}
        </button>
    </form>
</div>

================
File: src/app/pages/registration/registration.component.ts
================
import { Component, inject } from '@angular/core';
import {
  AbstractControl,
  AsyncValidatorFn,
  FormBuilder,
  FormGroup,
  ValidationErrors,
  Validators,
} from '@angular/forms';
import { User } from '../../Models/Patient.model';
import { AuthService } from '../../services/auth.service';
import { ActivatedRoute, Router } from '@angular/router';
import {
  catchError,
  debounceTime,
  first,
  map,
  Observable,
  of,
  switchMap,
} from 'rxjs';

@Component({
  selector: 'app-registration',
  templateUrl: './registration.component.html',
  styleUrl: './registration.component.css',
})
export class RegistrationComponent {
  registerForm: FormGroup;
  errorMessage: string = '';
  isSubmitting: boolean = false;

  constructor(
    private fb: FormBuilder,
    private authService: AuthService,
    private router: Router
  ) {
    this.registerForm = this.fb.group({
      firstName: ['', [Validators.required, Validators.minLength(2)]],
      lastName: ['', [Validators.required, Validators.minLength(2)]],
      email: [
        '',
        [Validators.required, Validators.email],
        [this.emailExistsValidator()],
      ],
      personalNumber: [
        '',
        [
          Validators.required,
          Validators.minLength(11),
          Validators.maxLength(11),
          Validators.pattern('^[0-9]*$'),
        ],
      ],
      password: ['', [Validators.required, Validators.minLength(8)]],
    });
  }
  private emailExistsValidator(): AsyncValidatorFn {
    return (control: AbstractControl): Observable<ValidationErrors | null> => {
      // Don't validate empty or invalid email format
      if (!control.value || !control.value.trim() || control.hasError('email')) {
        return of(null);
      }
  
      return control.valueChanges.pipe(
        debounceTime(1000), // Wait for user to stop typing before HTTP call
        switchMap((value) => 
          this.authService.checkEmailExists(value).pipe(
            map((exists) => (exists ? { emailExists: true } : null)),
            catchError(() => of(null)) // handle errors
          )
        ),
        first() // Complete the observable after one emission
      );
    };
  }
  sendEmailVerification() {
    if (this.email?.valid) {
        // You can implement the email verification logic here
        console.log('Sending verification email to:', this.email.value);
        // Example implementation:
        // this.authService.sendVerificationEmail(this.email.value).subscribe({
        //     next: (response) => {
        //         console.log('Verification email sent successfully');
        //         // Show success message
        //     },
        //     error: (error) => {
        //         console.error('Error sending verification email:', error);
        //         // Show error message
        //     }
        // });
    }
}

  // Getter for easy access in template
  get email() {
    return this.registerForm.get('email');
  }

  onRegister() {
    if (this.registerForm.valid) {
      this.isSubmitting = true;
      this.errorMessage = '';

      const userData: User = {
        userId: 0,
        firstName: this.registerForm.value.firstName,
        lastName: this.registerForm.value.lastName,
        email: this.registerForm.value.email,
        personalNumber: this.registerForm.value.personalNumber,
        password: this.registerForm.value.password,
        role: 'Patient',
      };

      console.log('Submitting user data:', userData);

      this.authService.addUser(userData).subscribe({
        next: (response) => {
          console.log('Registration successful:', response);
          alert('Registration successful!');
        },
        error: (error) => {
          console.error('Registration error:', error);
          this.errorMessage = error.message;
          this.isSubmitting = false;
        },
        complete: () => {
          this.isSubmitting = false;
        },
      });
      this.registerForm.reset();
    } else {
      this.errorMessage = 'Please fill in all required fields correctly.';
    }
    
  }
}

================
File: src/app/pages/user-profile/user-profile.component.css
================
.user-prof {
    padding: 40px 5%;
    display: flex;
    gap: 30px;
    max-width: 100%;
    margin: 0 auto;
    overflow-x: hidden;
}

.main-content {
    display: flex;
    justify-content: space-between;
    padding: 20px;
    background-color: #f5f5f5;
    width: 100%;
}

.user-profile {
    background-color: white;
    border-radius: 10px;
    padding: 20px;
    width: 366px;
    min-width: 300px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    text-align: center;
  
}

.user-image {
    width: 150px;
    height: 150px;
    border-radius: 50%;
    margin-bottom: 15px;
    object-fit: cover;
}

.user-name {
    font-size: 24px;
    margin-bottom: 5px;
}

.user-specialty {
    color: #666;
    margin-bottom: 15px;
    font-size: 16px;
}

.rating {
    color: #FFD700;
    font-size: 20px;
    margin-bottom: 15px;
}

.contact-info {
    margin-bottom: 15px;
}

.phone, .email {
    margin: 5px 0;
    color: #333;
}

h5 {
    margin: 5px 0 15px;
    word-break: break-word;
}

.experience, .appointments {
    margin: 10px 0;
    color: #666;
    cursor: pointer;
    transition: color 0.3s ease;
}

.experience:hover, .appointments:hover {
    color: #333;
}

.appointments span {
    font-weight: bold;
    color: #333;
}

.calendar-section {
    background-color: white;
    border-radius: 10px;
    padding: 20px;
    width: 830px;
    flex-grow: 1;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
}

/* Responsive Breakpoints */
@media (max-width: 1400px) {
    .user-prof {
        max-width: 1208px;
    }
    
    .calendar-section {
        width: 700px;
    }
}

@media (max-width: 1200px) {
    .user-prof {
        padding: 20px 3%;
    }

    .calendar-section {
        width: 600px;
    }

    .user-profile {
        width: 320px;
        min-width: 280px;
    }
}

@media (max-width: 992px) {
    .user-prof {
        flex-direction: column;
        align-items: center;
        gap: 20px;
    }

    .user-profile {
        width: 100%;
        max-width: 500px;
    }

    .calendar-section {
        width: 100%;
        max-width: 800px;
    }

    app-categories {
        width: 100%;
        max-width: 800px;
    }
}

@media (max-width: 768px) {
    .user-prof {
        padding: 15px 2%;
    }

    .user-profile {
        padding: 15px;
    }

    .user-image {
        width: 120px;
        height: 120px;
    }

    .user-name {
        font-size: 20px;
    }

    .user-specialty {
        font-size: 14px;
    }
}

@media (max-width: 480px) {
    .user-prof {
        padding: 10px;
        gap: 15px;
    }

    .user-profile {
        padding: 12px;
    }

    .user-image {
        width: 100px;
        height: 100px;
    }

    .calendar-section {
        padding: 12px;
    }

    .contact-info {
        font-size: 14px;
    }

    h5 {
        font-size: 14px;
    }
}

================
File: src/app/pages/user-profile/user-profile.component.html
================
<div class="user-prof">
    <app-categories></app-categories>
    <div class="user-profile">
        <img src="assets/Ellipse 5.png" alt="გიორგი ხიზაძე" class="doctor-image">
        <p class="user-specialty">მომხმარებელი</p>
        <div class="contact-info">
          <div *ngIf="currentUser$|async as user">
          <p class="phone">პირადი ნომერი : </p>
          <h5>{{user.personalNumber}}</h5>
          <p class="email">Email : </p>
          <h5>{{user.email}}</h5>
        </div>
        <p class="experience">პაროლის შეცვლა</p>
        <p class="appointments">ჯავშანი: : <span>(20)</span></p>
      </div>
    </div>
      
      <div class="calendar-section">
        <app-calendar [isDoctorView]="false" [userId]="2" [doctorId]="1"></app-calendar>      </div>
</div>

================
File: src/app/pages/user-profile/user-profile.component.ts
================
import { Component, OnInit } from '@angular/core';
import { AuthService } from '../../services/auth.service';
import { Observable } from 'rxjs';

@Component({
  selector: 'app-user-profile',
  templateUrl: './user-profile.component.html',
  styleUrl: './user-profile.component.css'
})
export class UserProfileComponent implements OnInit {

  isAuthenticated$! : Observable<boolean>;
  userId :number|null = null;
  currentUser$! : Observable<any>;

  constructor(private authService: AuthService) {}

  ngOnInit() {
    this.isAuthenticated$ = this.authService.isAuthenticated();
    this.currentUser$ = this.authService.getCurrentUser();
    this.userId = Number(this.authService.getUserId());
    
  }

}

================
File: src/app/services/appointment.service.ts
================
import { Injectable } from '@angular/core';
import { BehaviorSubject, Observable } from 'rxjs';

export interface Appointment {
  id: number;
  doctorId: number;
  userId: number;
  date: Date;
  timeSlot: string;
  description: string;
}

@Injectable({
  providedIn: 'root'
})
export class AppointmentService {
  private appointments: Appointment[] = [
    { id: 1, doctorId: 1, userId: 2, date: new Date(2024, 9, 20), timeSlot: '10:00 - 11:00', description: 'Regular checkup' },
    { id: 2, doctorId: 1, userId: 3, date: new Date(2024, 9, 21), timeSlot: '14:00 - 15:00', description: 'Follow-up appointment' },
    { id: 3, doctorId: 1, userId: 4, date: new Date(2024, 9, 22), timeSlot: '11:00 - 12:00', description: 'Initial consultation' },
  ];

  private appointmentsSubject = new BehaviorSubject<Appointment[]>(this.appointments);

  constructor() {}

  getAppointments(): Observable<Appointment[]> {
    return this.appointmentsSubject.asObservable();
  }

  addAppointment(appointment: Appointment): void {
    this.appointments.push(appointment);
    this.appointmentsSubject.next(this.appointments);
  }

  getDoctorAppointments(doctorId: number): Observable<Appointment[]> {
    return new Observable<Appointment[]>(observer => {
      observer.next(this.appointments.filter(app => app.doctorId === doctorId));
    });
  }

  getUserAppointments(userId: number): Observable<Appointment[]> {
    return new Observable<Appointment[]>(observer => {
      observer.next(this.appointments.filter(app => app.userId === userId));
    });
  }

  isTimeSlotAvailable(doctorId: number, date: Date, timeSlot: string): boolean {
    return !this.appointments.some(
      app => app.doctorId === doctorId && 
             app.date.toDateString() === date.toDateString() && 
             app.timeSlot === timeSlot
    );
  }
}

================
File: src/app/services/auth.service.ts
================
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { BehaviorSubject, Observable, throwError } from 'rxjs';
import { tap, catchError, switchMap, map } from 'rxjs/operators';
import { Router } from '@angular/router';
import { jwtDecode } from 'jwt-decode';
import { UserLoginDto } from '../Models/Login.model';
import { User } from '../Models/Patient.model';
import { API_CONFIG } from '../config/api.config';

interface EmailCheckResponse {
  exists: boolean;
}

@Injectable({
  providedIn: 'root'
})
export class AuthService {
  private isAuthenticatedSubject = new BehaviorSubject<boolean>(false);
  private currentUserSubject = new BehaviorSubject<any>(null);

  constructor(
    private http: HttpClient,
    private router: Router
  ) {
    this.initializeFromToken();
  }

  private initializeFromToken() {
    const token = localStorage.getItem('Token');
    if (token) {
      this.isAuthenticatedSubject.next(true);
      const decodedToken = this.getDecodedToken();
      if (decodedToken?.nameid) {
        this.currentUserSubject.next({
          userId: decodedToken.nameid,
          role: decodedToken.role
        });

        this.fetchUserDetails(decodedToken.nameid).subscribe({
          next: (user) => this.currentUserSubject.next(user),
          error: () => this.handleAuthError()
        });
      }
    }
  }

  authenticate(loginData: UserLoginDto): Observable<any> {
    return this.http.post<any>(
      `${API_CONFIG.baseUrl}${API_CONFIG.endpoints.user.base}${API_CONFIG.endpoints.user.authenticate}`,
      loginData
    ).pipe(
      tap(response => {
        if (response?.accessToken) {
          localStorage.setItem('Token', response.accessToken);
          this.isAuthenticatedSubject.next(true);
          this.initializeFromToken();
        }
      })
    );
  }

  checkEmailExists(email: string): Observable<boolean> {
    return this.http.get<EmailCheckResponse>(
      `${API_CONFIG.baseUrl}${API_CONFIG.endpoints.user.base}${API_CONFIG.endpoints.user.checkEmail}/${email}`
    ).pipe(
      map(response => response.exists) // Use map to extract the exists property
    );
  }

  addUser(user: User): Observable<any> {
    return this.http.post<any>(
      `${API_CONFIG.baseUrl}${API_CONFIG.endpoints.patient.base}${API_CONFIG.endpoints.patient.register}`,
      user
    );
  }

  addDoctor(doctor: any): Observable<any> {
    return this.http.post<any>(
      `${API_CONFIG.baseUrl}${API_CONFIG.endpoints.doctor.base}${API_CONFIG.endpoints.doctor.register}`,
      doctor
    );
  }

  private fetchUserDetails(userId: string): Observable<any> {
    return this.http.get<any>(
      `${API_CONFIG.baseUrl}${API_CONFIG.endpoints.user.base}${API_CONFIG.endpoints.user.info}/${userId}`
    );
  }

  logout(): void {
    localStorage.removeItem('Token');
    this.isAuthenticatedSubject.next(false);
    this.currentUserSubject.next(null);
    this.router.navigate(['/main']);
  }

  // Utility methods
  isAuthenticated(): Observable<boolean> {
    return this.isAuthenticatedSubject.asObservable();
  }

  getCurrentUser(): Observable<any> {
    return this.currentUserSubject.asObservable();
  }

  private getDecodedToken(): any {
    const token = localStorage.getItem('Token');
    return token ? jwtDecode(token) : null;
  }

  getUserId(): string | null {
    const decodedToken = this.getDecodedToken();
    return decodedToken?.nameid || null;
  }

  getRole(): string | null {
    const decodedToken = this.getDecodedToken();
    return decodedToken?.role || null;
  }

  // Role checking methods
  isPatient(): boolean {
    return this.getRole() === 'Patient';
  }

  isDoctor(): boolean {
    return this.getRole() === 'Doctor';
  }

  isAdmin(): boolean {
    return this.getRole() === 'Admin';
  }

  private handleAuthError(): void {
    this.logout();
  }
}

================
File: src/app/services/doctor.service.ts
================
// src/app/services/doctor.service.ts
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { BehaviorSubject, Observable } from 'rxjs';
import { tap } from 'rxjs/operators';
import { DoctorCard } from '../Models/doctorCard.model';
import { API_CONFIG } from '../config/api.config';

@Injectable({
  providedIn: 'root'
})
export class DoctorService {
  private readonly PINNED_DOCTORS_KEY = 'pinnedDoctors';
  private _cards: DoctorCard[] = [];
  private filteredCardsSubject = new BehaviorSubject<DoctorCard[]>([]);
  private currentFilter: string | null = null;

  constructor(private http: HttpClient) {
    this.loadPinnedDoctors();
  }

  // GET requests
  getDoctorCard(): Observable<DoctorCard[]> {
    return this.http.get<DoctorCard[]>(
      `${API_CONFIG.baseUrl}${API_CONFIG.endpoints.doctor.base}${API_CONFIG.endpoints.doctor.cards}`
    ).pipe(
      tap(data => {
        this.cardsList = data;
      })
    );
  }

  getDoctorById(id: number): Observable<DoctorCard> {
    return this.http.get<DoctorCard>(
      `${API_CONFIG.baseUrl}${API_CONFIG.endpoints.doctor.base}${API_CONFIG.endpoints.doctor.byId}/${id}`
    );
  }

  deleteDoctorById(id: number): Observable<any> {
    return this.http.delete(
      `${API_CONFIG.baseUrl}${API_CONFIG.endpoints.doctor.base}${API_CONFIG.endpoints.doctor.delete}/${id}`
    ).pipe(
      tap(() => {
        this.handleDoctorDeletion(id);
      })
    );
  }

  // Local state management
  get cardsList(): DoctorCard[] {
    return this._cards;
  }

  set cardsList(list: DoctorCard[]) {
    const pinnedDoctors = localStorage.getItem(this.PINNED_DOCTORS_KEY);
    const pinnedIds = pinnedDoctors ? new Set(JSON.parse(pinnedDoctors)) : new Set();

    this._cards = list.map(card => ({
      ...card,
      isPinned: pinnedIds.has(card.doctorId)
    }));
    
    this.applyCurrentFilter();
  }

  private handleDoctorDeletion(id: number): void {
    const pinnedDoctors = localStorage.getItem(this.PINNED_DOCTORS_KEY);
    if (pinnedDoctors) {
      const pinnedIds = JSON.parse(pinnedDoctors).filter((pinnedId: number) => pinnedId !== id);
      localStorage.setItem(this.PINNED_DOCTORS_KEY, JSON.stringify(pinnedIds));
    }

    this._cards = this._cards.filter(card => card.doctorId !== id);
    this.applyCurrentFilter();
  }

  // Filter and Pin functionality
  private applyCurrentFilter() {
    if (this.currentFilter) {
      const filtered = this._cards.filter(
        doctor => doctor.specialty.toLowerCase() === this.currentFilter!.toLowerCase()
      );
      this.filteredCardsSubject.next(filtered);
    } else {
      this.filteredCardsSubject.next(this._cards);
    }
  }

  togglePin(doctorId: number) {
    this._cards = this._cards.map(card => {
      if (card.doctorId === doctorId) {
        return { ...card, isPinned: !card.isPinned };
      }
      return card;
    });

    const pinnedIds = this._cards
      .filter(card => card.isPinned)
      .map(card => card.doctorId);
    localStorage.setItem(this.PINNED_DOCTORS_KEY, JSON.stringify(pinnedIds));

    this.applyCurrentFilter();
  }

  filterBySpecialty(specialty: string | null) {
    this.currentFilter = specialty;
    this.applyCurrentFilter();
  }

  getFilteredCards(): Observable<DoctorCard[]> {
    return this.filteredCardsSubject.asObservable();
  }

  private loadPinnedDoctors() {
    const pinnedDoctors = localStorage.getItem(this.PINNED_DOCTORS_KEY);
    if (pinnedDoctors) {
      const pinnedIds = new Set(JSON.parse(pinnedDoctors));
      this._cards = this._cards.map(card => ({
        ...card,
        isPinned: pinnedIds.has(card.doctorId)
      }));
      this.applyCurrentFilter();
    }
  }
}

================
File: src/app/services/search.service.ts
================
import { Injectable } from '@angular/core';
import { BehaviorSubject, Observable, combineLatest } from 'rxjs';
import { DoctorCard } from '../Models/doctorCard.model';
import { DoctorService } from './doctor.service';
import { debounceTime, distinctUntilChanged, map } from 'rxjs/operators';

@Injectable({
  providedIn: 'root'
})
export class SearchService {
  private nameSearchSubject = new BehaviorSubject<string>('');
  private specialtySearchSubject = new BehaviorSubject<string>('');
  private showDropdownSubject = new BehaviorSubject<boolean>(false);
  private searchResultsSubject = new BehaviorSubject<DoctorCard[]>([]);

  constructor(private doctorService: DoctorService) {
    // Combine name and specialty search
    combineLatest([
      this.nameSearchSubject.pipe(
        debounceTime(300),
        distinctUntilChanged()
      ),
      this.specialtySearchSubject.pipe(
        debounceTime(300),
        distinctUntilChanged()
      ),
      this.doctorService.getFilteredCards()
    ]).subscribe(([nameSearch, specialtySearch, doctors]) => {
      const results = this.filterDoctors(doctors, nameSearch, specialtySearch);
      this.searchResultsSubject.next(results);
      this.showDropdownSubject.next(results.length > 0 && (nameSearch.length > 0 || specialtySearch.length > 0));
    });
  }

  private filterDoctors(doctors: DoctorCard[], nameSearch: string, specialtySearch: string): DoctorCard[] {
    return doctors.filter(doctor => {
      const fullName = `${doctor.firstName} ${doctor.lastName}`.toLowerCase();
      const specialty = doctor.specialty.toLowerCase();
      const nameMatch = nameSearch ? fullName.includes(nameSearch.toLowerCase()) : true;
      const specialtyMatch = specialtySearch ? specialty.includes(specialtySearch.toLowerCase()) : true;
      return nameMatch && specialtyMatch;
    });
  }

  // Setters for search terms
  setNameSearch(term: string) {
    this.nameSearchSubject.next(term);
  }

  setSpecialtySearch(term: string) {
    this.specialtySearchSubject.next(term);
  }

  // Observable getters
  getNameSearch(): Observable<string> {
    return this.nameSearchSubject.asObservable();
  }

  getSpecialtySearch(): Observable<string> {
    return this.specialtySearchSubject.asObservable();
  }

  getSearchResults(): Observable<DoctorCard[]> {
    return this.searchResultsSubject.asObservable();
  }

  getShowDropdown(): Observable<boolean> {
    return this.showDropdownSubject.asObservable();
  }

  // Method to close dropdown
  closeDropdown() {
    this.showDropdownSubject.next(false);
  }
}

================
File: src/app/services/visibility.service.ts
================
import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class VisibilityService {
  private visibilitySource = new BehaviorSubject<boolean>(false);
  private editVisibilitySource = new BehaviorSubject<boolean>(false);
  
  isVisible$ = this.visibilitySource.asObservable();
  isEditVisible$ = this.editVisibilitySource.asObservable();

  toggleVisibility() {
    this.visibilitySource.next(!this.visibilitySource.value);
  }

  setVisibility(value: boolean) {
    this.visibilitySource.next(value);
  }

  toggleEditVisibility() {
    this.editVisibilitySource.next(!this.editVisibilitySource.value);
  }
}

================
File: src/index.html
================
<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>ClinicApp</title>
  <base href="/">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="icon" type="image/x-icon" href="favicon.ico">
  <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500&display=swap" rel="stylesheet">
  <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
</head>
<body class="mat-typography">
  <app-root></app-root>
</body>
</html>

================
File: src/main.ts
================
import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';

import { AppModule } from './app/app.module';

platformBrowserDynamic().bootstrapModule(AppModule, {
  ngZoneEventCoalescing: true
})
  .catch(err => console.error(err));

================
File: src/styles.css
================
@import url("https://free.bboxtype.com/embedfonts/?family=FiraGO:200,300,400,500,600,700,800,900");

*{
    font-family: 'FiraGO', sans-serif;
    box-sizing: border-box;
    margin: 0;
    padding: 0;
}
h3, h2{
  font-family: 'FiraGO', sans-serif;
}




/* 
.cdk-overlay-backdrop.dark-backdrop {
  background-color: rgba(0, 0, 0, 0.7) !important;
} */

.centered-dialog {
  display: flex !important;
  align-items: center;
  justify-content: center;
}

.mat-dialog-container {
  padding: 24px;
  border-radius: 8px;
  width: 600px;
  height: 450px;
  box-shadow: 0 11px 15px -7px rgba(0,0,0,.2), 0 24px 38px 3px rgba(0,0,0,.14), 0 9px 46px 8px rgba(0,0,0,.12);
}

.cdk-overlay-pane.login-dialog {
  position: fixed !important;
  top: 50% !important;
  left: 50% !important;
  transform: translate(-50%, -50%) !important;
}

================
File: tsconfig.app.json
================
/* To learn more about Typescript configuration file: https://www.typescriptlang.org/docs/handbook/tsconfig-json.html. */
/* To learn more about Angular compiler options: https://angular.dev/reference/configs/angular-compiler-options. */
{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "outDir": "./out-tsc/app",
    "types": []
  },
  "files": [
    "src/main.ts"
  ],
  "include": [
    "src/**/*.d.ts"
  ]
}

================
File: tsconfig.json
================
/* To learn more about Typescript configuration file: https://www.typescriptlang.org/docs/handbook/tsconfig-json.html. */
/* To learn more about Angular compiler options: https://angular.dev/reference/configs/angular-compiler-options. */
{
  "compileOnSave": false,
  "compilerOptions": {
    "outDir": "./dist/out-tsc",
    "strict": true,
    "noImplicitOverride": true,
    "noPropertyAccessFromIndexSignature": true,
    "noImplicitReturns": true,
    "noFallthroughCasesInSwitch": true,
    "skipLibCheck": true,
    "isolatedModules": true,
    "esModuleInterop": true,
    "sourceMap": true,
    "declaration": false,
    "experimentalDecorators": true,
    "moduleResolution": "bundler",
    "importHelpers": true,
    "target": "ES2022",
    "module": "ES2022",
    "lib": [
      "ES2022",
      "dom"
    ]
  },
  "angularCompilerOptions": {
    "enableI18nLegacyMessageIdFormat": false,
    "strictInjectionParameters": true,
    "strictInputAccessModifiers": true,
    "strictTemplates": true
  }
}

================
File: tsconfig.spec.json
================
/* To learn more about Typescript configuration file: https://www.typescriptlang.org/docs/handbook/tsconfig-json.html. */
/* To learn more about Angular compiler options: https://angular.dev/reference/configs/angular-compiler-options. */
{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "outDir": "./out-tsc/spec",
    "types": [
      "jasmine"
    ]
  },
  "include": [
    "src/**/*.spec.ts",
    "src/**/*.d.ts"
  ]
}
